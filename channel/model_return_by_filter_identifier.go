/*
ChannelEngine Channel API

ChannelEngine API for channels

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package channel

import (
	"encoding/json"
	"fmt"
)

// ReturnByFilterIdentifier the model 'ReturnByFilterIdentifier'
type ReturnByFilterIdentifier string

// List of ReturnByFilterIdentifier
const (
	RETURNBYFILTERIDENTIFIER_RETURN_ID ReturnByFilterIdentifier = "RETURN_ID"
	RETURNBYFILTERIDENTIFIER_CHANNEL_RETURN_NO ReturnByFilterIdentifier = "CHANNEL_RETURN_NO"
	RETURNBYFILTERIDENTIFIER_MERCHANT_RETURN_NO ReturnByFilterIdentifier = "MERCHANT_RETURN_NO"
	RETURNBYFILTERIDENTIFIER_ORDER_ID ReturnByFilterIdentifier = "ORDER_ID"
	RETURNBYFILTERIDENTIFIER_CHANNEL_ORDER_NO ReturnByFilterIdentifier = "CHANNEL_ORDER_NO"
	RETURNBYFILTERIDENTIFIER_MERCHANT_ORDER_NO ReturnByFilterIdentifier = "MERCHANT_ORDER_NO"
)

// All allowed values of ReturnByFilterIdentifier enum
var AllowedReturnByFilterIdentifierEnumValues = []ReturnByFilterIdentifier{
	"RETURN_ID",
	"CHANNEL_RETURN_NO",
	"MERCHANT_RETURN_NO",
	"ORDER_ID",
	"CHANNEL_ORDER_NO",
	"MERCHANT_ORDER_NO",
}

func (v *ReturnByFilterIdentifier) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReturnByFilterIdentifier(value)
	for _, existing := range AllowedReturnByFilterIdentifierEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReturnByFilterIdentifier", value)
}

// NewReturnByFilterIdentifierFromValue returns a pointer to a valid ReturnByFilterIdentifier
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReturnByFilterIdentifierFromValue(v string) (*ReturnByFilterIdentifier, error) {
	ev := ReturnByFilterIdentifier(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReturnByFilterIdentifier: valid values are %v", v, AllowedReturnByFilterIdentifierEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReturnByFilterIdentifier) IsValid() bool {
	for _, existing := range AllowedReturnByFilterIdentifierEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReturnByFilterIdentifier value
func (v ReturnByFilterIdentifier) Ptr() *ReturnByFilterIdentifier {
	return &v
}

type NullableReturnByFilterIdentifier struct {
	value *ReturnByFilterIdentifier
	isSet bool
}

func (v NullableReturnByFilterIdentifier) Get() *ReturnByFilterIdentifier {
	return v.value
}

func (v *NullableReturnByFilterIdentifier) Set(val *ReturnByFilterIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnByFilterIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnByFilterIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnByFilterIdentifier(val *ReturnByFilterIdentifier) *NullableReturnByFilterIdentifier {
	return &NullableReturnByFilterIdentifier{value: val, isSet: true}
}

func (v NullableReturnByFilterIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnByFilterIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

