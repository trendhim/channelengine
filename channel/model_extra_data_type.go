/*
ChannelEngine Channel API

ChannelEngine API for channels

API version: 2.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package channel

import (
	"encoding/json"
	"fmt"
)

// ExtraDataType the model 'ExtraDataType'
type ExtraDataType string

// List of ExtraDataType
const (
	EXTRADATATYPE_TEXT ExtraDataType = "TEXT"
	EXTRADATATYPE_NUMBER ExtraDataType = "NUMBER"
	EXTRADATATYPE_URL ExtraDataType = "URL"
	EXTRADATATYPE_IMAGEURL ExtraDataType = "IMAGEURL"
)

// All allowed values of ExtraDataType enum
var AllowedExtraDataTypeEnumValues = []ExtraDataType{
	"TEXT",
	"NUMBER",
	"URL",
	"IMAGEURL",
}

func (v *ExtraDataType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ExtraDataType(value)
	for _, existing := range AllowedExtraDataTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ExtraDataType", value)
}

// NewExtraDataTypeFromValue returns a pointer to a valid ExtraDataType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExtraDataTypeFromValue(v string) (*ExtraDataType, error) {
	ev := ExtraDataType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ExtraDataType: valid values are %v", v, AllowedExtraDataTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExtraDataType) IsValid() bool {
	for _, existing := range AllowedExtraDataTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ExtraDataType value
func (v ExtraDataType) Ptr() *ExtraDataType {
	return &v
}

type NullableExtraDataType struct {
	value *ExtraDataType
	isSet bool
}

func (v NullableExtraDataType) Get() *ExtraDataType {
	return v.value
}

func (v *NullableExtraDataType) Set(val *ExtraDataType) {
	v.value = val
	v.isSet = true
}

func (v NullableExtraDataType) IsSet() bool {
	return v.isSet
}

func (v *NullableExtraDataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtraDataType(val *ExtraDataType) *NullableExtraDataType {
	return &NullableExtraDataType{value: val, isSet: true}
}

func (v NullableExtraDataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtraDataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

