/*
ChannelEngine Channel API

ChannelEngine API for channels

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package channel

import (
	"encoding/json"
	"fmt"
)

// ReturnIdentifier the model 'ReturnIdentifier'
type ReturnIdentifier string

// List of ReturnIdentifier
const (
	RETURNIDENTIFIER_RETURN_ID ReturnIdentifier = "RETURN_ID"
	RETURNIDENTIFIER_CHANNEL_RETURN_NO ReturnIdentifier = "CHANNEL_RETURN_NO"
	RETURNIDENTIFIER_MERCHANT_RETURN_NO ReturnIdentifier = "MERCHANT_RETURN_NO"
)

// All allowed values of ReturnIdentifier enum
var AllowedReturnIdentifierEnumValues = []ReturnIdentifier{
	"RETURN_ID",
	"CHANNEL_RETURN_NO",
	"MERCHANT_RETURN_NO",
}

func (v *ReturnIdentifier) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReturnIdentifier(value)
	for _, existing := range AllowedReturnIdentifierEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReturnIdentifier", value)
}

// NewReturnIdentifierFromValue returns a pointer to a valid ReturnIdentifier
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReturnIdentifierFromValue(v string) (*ReturnIdentifier, error) {
	ev := ReturnIdentifier(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReturnIdentifier: valid values are %v", v, AllowedReturnIdentifierEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReturnIdentifier) IsValid() bool {
	for _, existing := range AllowedReturnIdentifierEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReturnIdentifier value
func (v ReturnIdentifier) Ptr() *ReturnIdentifier {
	return &v
}

type NullableReturnIdentifier struct {
	value *ReturnIdentifier
	isSet bool
}

func (v NullableReturnIdentifier) Get() *ReturnIdentifier {
	return v.value
}

func (v *NullableReturnIdentifier) Set(val *ReturnIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnIdentifier(val *ReturnIdentifier) *NullableReturnIdentifier {
	return &NullableReturnIdentifier{value: val, isSet: true}
}

func (v NullableReturnIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

