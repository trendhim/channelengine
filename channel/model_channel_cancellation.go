/*
ChannelEngine Channel API

ChannelEngine API for channels

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package channel

import (
	"encoding/json"
)

// checks if the ChannelCancellation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelCancellation{}

// ChannelCancellation struct for ChannelCancellation
type ChannelCancellation struct {
	ChannelCancellationNo NullableString `json:"ChannelCancellationNo,omitempty"`
	Identifier NullableString `json:"Identifier,omitempty"`
	Reason NullableString `json:"Reason,omitempty"`
	ReasonCode *CancelReason `json:"ReasonCode,omitempty"`
	IsForcedCancellation *bool `json:"IsForcedCancellation,omitempty"`
	Lines []ChannelCancellationLine `json:"Lines,omitempty"`
}

// NewChannelCancellation instantiates a new ChannelCancellation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelCancellation() *ChannelCancellation {
	this := ChannelCancellation{}
	return &this
}

// NewChannelCancellationWithDefaults instantiates a new ChannelCancellation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelCancellationWithDefaults() *ChannelCancellation {
	this := ChannelCancellation{}
	return &this
}

// GetChannelCancellationNo returns the ChannelCancellationNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChannelCancellation) GetChannelCancellationNo() string {
	if o == nil || IsNil(o.ChannelCancellationNo.Get()) {
		var ret string
		return ret
	}
	return *o.ChannelCancellationNo.Get()
}

// GetChannelCancellationNoOk returns a tuple with the ChannelCancellationNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChannelCancellation) GetChannelCancellationNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChannelCancellationNo.Get(), o.ChannelCancellationNo.IsSet()
}

// HasChannelCancellationNo returns a boolean if a field has been set.
func (o *ChannelCancellation) HasChannelCancellationNo() bool {
	if o != nil && o.ChannelCancellationNo.IsSet() {
		return true
	}

	return false
}

// SetChannelCancellationNo gets a reference to the given NullableString and assigns it to the ChannelCancellationNo field.
func (o *ChannelCancellation) SetChannelCancellationNo(v string) {
	o.ChannelCancellationNo.Set(&v)
}
// SetChannelCancellationNoNil sets the value for ChannelCancellationNo to be an explicit nil
func (o *ChannelCancellation) SetChannelCancellationNoNil() {
	o.ChannelCancellationNo.Set(nil)
}

// UnsetChannelCancellationNo ensures that no value is present for ChannelCancellationNo, not even an explicit nil
func (o *ChannelCancellation) UnsetChannelCancellationNo() {
	o.ChannelCancellationNo.Unset()
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChannelCancellation) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier.Get()) {
		var ret string
		return ret
	}
	return *o.Identifier.Get()
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChannelCancellation) GetIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Identifier.Get(), o.Identifier.IsSet()
}

// HasIdentifier returns a boolean if a field has been set.
func (o *ChannelCancellation) HasIdentifier() bool {
	if o != nil && o.Identifier.IsSet() {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given NullableString and assigns it to the Identifier field.
func (o *ChannelCancellation) SetIdentifier(v string) {
	o.Identifier.Set(&v)
}
// SetIdentifierNil sets the value for Identifier to be an explicit nil
func (o *ChannelCancellation) SetIdentifierNil() {
	o.Identifier.Set(nil)
}

// UnsetIdentifier ensures that no value is present for Identifier, not even an explicit nil
func (o *ChannelCancellation) UnsetIdentifier() {
	o.Identifier.Unset()
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChannelCancellation) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChannelCancellation) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *ChannelCancellation) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *ChannelCancellation) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *ChannelCancellation) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *ChannelCancellation) UnsetReason() {
	o.Reason.Unset()
}

// GetReasonCode returns the ReasonCode field value if set, zero value otherwise.
func (o *ChannelCancellation) GetReasonCode() CancelReason {
	if o == nil || IsNil(o.ReasonCode) {
		var ret CancelReason
		return ret
	}
	return *o.ReasonCode
}

// GetReasonCodeOk returns a tuple with the ReasonCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelCancellation) GetReasonCodeOk() (*CancelReason, bool) {
	if o == nil || IsNil(o.ReasonCode) {
		return nil, false
	}
	return o.ReasonCode, true
}

// HasReasonCode returns a boolean if a field has been set.
func (o *ChannelCancellation) HasReasonCode() bool {
	if o != nil && !IsNil(o.ReasonCode) {
		return true
	}

	return false
}

// SetReasonCode gets a reference to the given CancelReason and assigns it to the ReasonCode field.
func (o *ChannelCancellation) SetReasonCode(v CancelReason) {
	o.ReasonCode = &v
}

// GetIsForcedCancellation returns the IsForcedCancellation field value if set, zero value otherwise.
func (o *ChannelCancellation) GetIsForcedCancellation() bool {
	if o == nil || IsNil(o.IsForcedCancellation) {
		var ret bool
		return ret
	}
	return *o.IsForcedCancellation
}

// GetIsForcedCancellationOk returns a tuple with the IsForcedCancellation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelCancellation) GetIsForcedCancellationOk() (*bool, bool) {
	if o == nil || IsNil(o.IsForcedCancellation) {
		return nil, false
	}
	return o.IsForcedCancellation, true
}

// HasIsForcedCancellation returns a boolean if a field has been set.
func (o *ChannelCancellation) HasIsForcedCancellation() bool {
	if o != nil && !IsNil(o.IsForcedCancellation) {
		return true
	}

	return false
}

// SetIsForcedCancellation gets a reference to the given bool and assigns it to the IsForcedCancellation field.
func (o *ChannelCancellation) SetIsForcedCancellation(v bool) {
	o.IsForcedCancellation = &v
}

// GetLines returns the Lines field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChannelCancellation) GetLines() []ChannelCancellationLine {
	if o == nil {
		var ret []ChannelCancellationLine
		return ret
	}
	return o.Lines
}

// GetLinesOk returns a tuple with the Lines field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChannelCancellation) GetLinesOk() ([]ChannelCancellationLine, bool) {
	if o == nil || IsNil(o.Lines) {
		return nil, false
	}
	return o.Lines, true
}

// HasLines returns a boolean if a field has been set.
func (o *ChannelCancellation) HasLines() bool {
	if o != nil && !IsNil(o.Lines) {
		return true
	}

	return false
}

// SetLines gets a reference to the given []ChannelCancellationLine and assigns it to the Lines field.
func (o *ChannelCancellation) SetLines(v []ChannelCancellationLine) {
	o.Lines = v
}

func (o ChannelCancellation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelCancellation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ChannelCancellationNo.IsSet() {
		toSerialize["ChannelCancellationNo"] = o.ChannelCancellationNo.Get()
	}
	if o.Identifier.IsSet() {
		toSerialize["Identifier"] = o.Identifier.Get()
	}
	if o.Reason.IsSet() {
		toSerialize["Reason"] = o.Reason.Get()
	}
	if !IsNil(o.ReasonCode) {
		toSerialize["ReasonCode"] = o.ReasonCode
	}
	if !IsNil(o.IsForcedCancellation) {
		toSerialize["IsForcedCancellation"] = o.IsForcedCancellation
	}
	if o.Lines != nil {
		toSerialize["Lines"] = o.Lines
	}
	return toSerialize, nil
}

type NullableChannelCancellation struct {
	value *ChannelCancellation
	isSet bool
}

func (v NullableChannelCancellation) Get() *ChannelCancellation {
	return v.value
}

func (v *NullableChannelCancellation) Set(val *ChannelCancellation) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelCancellation) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelCancellation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelCancellation(val *ChannelCancellation) *NullableChannelCancellation {
	return &NullableChannelCancellation{value: val, isSet: true}
}

func (v NullableChannelCancellation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelCancellation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


