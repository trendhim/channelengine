/*
ChannelEngine Channel API

ChannelEngine API for channels

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package channel

import (
	"encoding/json"
	"time"
)

// checks if the DateRangeRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DateRangeRequest{}

// DateRangeRequest struct for DateRangeRequest
type DateRangeRequest struct {
	FromDate NullableTime `json:"FromDate,omitempty"`
	ToDate NullableTime `json:"ToDate,omitempty"`
}

// NewDateRangeRequest instantiates a new DateRangeRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateRangeRequest() *DateRangeRequest {
	this := DateRangeRequest{}
	return &this
}

// NewDateRangeRequestWithDefaults instantiates a new DateRangeRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateRangeRequestWithDefaults() *DateRangeRequest {
	this := DateRangeRequest{}
	return &this
}

// GetFromDate returns the FromDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DateRangeRequest) GetFromDate() time.Time {
	if o == nil || IsNil(o.FromDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.FromDate.Get()
}

// GetFromDateOk returns a tuple with the FromDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DateRangeRequest) GetFromDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.FromDate.Get(), o.FromDate.IsSet()
}

// HasFromDate returns a boolean if a field has been set.
func (o *DateRangeRequest) HasFromDate() bool {
	if o != nil && o.FromDate.IsSet() {
		return true
	}

	return false
}

// SetFromDate gets a reference to the given NullableTime and assigns it to the FromDate field.
func (o *DateRangeRequest) SetFromDate(v time.Time) {
	o.FromDate.Set(&v)
}
// SetFromDateNil sets the value for FromDate to be an explicit nil
func (o *DateRangeRequest) SetFromDateNil() {
	o.FromDate.Set(nil)
}

// UnsetFromDate ensures that no value is present for FromDate, not even an explicit nil
func (o *DateRangeRequest) UnsetFromDate() {
	o.FromDate.Unset()
}

// GetToDate returns the ToDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DateRangeRequest) GetToDate() time.Time {
	if o == nil || IsNil(o.ToDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ToDate.Get()
}

// GetToDateOk returns a tuple with the ToDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DateRangeRequest) GetToDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ToDate.Get(), o.ToDate.IsSet()
}

// HasToDate returns a boolean if a field has been set.
func (o *DateRangeRequest) HasToDate() bool {
	if o != nil && o.ToDate.IsSet() {
		return true
	}

	return false
}

// SetToDate gets a reference to the given NullableTime and assigns it to the ToDate field.
func (o *DateRangeRequest) SetToDate(v time.Time) {
	o.ToDate.Set(&v)
}
// SetToDateNil sets the value for ToDate to be an explicit nil
func (o *DateRangeRequest) SetToDateNil() {
	o.ToDate.Set(nil)
}

// UnsetToDate ensures that no value is present for ToDate, not even an explicit nil
func (o *DateRangeRequest) UnsetToDate() {
	o.ToDate.Unset()
}

func (o DateRangeRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DateRangeRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FromDate.IsSet() {
		toSerialize["FromDate"] = o.FromDate.Get()
	}
	if o.ToDate.IsSet() {
		toSerialize["ToDate"] = o.ToDate.Get()
	}
	return toSerialize, nil
}

type NullableDateRangeRequest struct {
	value *DateRangeRequest
	isSet bool
}

func (v NullableDateRangeRequest) Get() *DateRangeRequest {
	return v.value
}

func (v *NullableDateRangeRequest) Set(val *DateRangeRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDateRangeRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDateRangeRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateRangeRequest(val *DateRangeRequest) *NullableDateRangeRequest {
	return &NullableDateRangeRequest{value: val, isSet: true}
}

func (v NullableDateRangeRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateRangeRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


