/*
ChannelEngine Channel API

ChannelEngine API for channels

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package channel

import (
	"encoding/json"
	"fmt"
)

// RefundIdentifier the model 'RefundIdentifier'
type RefundIdentifier string

// List of RefundIdentifier
const (
	REFUNDIDENTIFIER_REFUND_ID RefundIdentifier = "REFUND_ID"
	REFUNDIDENTIFIER_CHANNEL_REFUND_NO RefundIdentifier = "CHANNEL_REFUND_NO"
	REFUNDIDENTIFIER_MERCHANT_REFUND_NO RefundIdentifier = "MERCHANT_REFUND_NO"
)

// All allowed values of RefundIdentifier enum
var AllowedRefundIdentifierEnumValues = []RefundIdentifier{
	"REFUND_ID",
	"CHANNEL_REFUND_NO",
	"MERCHANT_REFUND_NO",
}

func (v *RefundIdentifier) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RefundIdentifier(value)
	for _, existing := range AllowedRefundIdentifierEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RefundIdentifier", value)
}

// NewRefundIdentifierFromValue returns a pointer to a valid RefundIdentifier
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRefundIdentifierFromValue(v string) (*RefundIdentifier, error) {
	ev := RefundIdentifier(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RefundIdentifier: valid values are %v", v, AllowedRefundIdentifierEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RefundIdentifier) IsValid() bool {
	for _, existing := range AllowedRefundIdentifierEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RefundIdentifier value
func (v RefundIdentifier) Ptr() *RefundIdentifier {
	return &v
}

type NullableRefundIdentifier struct {
	value *RefundIdentifier
	isSet bool
}

func (v NullableRefundIdentifier) Get() *RefundIdentifier {
	return v.value
}

func (v *NullableRefundIdentifier) Set(val *RefundIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundIdentifier(val *RefundIdentifier) *NullableRefundIdentifier {
	return &NullableRefundIdentifier{value: val, isSet: true}
}

func (v NullableRefundIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

