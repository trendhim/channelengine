/*
ChannelEngine Channel API

ChannelEngine API for channels

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package channel

import (
	"encoding/json"
	"fmt"
)

// CancelReason the model 'CancelReason'
type CancelReason string

// List of CancelReason
const (
	CANCELREASON_NOT_IN_STOCK CancelReason = "NOT_IN_STOCK"
	CANCELREASON_DAMAGED CancelReason = "DAMAGED"
	CANCELREASON_INCOMPLETE CancelReason = "INCOMPLETE"
	CANCELREASON_CLIENT_CANCELLED CancelReason = "CLIENT_CANCELLED"
	CANCELREASON_INVALID_ADDRESS CancelReason = "INVALID_ADDRESS"
	CANCELREASON_OTHER CancelReason = "OTHER"
)

// All allowed values of CancelReason enum
var AllowedCancelReasonEnumValues = []CancelReason{
	"NOT_IN_STOCK",
	"DAMAGED",
	"INCOMPLETE",
	"CLIENT_CANCELLED",
	"INVALID_ADDRESS",
	"OTHER",
}

func (v *CancelReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CancelReason(value)
	for _, existing := range AllowedCancelReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CancelReason", value)
}

// NewCancelReasonFromValue returns a pointer to a valid CancelReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCancelReasonFromValue(v string) (*CancelReason, error) {
	ev := CancelReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CancelReason: valid values are %v", v, AllowedCancelReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CancelReason) IsValid() bool {
	for _, existing := range AllowedCancelReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CancelReason value
func (v CancelReason) Ptr() *CancelReason {
	return &v
}

type NullableCancelReason struct {
	value *CancelReason
	isSet bool
}

func (v NullableCancelReason) Get() *CancelReason {
	return v.value
}

func (v *NullableCancelReason) Set(val *CancelReason) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelReason) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelReason(val *CancelReason) *NullableCancelReason {
	return &NullableCancelReason{value: val, isSet: true}
}

func (v NullableCancelReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

