/*
ChannelEngine Channel API

ChannelEngine API for channels

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package channel

import (
	"encoding/json"
	"time"
)

// checks if the IRefund type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IRefund{}

// IRefund struct for IRefund
type IRefund struct {
	Id *int32 `json:"Id,omitempty"`
	Reason *RefundReason `json:"Reason,omitempty"`
	ChannelExportStatus *ChannelExportStatus `json:"ChannelExportStatus,omitempty"`
	SubTotalInclTax *float32 `json:"SubTotalInclTax,omitempty"`
	OriginalSubTotalInclTax *float32 `json:"OriginalSubTotalInclTax,omitempty"`
	AdditionalAmountInclTax *float32 `json:"AdditionalAmountInclTax,omitempty"`
	OriginalAdditionalAmountInclTax *float32 `json:"OriginalAdditionalAmountInclTax,omitempty"`
	ShippingCostInclTax *float32 `json:"ShippingCostInclTax,omitempty"`
	OriginalShippingCostInclTax *float32 `json:"OriginalShippingCostInclTax,omitempty"`
	TotalInclTax *float32 `json:"TotalInclTax,omitempty"`
	OriginalTotalInclTax *float32 `json:"OriginalTotalInclTax,omitempty"`
	MerchantComment NullableString `json:"MerchantComment,omitempty"`
	MerchantRefundNo NullableString `json:"MerchantRefundNo,omitempty"`
	ChannelRefundNo NullableString `json:"ChannelRefundNo,omitempty"`
	ChannelOrderNo NullableString `json:"ChannelOrderNo,omitempty"`
	CreatedByType *CreatedByType `json:"CreatedByType,omitempty"`
	RefundDate *time.Time `json:"RefundDate,omitempty"`
	ExternalBatchNo NullableString `json:"ExternalBatchNo,omitempty"`
	ChannelAcknowledgedDate NullableTime `json:"ChannelAcknowledgedDate,omitempty"`
	MerchantAcknowledgedDate NullableTime `json:"MerchantAcknowledgedDate,omitempty"`
	OrderId *int32 `json:"OrderId,omitempty"`
	ChannelId *int32 `json:"ChannelId,omitempty"`
	ReturnId NullableInt32 `json:"ReturnId,omitempty"`
	Currency *IRefundCurrency `json:"Currency,omitempty"`
	Lines []IRefundLine `json:"Lines,omitempty"`
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	UpdatedAt *time.Time `json:"UpdatedAt,omitempty"`
	DeletedAt NullableTime `json:"DeletedAt,omitempty"`
}

// NewIRefund instantiates a new IRefund object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIRefund() *IRefund {
	this := IRefund{}
	return &this
}

// NewIRefundWithDefaults instantiates a new IRefund object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIRefundWithDefaults() *IRefund {
	this := IRefund{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *IRefund) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *IRefund) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *IRefund) SetId(v int32) {
	o.Id = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *IRefund) GetReason() RefundReason {
	if o == nil || IsNil(o.Reason) {
		var ret RefundReason
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetReasonOk() (*RefundReason, bool) {
	if o == nil || IsNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *IRefund) HasReason() bool {
	if o != nil && !IsNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given RefundReason and assigns it to the Reason field.
func (o *IRefund) SetReason(v RefundReason) {
	o.Reason = &v
}

// GetChannelExportStatus returns the ChannelExportStatus field value if set, zero value otherwise.
func (o *IRefund) GetChannelExportStatus() ChannelExportStatus {
	if o == nil || IsNil(o.ChannelExportStatus) {
		var ret ChannelExportStatus
		return ret
	}
	return *o.ChannelExportStatus
}

// GetChannelExportStatusOk returns a tuple with the ChannelExportStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetChannelExportStatusOk() (*ChannelExportStatus, bool) {
	if o == nil || IsNil(o.ChannelExportStatus) {
		return nil, false
	}
	return o.ChannelExportStatus, true
}

// HasChannelExportStatus returns a boolean if a field has been set.
func (o *IRefund) HasChannelExportStatus() bool {
	if o != nil && !IsNil(o.ChannelExportStatus) {
		return true
	}

	return false
}

// SetChannelExportStatus gets a reference to the given ChannelExportStatus and assigns it to the ChannelExportStatus field.
func (o *IRefund) SetChannelExportStatus(v ChannelExportStatus) {
	o.ChannelExportStatus = &v
}

// GetSubTotalInclTax returns the SubTotalInclTax field value if set, zero value otherwise.
func (o *IRefund) GetSubTotalInclTax() float32 {
	if o == nil || IsNil(o.SubTotalInclTax) {
		var ret float32
		return ret
	}
	return *o.SubTotalInclTax
}

// GetSubTotalInclTaxOk returns a tuple with the SubTotalInclTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetSubTotalInclTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.SubTotalInclTax) {
		return nil, false
	}
	return o.SubTotalInclTax, true
}

// HasSubTotalInclTax returns a boolean if a field has been set.
func (o *IRefund) HasSubTotalInclTax() bool {
	if o != nil && !IsNil(o.SubTotalInclTax) {
		return true
	}

	return false
}

// SetSubTotalInclTax gets a reference to the given float32 and assigns it to the SubTotalInclTax field.
func (o *IRefund) SetSubTotalInclTax(v float32) {
	o.SubTotalInclTax = &v
}

// GetOriginalSubTotalInclTax returns the OriginalSubTotalInclTax field value if set, zero value otherwise.
func (o *IRefund) GetOriginalSubTotalInclTax() float32 {
	if o == nil || IsNil(o.OriginalSubTotalInclTax) {
		var ret float32
		return ret
	}
	return *o.OriginalSubTotalInclTax
}

// GetOriginalSubTotalInclTaxOk returns a tuple with the OriginalSubTotalInclTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetOriginalSubTotalInclTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.OriginalSubTotalInclTax) {
		return nil, false
	}
	return o.OriginalSubTotalInclTax, true
}

// HasOriginalSubTotalInclTax returns a boolean if a field has been set.
func (o *IRefund) HasOriginalSubTotalInclTax() bool {
	if o != nil && !IsNil(o.OriginalSubTotalInclTax) {
		return true
	}

	return false
}

// SetOriginalSubTotalInclTax gets a reference to the given float32 and assigns it to the OriginalSubTotalInclTax field.
func (o *IRefund) SetOriginalSubTotalInclTax(v float32) {
	o.OriginalSubTotalInclTax = &v
}

// GetAdditionalAmountInclTax returns the AdditionalAmountInclTax field value if set, zero value otherwise.
func (o *IRefund) GetAdditionalAmountInclTax() float32 {
	if o == nil || IsNil(o.AdditionalAmountInclTax) {
		var ret float32
		return ret
	}
	return *o.AdditionalAmountInclTax
}

// GetAdditionalAmountInclTaxOk returns a tuple with the AdditionalAmountInclTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetAdditionalAmountInclTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.AdditionalAmountInclTax) {
		return nil, false
	}
	return o.AdditionalAmountInclTax, true
}

// HasAdditionalAmountInclTax returns a boolean if a field has been set.
func (o *IRefund) HasAdditionalAmountInclTax() bool {
	if o != nil && !IsNil(o.AdditionalAmountInclTax) {
		return true
	}

	return false
}

// SetAdditionalAmountInclTax gets a reference to the given float32 and assigns it to the AdditionalAmountInclTax field.
func (o *IRefund) SetAdditionalAmountInclTax(v float32) {
	o.AdditionalAmountInclTax = &v
}

// GetOriginalAdditionalAmountInclTax returns the OriginalAdditionalAmountInclTax field value if set, zero value otherwise.
func (o *IRefund) GetOriginalAdditionalAmountInclTax() float32 {
	if o == nil || IsNil(o.OriginalAdditionalAmountInclTax) {
		var ret float32
		return ret
	}
	return *o.OriginalAdditionalAmountInclTax
}

// GetOriginalAdditionalAmountInclTaxOk returns a tuple with the OriginalAdditionalAmountInclTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetOriginalAdditionalAmountInclTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.OriginalAdditionalAmountInclTax) {
		return nil, false
	}
	return o.OriginalAdditionalAmountInclTax, true
}

// HasOriginalAdditionalAmountInclTax returns a boolean if a field has been set.
func (o *IRefund) HasOriginalAdditionalAmountInclTax() bool {
	if o != nil && !IsNil(o.OriginalAdditionalAmountInclTax) {
		return true
	}

	return false
}

// SetOriginalAdditionalAmountInclTax gets a reference to the given float32 and assigns it to the OriginalAdditionalAmountInclTax field.
func (o *IRefund) SetOriginalAdditionalAmountInclTax(v float32) {
	o.OriginalAdditionalAmountInclTax = &v
}

// GetShippingCostInclTax returns the ShippingCostInclTax field value if set, zero value otherwise.
func (o *IRefund) GetShippingCostInclTax() float32 {
	if o == nil || IsNil(o.ShippingCostInclTax) {
		var ret float32
		return ret
	}
	return *o.ShippingCostInclTax
}

// GetShippingCostInclTaxOk returns a tuple with the ShippingCostInclTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetShippingCostInclTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.ShippingCostInclTax) {
		return nil, false
	}
	return o.ShippingCostInclTax, true
}

// HasShippingCostInclTax returns a boolean if a field has been set.
func (o *IRefund) HasShippingCostInclTax() bool {
	if o != nil && !IsNil(o.ShippingCostInclTax) {
		return true
	}

	return false
}

// SetShippingCostInclTax gets a reference to the given float32 and assigns it to the ShippingCostInclTax field.
func (o *IRefund) SetShippingCostInclTax(v float32) {
	o.ShippingCostInclTax = &v
}

// GetOriginalShippingCostInclTax returns the OriginalShippingCostInclTax field value if set, zero value otherwise.
func (o *IRefund) GetOriginalShippingCostInclTax() float32 {
	if o == nil || IsNil(o.OriginalShippingCostInclTax) {
		var ret float32
		return ret
	}
	return *o.OriginalShippingCostInclTax
}

// GetOriginalShippingCostInclTaxOk returns a tuple with the OriginalShippingCostInclTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetOriginalShippingCostInclTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.OriginalShippingCostInclTax) {
		return nil, false
	}
	return o.OriginalShippingCostInclTax, true
}

// HasOriginalShippingCostInclTax returns a boolean if a field has been set.
func (o *IRefund) HasOriginalShippingCostInclTax() bool {
	if o != nil && !IsNil(o.OriginalShippingCostInclTax) {
		return true
	}

	return false
}

// SetOriginalShippingCostInclTax gets a reference to the given float32 and assigns it to the OriginalShippingCostInclTax field.
func (o *IRefund) SetOriginalShippingCostInclTax(v float32) {
	o.OriginalShippingCostInclTax = &v
}

// GetTotalInclTax returns the TotalInclTax field value if set, zero value otherwise.
func (o *IRefund) GetTotalInclTax() float32 {
	if o == nil || IsNil(o.TotalInclTax) {
		var ret float32
		return ret
	}
	return *o.TotalInclTax
}

// GetTotalInclTaxOk returns a tuple with the TotalInclTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetTotalInclTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.TotalInclTax) {
		return nil, false
	}
	return o.TotalInclTax, true
}

// HasTotalInclTax returns a boolean if a field has been set.
func (o *IRefund) HasTotalInclTax() bool {
	if o != nil && !IsNil(o.TotalInclTax) {
		return true
	}

	return false
}

// SetTotalInclTax gets a reference to the given float32 and assigns it to the TotalInclTax field.
func (o *IRefund) SetTotalInclTax(v float32) {
	o.TotalInclTax = &v
}

// GetOriginalTotalInclTax returns the OriginalTotalInclTax field value if set, zero value otherwise.
func (o *IRefund) GetOriginalTotalInclTax() float32 {
	if o == nil || IsNil(o.OriginalTotalInclTax) {
		var ret float32
		return ret
	}
	return *o.OriginalTotalInclTax
}

// GetOriginalTotalInclTaxOk returns a tuple with the OriginalTotalInclTax field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetOriginalTotalInclTaxOk() (*float32, bool) {
	if o == nil || IsNil(o.OriginalTotalInclTax) {
		return nil, false
	}
	return o.OriginalTotalInclTax, true
}

// HasOriginalTotalInclTax returns a boolean if a field has been set.
func (o *IRefund) HasOriginalTotalInclTax() bool {
	if o != nil && !IsNil(o.OriginalTotalInclTax) {
		return true
	}

	return false
}

// SetOriginalTotalInclTax gets a reference to the given float32 and assigns it to the OriginalTotalInclTax field.
func (o *IRefund) SetOriginalTotalInclTax(v float32) {
	o.OriginalTotalInclTax = &v
}

// GetMerchantComment returns the MerchantComment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IRefund) GetMerchantComment() string {
	if o == nil || IsNil(o.MerchantComment.Get()) {
		var ret string
		return ret
	}
	return *o.MerchantComment.Get()
}

// GetMerchantCommentOk returns a tuple with the MerchantComment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IRefund) GetMerchantCommentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MerchantComment.Get(), o.MerchantComment.IsSet()
}

// HasMerchantComment returns a boolean if a field has been set.
func (o *IRefund) HasMerchantComment() bool {
	if o != nil && o.MerchantComment.IsSet() {
		return true
	}

	return false
}

// SetMerchantComment gets a reference to the given NullableString and assigns it to the MerchantComment field.
func (o *IRefund) SetMerchantComment(v string) {
	o.MerchantComment.Set(&v)
}
// SetMerchantCommentNil sets the value for MerchantComment to be an explicit nil
func (o *IRefund) SetMerchantCommentNil() {
	o.MerchantComment.Set(nil)
}

// UnsetMerchantComment ensures that no value is present for MerchantComment, not even an explicit nil
func (o *IRefund) UnsetMerchantComment() {
	o.MerchantComment.Unset()
}

// GetMerchantRefundNo returns the MerchantRefundNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IRefund) GetMerchantRefundNo() string {
	if o == nil || IsNil(o.MerchantRefundNo.Get()) {
		var ret string
		return ret
	}
	return *o.MerchantRefundNo.Get()
}

// GetMerchantRefundNoOk returns a tuple with the MerchantRefundNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IRefund) GetMerchantRefundNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MerchantRefundNo.Get(), o.MerchantRefundNo.IsSet()
}

// HasMerchantRefundNo returns a boolean if a field has been set.
func (o *IRefund) HasMerchantRefundNo() bool {
	if o != nil && o.MerchantRefundNo.IsSet() {
		return true
	}

	return false
}

// SetMerchantRefundNo gets a reference to the given NullableString and assigns it to the MerchantRefundNo field.
func (o *IRefund) SetMerchantRefundNo(v string) {
	o.MerchantRefundNo.Set(&v)
}
// SetMerchantRefundNoNil sets the value for MerchantRefundNo to be an explicit nil
func (o *IRefund) SetMerchantRefundNoNil() {
	o.MerchantRefundNo.Set(nil)
}

// UnsetMerchantRefundNo ensures that no value is present for MerchantRefundNo, not even an explicit nil
func (o *IRefund) UnsetMerchantRefundNo() {
	o.MerchantRefundNo.Unset()
}

// GetChannelRefundNo returns the ChannelRefundNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IRefund) GetChannelRefundNo() string {
	if o == nil || IsNil(o.ChannelRefundNo.Get()) {
		var ret string
		return ret
	}
	return *o.ChannelRefundNo.Get()
}

// GetChannelRefundNoOk returns a tuple with the ChannelRefundNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IRefund) GetChannelRefundNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChannelRefundNo.Get(), o.ChannelRefundNo.IsSet()
}

// HasChannelRefundNo returns a boolean if a field has been set.
func (o *IRefund) HasChannelRefundNo() bool {
	if o != nil && o.ChannelRefundNo.IsSet() {
		return true
	}

	return false
}

// SetChannelRefundNo gets a reference to the given NullableString and assigns it to the ChannelRefundNo field.
func (o *IRefund) SetChannelRefundNo(v string) {
	o.ChannelRefundNo.Set(&v)
}
// SetChannelRefundNoNil sets the value for ChannelRefundNo to be an explicit nil
func (o *IRefund) SetChannelRefundNoNil() {
	o.ChannelRefundNo.Set(nil)
}

// UnsetChannelRefundNo ensures that no value is present for ChannelRefundNo, not even an explicit nil
func (o *IRefund) UnsetChannelRefundNo() {
	o.ChannelRefundNo.Unset()
}

// GetChannelOrderNo returns the ChannelOrderNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IRefund) GetChannelOrderNo() string {
	if o == nil || IsNil(o.ChannelOrderNo.Get()) {
		var ret string
		return ret
	}
	return *o.ChannelOrderNo.Get()
}

// GetChannelOrderNoOk returns a tuple with the ChannelOrderNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IRefund) GetChannelOrderNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChannelOrderNo.Get(), o.ChannelOrderNo.IsSet()
}

// HasChannelOrderNo returns a boolean if a field has been set.
func (o *IRefund) HasChannelOrderNo() bool {
	if o != nil && o.ChannelOrderNo.IsSet() {
		return true
	}

	return false
}

// SetChannelOrderNo gets a reference to the given NullableString and assigns it to the ChannelOrderNo field.
func (o *IRefund) SetChannelOrderNo(v string) {
	o.ChannelOrderNo.Set(&v)
}
// SetChannelOrderNoNil sets the value for ChannelOrderNo to be an explicit nil
func (o *IRefund) SetChannelOrderNoNil() {
	o.ChannelOrderNo.Set(nil)
}

// UnsetChannelOrderNo ensures that no value is present for ChannelOrderNo, not even an explicit nil
func (o *IRefund) UnsetChannelOrderNo() {
	o.ChannelOrderNo.Unset()
}

// GetCreatedByType returns the CreatedByType field value if set, zero value otherwise.
func (o *IRefund) GetCreatedByType() CreatedByType {
	if o == nil || IsNil(o.CreatedByType) {
		var ret CreatedByType
		return ret
	}
	return *o.CreatedByType
}

// GetCreatedByTypeOk returns a tuple with the CreatedByType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetCreatedByTypeOk() (*CreatedByType, bool) {
	if o == nil || IsNil(o.CreatedByType) {
		return nil, false
	}
	return o.CreatedByType, true
}

// HasCreatedByType returns a boolean if a field has been set.
func (o *IRefund) HasCreatedByType() bool {
	if o != nil && !IsNil(o.CreatedByType) {
		return true
	}

	return false
}

// SetCreatedByType gets a reference to the given CreatedByType and assigns it to the CreatedByType field.
func (o *IRefund) SetCreatedByType(v CreatedByType) {
	o.CreatedByType = &v
}

// GetRefundDate returns the RefundDate field value if set, zero value otherwise.
func (o *IRefund) GetRefundDate() time.Time {
	if o == nil || IsNil(o.RefundDate) {
		var ret time.Time
		return ret
	}
	return *o.RefundDate
}

// GetRefundDateOk returns a tuple with the RefundDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetRefundDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.RefundDate) {
		return nil, false
	}
	return o.RefundDate, true
}

// HasRefundDate returns a boolean if a field has been set.
func (o *IRefund) HasRefundDate() bool {
	if o != nil && !IsNil(o.RefundDate) {
		return true
	}

	return false
}

// SetRefundDate gets a reference to the given time.Time and assigns it to the RefundDate field.
func (o *IRefund) SetRefundDate(v time.Time) {
	o.RefundDate = &v
}

// GetExternalBatchNo returns the ExternalBatchNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IRefund) GetExternalBatchNo() string {
	if o == nil || IsNil(o.ExternalBatchNo.Get()) {
		var ret string
		return ret
	}
	return *o.ExternalBatchNo.Get()
}

// GetExternalBatchNoOk returns a tuple with the ExternalBatchNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IRefund) GetExternalBatchNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExternalBatchNo.Get(), o.ExternalBatchNo.IsSet()
}

// HasExternalBatchNo returns a boolean if a field has been set.
func (o *IRefund) HasExternalBatchNo() bool {
	if o != nil && o.ExternalBatchNo.IsSet() {
		return true
	}

	return false
}

// SetExternalBatchNo gets a reference to the given NullableString and assigns it to the ExternalBatchNo field.
func (o *IRefund) SetExternalBatchNo(v string) {
	o.ExternalBatchNo.Set(&v)
}
// SetExternalBatchNoNil sets the value for ExternalBatchNo to be an explicit nil
func (o *IRefund) SetExternalBatchNoNil() {
	o.ExternalBatchNo.Set(nil)
}

// UnsetExternalBatchNo ensures that no value is present for ExternalBatchNo, not even an explicit nil
func (o *IRefund) UnsetExternalBatchNo() {
	o.ExternalBatchNo.Unset()
}

// GetChannelAcknowledgedDate returns the ChannelAcknowledgedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IRefund) GetChannelAcknowledgedDate() time.Time {
	if o == nil || IsNil(o.ChannelAcknowledgedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ChannelAcknowledgedDate.Get()
}

// GetChannelAcknowledgedDateOk returns a tuple with the ChannelAcknowledgedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IRefund) GetChannelAcknowledgedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChannelAcknowledgedDate.Get(), o.ChannelAcknowledgedDate.IsSet()
}

// HasChannelAcknowledgedDate returns a boolean if a field has been set.
func (o *IRefund) HasChannelAcknowledgedDate() bool {
	if o != nil && o.ChannelAcknowledgedDate.IsSet() {
		return true
	}

	return false
}

// SetChannelAcknowledgedDate gets a reference to the given NullableTime and assigns it to the ChannelAcknowledgedDate field.
func (o *IRefund) SetChannelAcknowledgedDate(v time.Time) {
	o.ChannelAcknowledgedDate.Set(&v)
}
// SetChannelAcknowledgedDateNil sets the value for ChannelAcknowledgedDate to be an explicit nil
func (o *IRefund) SetChannelAcknowledgedDateNil() {
	o.ChannelAcknowledgedDate.Set(nil)
}

// UnsetChannelAcknowledgedDate ensures that no value is present for ChannelAcknowledgedDate, not even an explicit nil
func (o *IRefund) UnsetChannelAcknowledgedDate() {
	o.ChannelAcknowledgedDate.Unset()
}

// GetMerchantAcknowledgedDate returns the MerchantAcknowledgedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IRefund) GetMerchantAcknowledgedDate() time.Time {
	if o == nil || IsNil(o.MerchantAcknowledgedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.MerchantAcknowledgedDate.Get()
}

// GetMerchantAcknowledgedDateOk returns a tuple with the MerchantAcknowledgedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IRefund) GetMerchantAcknowledgedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.MerchantAcknowledgedDate.Get(), o.MerchantAcknowledgedDate.IsSet()
}

// HasMerchantAcknowledgedDate returns a boolean if a field has been set.
func (o *IRefund) HasMerchantAcknowledgedDate() bool {
	if o != nil && o.MerchantAcknowledgedDate.IsSet() {
		return true
	}

	return false
}

// SetMerchantAcknowledgedDate gets a reference to the given NullableTime and assigns it to the MerchantAcknowledgedDate field.
func (o *IRefund) SetMerchantAcknowledgedDate(v time.Time) {
	o.MerchantAcknowledgedDate.Set(&v)
}
// SetMerchantAcknowledgedDateNil sets the value for MerchantAcknowledgedDate to be an explicit nil
func (o *IRefund) SetMerchantAcknowledgedDateNil() {
	o.MerchantAcknowledgedDate.Set(nil)
}

// UnsetMerchantAcknowledgedDate ensures that no value is present for MerchantAcknowledgedDate, not even an explicit nil
func (o *IRefund) UnsetMerchantAcknowledgedDate() {
	o.MerchantAcknowledgedDate.Unset()
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *IRefund) GetOrderId() int32 {
	if o == nil || IsNil(o.OrderId) {
		var ret int32
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetOrderIdOk() (*int32, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *IRefund) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given int32 and assigns it to the OrderId field.
func (o *IRefund) SetOrderId(v int32) {
	o.OrderId = &v
}

// GetChannelId returns the ChannelId field value if set, zero value otherwise.
func (o *IRefund) GetChannelId() int32 {
	if o == nil || IsNil(o.ChannelId) {
		var ret int32
		return ret
	}
	return *o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetChannelIdOk() (*int32, bool) {
	if o == nil || IsNil(o.ChannelId) {
		return nil, false
	}
	return o.ChannelId, true
}

// HasChannelId returns a boolean if a field has been set.
func (o *IRefund) HasChannelId() bool {
	if o != nil && !IsNil(o.ChannelId) {
		return true
	}

	return false
}

// SetChannelId gets a reference to the given int32 and assigns it to the ChannelId field.
func (o *IRefund) SetChannelId(v int32) {
	o.ChannelId = &v
}

// GetReturnId returns the ReturnId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IRefund) GetReturnId() int32 {
	if o == nil || IsNil(o.ReturnId.Get()) {
		var ret int32
		return ret
	}
	return *o.ReturnId.Get()
}

// GetReturnIdOk returns a tuple with the ReturnId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IRefund) GetReturnIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReturnId.Get(), o.ReturnId.IsSet()
}

// HasReturnId returns a boolean if a field has been set.
func (o *IRefund) HasReturnId() bool {
	if o != nil && o.ReturnId.IsSet() {
		return true
	}

	return false
}

// SetReturnId gets a reference to the given NullableInt32 and assigns it to the ReturnId field.
func (o *IRefund) SetReturnId(v int32) {
	o.ReturnId.Set(&v)
}
// SetReturnIdNil sets the value for ReturnId to be an explicit nil
func (o *IRefund) SetReturnIdNil() {
	o.ReturnId.Set(nil)
}

// UnsetReturnId ensures that no value is present for ReturnId, not even an explicit nil
func (o *IRefund) UnsetReturnId() {
	o.ReturnId.Unset()
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *IRefund) GetCurrency() IRefundCurrency {
	if o == nil || IsNil(o.Currency) {
		var ret IRefundCurrency
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetCurrencyOk() (*IRefundCurrency, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *IRefund) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given IRefundCurrency and assigns it to the Currency field.
func (o *IRefund) SetCurrency(v IRefundCurrency) {
	o.Currency = &v
}

// GetLines returns the Lines field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IRefund) GetLines() []IRefundLine {
	if o == nil {
		var ret []IRefundLine
		return ret
	}
	return o.Lines
}

// GetLinesOk returns a tuple with the Lines field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IRefund) GetLinesOk() ([]IRefundLine, bool) {
	if o == nil || IsNil(o.Lines) {
		return nil, false
	}
	return o.Lines, true
}

// HasLines returns a boolean if a field has been set.
func (o *IRefund) HasLines() bool {
	if o != nil && !IsNil(o.Lines) {
		return true
	}

	return false
}

// SetLines gets a reference to the given []IRefundLine and assigns it to the Lines field.
func (o *IRefund) SetLines(v []IRefundLine) {
	o.Lines = v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IRefund) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IRefund) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *IRefund) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *IRefund) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IRefund) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IRefund) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *IRefund) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

// GetDeletedAt returns the DeletedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IRefund) GetDeletedAt() time.Time {
	if o == nil || IsNil(o.DeletedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.DeletedAt.Get()
}

// GetDeletedAtOk returns a tuple with the DeletedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IRefund) GetDeletedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeletedAt.Get(), o.DeletedAt.IsSet()
}

// HasDeletedAt returns a boolean if a field has been set.
func (o *IRefund) HasDeletedAt() bool {
	if o != nil && o.DeletedAt.IsSet() {
		return true
	}

	return false
}

// SetDeletedAt gets a reference to the given NullableTime and assigns it to the DeletedAt field.
func (o *IRefund) SetDeletedAt(v time.Time) {
	o.DeletedAt.Set(&v)
}
// SetDeletedAtNil sets the value for DeletedAt to be an explicit nil
func (o *IRefund) SetDeletedAtNil() {
	o.DeletedAt.Set(nil)
}

// UnsetDeletedAt ensures that no value is present for DeletedAt, not even an explicit nil
func (o *IRefund) UnsetDeletedAt() {
	o.DeletedAt.Unset()
}

func (o IRefund) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IRefund) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.Reason) {
		toSerialize["Reason"] = o.Reason
	}
	if !IsNil(o.ChannelExportStatus) {
		toSerialize["ChannelExportStatus"] = o.ChannelExportStatus
	}
	if !IsNil(o.SubTotalInclTax) {
		toSerialize["SubTotalInclTax"] = o.SubTotalInclTax
	}
	if !IsNil(o.OriginalSubTotalInclTax) {
		toSerialize["OriginalSubTotalInclTax"] = o.OriginalSubTotalInclTax
	}
	if !IsNil(o.AdditionalAmountInclTax) {
		toSerialize["AdditionalAmountInclTax"] = o.AdditionalAmountInclTax
	}
	if !IsNil(o.OriginalAdditionalAmountInclTax) {
		toSerialize["OriginalAdditionalAmountInclTax"] = o.OriginalAdditionalAmountInclTax
	}
	if !IsNil(o.ShippingCostInclTax) {
		toSerialize["ShippingCostInclTax"] = o.ShippingCostInclTax
	}
	if !IsNil(o.OriginalShippingCostInclTax) {
		toSerialize["OriginalShippingCostInclTax"] = o.OriginalShippingCostInclTax
	}
	if !IsNil(o.TotalInclTax) {
		toSerialize["TotalInclTax"] = o.TotalInclTax
	}
	if !IsNil(o.OriginalTotalInclTax) {
		toSerialize["OriginalTotalInclTax"] = o.OriginalTotalInclTax
	}
	if o.MerchantComment.IsSet() {
		toSerialize["MerchantComment"] = o.MerchantComment.Get()
	}
	if o.MerchantRefundNo.IsSet() {
		toSerialize["MerchantRefundNo"] = o.MerchantRefundNo.Get()
	}
	if o.ChannelRefundNo.IsSet() {
		toSerialize["ChannelRefundNo"] = o.ChannelRefundNo.Get()
	}
	if o.ChannelOrderNo.IsSet() {
		toSerialize["ChannelOrderNo"] = o.ChannelOrderNo.Get()
	}
	if !IsNil(o.CreatedByType) {
		toSerialize["CreatedByType"] = o.CreatedByType
	}
	if !IsNil(o.RefundDate) {
		toSerialize["RefundDate"] = o.RefundDate
	}
	if o.ExternalBatchNo.IsSet() {
		toSerialize["ExternalBatchNo"] = o.ExternalBatchNo.Get()
	}
	if o.ChannelAcknowledgedDate.IsSet() {
		toSerialize["ChannelAcknowledgedDate"] = o.ChannelAcknowledgedDate.Get()
	}
	if o.MerchantAcknowledgedDate.IsSet() {
		toSerialize["MerchantAcknowledgedDate"] = o.MerchantAcknowledgedDate.Get()
	}
	if !IsNil(o.OrderId) {
		toSerialize["OrderId"] = o.OrderId
	}
	if !IsNil(o.ChannelId) {
		toSerialize["ChannelId"] = o.ChannelId
	}
	if o.ReturnId.IsSet() {
		toSerialize["ReturnId"] = o.ReturnId.Get()
	}
	if !IsNil(o.Currency) {
		toSerialize["Currency"] = o.Currency
	}
	if o.Lines != nil {
		toSerialize["Lines"] = o.Lines
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["UpdatedAt"] = o.UpdatedAt
	}
	if o.DeletedAt.IsSet() {
		toSerialize["DeletedAt"] = o.DeletedAt.Get()
	}
	return toSerialize, nil
}

type NullableIRefund struct {
	value *IRefund
	isSet bool
}

func (v NullableIRefund) Get() *IRefund {
	return v.value
}

func (v *NullableIRefund) Set(val *IRefund) {
	v.value = val
	v.isSet = true
}

func (v NullableIRefund) IsSet() bool {
	return v.isSet
}

func (v *NullableIRefund) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIRefund(val *IRefund) *NullableIRefund {
	return &NullableIRefund{value: val, isSet: true}
}

func (v NullableIRefund) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIRefund) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


