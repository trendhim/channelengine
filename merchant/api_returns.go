/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"time"
)


// ReturnsAPIService ReturnsAPI service
type ReturnsAPIService service

type ReturnsAPIReturnAcknowledgeRequest struct {
	ctx context.Context
	ApiService *ReturnsAPIService
	singleMerchantAcknowledgeReturnRequest *SingleMerchantAcknowledgeReturnRequest
}

// The return to acknowledge
func (r ReturnsAPIReturnAcknowledgeRequest) SingleMerchantAcknowledgeReturnRequest(singleMerchantAcknowledgeReturnRequest SingleMerchantAcknowledgeReturnRequest) ReturnsAPIReturnAcknowledgeRequest {
	r.singleMerchantAcknowledgeReturnRequest = &singleMerchantAcknowledgeReturnRequest
	return r
}

func (r ReturnsAPIReturnAcknowledgeRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.ReturnAcknowledgeExecute(r)
}

/*
ReturnAcknowledge [CLOSED BETA] Acknowledge a return

Acknowledges a return<br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnsAPIReturnAcknowledgeRequest
*/
func (a *ReturnsAPIService) ReturnAcknowledge(ctx context.Context) ReturnsAPIReturnAcknowledgeRequest {
	return ReturnsAPIReturnAcknowledgeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *ReturnsAPIService) ReturnAcknowledgeExecute(r ReturnsAPIReturnAcknowledgeRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnsAPIService.ReturnAcknowledge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/returns/merchant/acknowledge"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.singleMerchantAcknowledgeReturnRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnsAPIReturnAcknowledge_0Request struct {
	ctx context.Context
	ApiService *ReturnsAPIService
	merchantReturnAcknowledgeRequest *MerchantReturnAcknowledgeRequest
}

func (r ReturnsAPIReturnAcknowledge_0Request) MerchantReturnAcknowledgeRequest(merchantReturnAcknowledgeRequest MerchantReturnAcknowledgeRequest) ReturnsAPIReturnAcknowledge_0Request {
	r.merchantReturnAcknowledgeRequest = &merchantReturnAcknowledgeRequest
	return r
}

func (r ReturnsAPIReturnAcknowledge_0Request) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.ReturnAcknowledge_1Execute(r)
}

/*
ReturnAcknowledge_0 Acknowledges a return

Acknowledges a return based on the **Return ID** provided.<br /><br />**NB:** by acknowledging a return, you signal that it was registered in your system.<br />You can later filter your returns on the **Is acknowledged** parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnsAPIReturnAcknowledge_0Request
*/
func (a *ReturnsAPIService) ReturnAcknowledge_1(ctx context.Context) ReturnsAPIReturnAcknowledge_0Request {
	return ReturnsAPIReturnAcknowledge_0Request{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *ReturnsAPIService) ReturnAcknowledge_1Execute(r ReturnsAPIReturnAcknowledge_0Request) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnsAPIService.ReturnAcknowledge_1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/returns/merchant/acknowledge"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.merchantReturnAcknowledgeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnsAPIReturnCreateRequest struct {
	ctx context.Context
	ApiService *ReturnsAPIService
	singleMerchantCreateReturnRequest *SingleMerchantCreateReturnRequest
}

// The return
func (r ReturnsAPIReturnCreateRequest) SingleMerchantCreateReturnRequest(singleMerchantCreateReturnRequest SingleMerchantCreateReturnRequest) ReturnsAPIReturnCreateRequest {
	r.singleMerchantCreateReturnRequest = &singleMerchantCreateReturnRequest
	return r
}

func (r ReturnsAPIReturnCreateRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.ReturnCreateExecute(r)
}

/*
ReturnCreate [CLOSED BETA] Create a return

Creates a new return<br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnsAPIReturnCreateRequest
*/
func (a *ReturnsAPIService) ReturnCreate(ctx context.Context) ReturnsAPIReturnCreateRequest {
	return ReturnsAPIReturnCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *ReturnsAPIService) ReturnCreateExecute(r ReturnsAPIReturnCreateRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnsAPIService.ReturnCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/returns/merchant"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.singleMerchantCreateReturnRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnsAPIReturnDeclareForMerchantRequest struct {
	ctx context.Context
	ApiService *ReturnsAPIService
	merchantReturnRequest *MerchantReturnRequest
}

func (r ReturnsAPIReturnDeclareForMerchantRequest) MerchantReturnRequest(merchantReturnRequest MerchantReturnRequest) ReturnsAPIReturnDeclareForMerchantRequest {
	r.merchantReturnRequest = &merchantReturnRequest
	return r
}

func (r ReturnsAPIReturnDeclareForMerchantRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.ReturnDeclareForMerchantExecute(r)
}

/*
ReturnDeclareForMerchant Creates merchant return

Marks an order as either fully or partially returned.<br /><br />**NB:** this endpoint is used for merchant returns (i.e.: returns dealt with by the merchant).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnsAPIReturnDeclareForMerchantRequest
*/
func (a *ReturnsAPIService) ReturnDeclareForMerchant(ctx context.Context) ReturnsAPIReturnDeclareForMerchantRequest {
	return ReturnsAPIReturnDeclareForMerchantRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *ReturnsAPIService) ReturnDeclareForMerchantExecute(r ReturnsAPIReturnDeclareForMerchantRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnsAPIService.ReturnDeclareForMerchant")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/returns/merchant"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.merchantReturnRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnsAPIReturnGetRequest struct {
	ctx context.Context
	ApiService *ReturnsAPIService
	identifier string
	type_ *ReturnIdentifier
}

// Specify whether to search by ID, Merchant Return No or Channel Return No
func (r ReturnsAPIReturnGetRequest) Type_(type_ ReturnIdentifier) ReturnsAPIReturnGetRequest {
	r.type_ = &type_
	return r
}

func (r ReturnsAPIReturnGetRequest) Execute() (*SingleOfIReturn, *http.Response, error) {
	return r.ApiService.ReturnGetExecute(r)
}

/*
ReturnGet [CLOSED BETA] Get return by identifier

Gets a single return by the given identifier<br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param identifier The identifier to search for
 @return ReturnsAPIReturnGetRequest
*/
func (a *ReturnsAPIService) ReturnGet(ctx context.Context, identifier string) ReturnsAPIReturnGetRequest {
	return ReturnsAPIReturnGetRequest{
		ApiService: a,
		ctx: ctx,
		identifier: identifier,
	}
}

// Execute executes the request
//  @return SingleOfIReturn
func (a *ReturnsAPIService) ReturnGetExecute(r ReturnsAPIReturnGetRequest) (*SingleOfIReturn, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SingleOfIReturn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnsAPIService.ReturnGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/returns/merchant/{identifier}"
	localVarPath = strings.Replace(localVarPath, "{"+"identifier"+"}", url.PathEscape(parameterValueToString(r.identifier, "identifier")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnsAPIReturnGetByFilterRequest struct {
	ctx context.Context
	ApiService *ReturnsAPIService
	identifiersIdentifierType *ReturnByFilterIdentifier
	identifiersModels *[]string
	channelExportStatusStatuses *[]ChannelExportStatus
	channelExportStatusMaxNumberOfExportAttempts *int32
	reasons *[]ModuleReturnReason
	createdDateRangeFromDate *time.Time
	createdDateRangeToDate *time.Time
	statuses *[]ModuleReturnStatus
	channelIds *[]int32
	search *string
	isAcknowledgedByMerchant *bool
	isAcknowledgedByChannel *bool
	fulfillmentType *ModuleFulfillmentType
	creatorType *CreatorType
	externalBatchNos *[]string
	pageIndex *int32
	pageSize *int32
}

// The type of identifier: which identifier to filter on
func (r ReturnsAPIReturnGetByFilterRequest) IdentifiersIdentifierType(identifiersIdentifierType ReturnByFilterIdentifier) ReturnsAPIReturnGetByFilterRequest {
	r.identifiersIdentifierType = &identifiersIdentifierType
	return r
}

// The value (of the selected type) to filter on
func (r ReturnsAPIReturnGetByFilterRequest) IdentifiersModels(identifiersModels []string) ReturnsAPIReturnGetByFilterRequest {
	r.identifiersModels = &identifiersModels
	return r
}

func (r ReturnsAPIReturnGetByFilterRequest) ChannelExportStatusStatuses(channelExportStatusStatuses []ChannelExportStatus) ReturnsAPIReturnGetByFilterRequest {
	r.channelExportStatusStatuses = &channelExportStatusStatuses
	return r
}

func (r ReturnsAPIReturnGetByFilterRequest) ChannelExportStatusMaxNumberOfExportAttempts(channelExportStatusMaxNumberOfExportAttempts int32) ReturnsAPIReturnGetByFilterRequest {
	r.channelExportStatusMaxNumberOfExportAttempts = &channelExportStatusMaxNumberOfExportAttempts
	return r
}

func (r ReturnsAPIReturnGetByFilterRequest) Reasons(reasons []ModuleReturnReason) ReturnsAPIReturnGetByFilterRequest {
	r.reasons = &reasons
	return r
}

func (r ReturnsAPIReturnGetByFilterRequest) CreatedDateRangeFromDate(createdDateRangeFromDate time.Time) ReturnsAPIReturnGetByFilterRequest {
	r.createdDateRangeFromDate = &createdDateRangeFromDate
	return r
}

func (r ReturnsAPIReturnGetByFilterRequest) CreatedDateRangeToDate(createdDateRangeToDate time.Time) ReturnsAPIReturnGetByFilterRequest {
	r.createdDateRangeToDate = &createdDateRangeToDate
	return r
}

func (r ReturnsAPIReturnGetByFilterRequest) Statuses(statuses []ModuleReturnStatus) ReturnsAPIReturnGetByFilterRequest {
	r.statuses = &statuses
	return r
}

func (r ReturnsAPIReturnGetByFilterRequest) ChannelIds(channelIds []int32) ReturnsAPIReturnGetByFilterRequest {
	r.channelIds = &channelIds
	return r
}

func (r ReturnsAPIReturnGetByFilterRequest) Search(search string) ReturnsAPIReturnGetByFilterRequest {
	r.search = &search
	return r
}

func (r ReturnsAPIReturnGetByFilterRequest) IsAcknowledgedByMerchant(isAcknowledgedByMerchant bool) ReturnsAPIReturnGetByFilterRequest {
	r.isAcknowledgedByMerchant = &isAcknowledgedByMerchant
	return r
}

func (r ReturnsAPIReturnGetByFilterRequest) IsAcknowledgedByChannel(isAcknowledgedByChannel bool) ReturnsAPIReturnGetByFilterRequest {
	r.isAcknowledgedByChannel = &isAcknowledgedByChannel
	return r
}

func (r ReturnsAPIReturnGetByFilterRequest) FulfillmentType(fulfillmentType ModuleFulfillmentType) ReturnsAPIReturnGetByFilterRequest {
	r.fulfillmentType = &fulfillmentType
	return r
}

func (r ReturnsAPIReturnGetByFilterRequest) CreatorType(creatorType CreatorType) ReturnsAPIReturnGetByFilterRequest {
	r.creatorType = &creatorType
	return r
}

func (r ReturnsAPIReturnGetByFilterRequest) ExternalBatchNos(externalBatchNos []string) ReturnsAPIReturnGetByFilterRequest {
	r.externalBatchNos = &externalBatchNos
	return r
}

func (r ReturnsAPIReturnGetByFilterRequest) PageIndex(pageIndex int32) ReturnsAPIReturnGetByFilterRequest {
	r.pageIndex = &pageIndex
	return r
}

func (r ReturnsAPIReturnGetByFilterRequest) PageSize(pageSize int32) ReturnsAPIReturnGetByFilterRequest {
	r.pageSize = &pageSize
	return r
}

func (r ReturnsAPIReturnGetByFilterRequest) Execute() (*SingleOfIReturn, *http.Response, error) {
	return r.ApiService.ReturnGetByFilterExecute(r)
}

/*
ReturnGetByFilter [CLOSED BETA] Get returns by filter

Gets multiple returns by the given filter<br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnsAPIReturnGetByFilterRequest
*/
func (a *ReturnsAPIService) ReturnGetByFilter(ctx context.Context) ReturnsAPIReturnGetByFilterRequest {
	return ReturnsAPIReturnGetByFilterRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SingleOfIReturn
func (a *ReturnsAPIService) ReturnGetByFilterExecute(r ReturnsAPIReturnGetByFilterRequest) (*SingleOfIReturn, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SingleOfIReturn
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnsAPIService.ReturnGetByFilter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/returns/merchant"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.identifiersIdentifierType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifiers.identifierType", r.identifiersIdentifierType, "")
	}
	if r.identifiersModels != nil {
		t := *r.identifiersModels
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "identifiers.models", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "identifiers.models", t, "multi")
		}
	}
	if r.channelExportStatusStatuses != nil {
		t := *r.channelExportStatusStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelExportStatus.statuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelExportStatus.statuses", t, "multi")
		}
	}
	if r.channelExportStatusMaxNumberOfExportAttempts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "channelExportStatus.maxNumberOfExportAttempts", r.channelExportStatusMaxNumberOfExportAttempts, "")
	}
	if r.reasons != nil {
		t := *r.reasons
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reasons", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reasons", t, "multi")
		}
	}
	if r.createdDateRangeFromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdDateRange.fromDate", r.createdDateRangeFromDate, "")
	}
	if r.createdDateRangeToDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdDateRange.toDate", r.createdDateRangeToDate, "")
	}
	if r.statuses != nil {
		t := *r.statuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", t, "multi")
		}
	}
	if r.channelIds != nil {
		t := *r.channelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", t, "multi")
		}
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.isAcknowledgedByMerchant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isAcknowledgedByMerchant", r.isAcknowledgedByMerchant, "")
	}
	if r.isAcknowledgedByChannel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isAcknowledgedByChannel", r.isAcknowledgedByChannel, "")
	}
	if r.fulfillmentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fulfillmentType", r.fulfillmentType, "")
	}
	if r.creatorType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creatorType", r.creatorType, "")
	}
	if r.externalBatchNos != nil {
		t := *r.externalBatchNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "externalBatchNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "externalBatchNos", t, "multi")
		}
	}
	if r.pageIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageIndex", r.pageIndex, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnsAPIReturnGetByMerchantOrderNoRequest struct {
	ctx context.Context
	ApiService *ReturnsAPIService
	merchantOrderNo string
}

func (r ReturnsAPIReturnGetByMerchantOrderNoRequest) Execute() (*CollectionOfMerchantSingleOrderReturnResponse, *http.Response, error) {
	return r.ApiService.ReturnGetByMerchantOrderNoExecute(r)
}

/*
ReturnGetByMerchantOrderNo Gets a return

Gets the returns based on the **Merchant order number** provided.<br /><br />**NB:** this endpoint is meant for merchants. Marketplaces should use the **GET /v2/returns/channel** call instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param merchantOrderNo
 @return ReturnsAPIReturnGetByMerchantOrderNoRequest
*/
func (a *ReturnsAPIService) ReturnGetByMerchantOrderNo(ctx context.Context, merchantOrderNo string) ReturnsAPIReturnGetByMerchantOrderNoRequest {
	return ReturnsAPIReturnGetByMerchantOrderNoRequest{
		ApiService: a,
		ctx: ctx,
		merchantOrderNo: merchantOrderNo,
	}
}

// Execute executes the request
//  @return CollectionOfMerchantSingleOrderReturnResponse
func (a *ReturnsAPIService) ReturnGetByMerchantOrderNoExecute(r ReturnsAPIReturnGetByMerchantOrderNoRequest) (*CollectionOfMerchantSingleOrderReturnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionOfMerchantSingleOrderReturnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnsAPIService.ReturnGetByMerchantOrderNo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/returns/merchant/{merchantOrderNo}"
	localVarPath = strings.Replace(localVarPath, "{"+"merchantOrderNo"+"}", url.PathEscape(parameterValueToString(r.merchantOrderNo, "merchantOrderNo")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnsAPIReturnGetDeclaredByChannelRequest struct {
	ctx context.Context
	ApiService *ReturnsAPIService
	channelIds *[]int32
	merchantOrderNos *[]string
	channelOrderNos *[]string
	fulfillmentType *FulfillmentType
	statuses *[]ReturnStatus
	reasons *[]ReturnReason
	fromDate *time.Time
	toDate *time.Time
	isAcknowledged *bool
	page *int32
}

// Filter on Channel IDs
func (r ReturnsAPIReturnGetDeclaredByChannelRequest) ChannelIds(channelIds []int32) ReturnsAPIReturnGetDeclaredByChannelRequest {
	r.channelIds = &channelIds
	return r
}

// Filter on unique order reference used by the merchant.
func (r ReturnsAPIReturnGetDeclaredByChannelRequest) MerchantOrderNos(merchantOrderNos []string) ReturnsAPIReturnGetDeclaredByChannelRequest {
	r.merchantOrderNos = &merchantOrderNos
	return r
}

// Filter on unique order reference used by the channel.
func (r ReturnsAPIReturnGetDeclaredByChannelRequest) ChannelOrderNos(channelOrderNos []string) ReturnsAPIReturnGetDeclaredByChannelRequest {
	r.channelOrderNos = &channelOrderNos
	return r
}

// Filter on the fulfillment type of the order.
func (r ReturnsAPIReturnGetDeclaredByChannelRequest) FulfillmentType(fulfillmentType FulfillmentType) ReturnsAPIReturnGetDeclaredByChannelRequest {
	r.fulfillmentType = &fulfillmentType
	return r
}

// Return status(es) to filter on.
func (r ReturnsAPIReturnGetDeclaredByChannelRequest) Statuses(statuses []ReturnStatus) ReturnsAPIReturnGetDeclaredByChannelRequest {
	r.statuses = &statuses
	return r
}

// Return reason(s) to filter on.
func (r ReturnsAPIReturnGetDeclaredByChannelRequest) Reasons(reasons []ReturnReason) ReturnsAPIReturnGetDeclaredByChannelRequest {
	r.reasons = &reasons
	return r
}

// Filter on the creation date, starting from this date. This date is inclusive.
func (r ReturnsAPIReturnGetDeclaredByChannelRequest) FromDate(fromDate time.Time) ReturnsAPIReturnGetDeclaredByChannelRequest {
	r.fromDate = &fromDate
	return r
}

// Filter on the creation date, until this date. This date is exclusive.
func (r ReturnsAPIReturnGetDeclaredByChannelRequest) ToDate(toDate time.Time) ReturnsAPIReturnGetDeclaredByChannelRequest {
	r.toDate = &toDate
	return r
}

// Filters based on acknowledgements
func (r ReturnsAPIReturnGetDeclaredByChannelRequest) IsAcknowledged(isAcknowledged bool) ReturnsAPIReturnGetDeclaredByChannelRequest {
	r.isAcknowledged = &isAcknowledged
	return r
}

// The page to filter on. Starts at 1.
func (r ReturnsAPIReturnGetDeclaredByChannelRequest) Page(page int32) ReturnsAPIReturnGetDeclaredByChannelRequest {
	r.page = &page
	return r
}

func (r ReturnsAPIReturnGetDeclaredByChannelRequest) Execute() (*CollectionOfMerchantReturnResponse, *http.Response, error) {
	return r.ApiService.ReturnGetDeclaredByChannelExecute(r)
}

/*
ReturnGetDeclaredByChannel Gets marketplace returns

Gets all returns created by the marketplace.<br /><br />**NB:** this endpoint is used for both marketplace and marketplace-fulfilled returns.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnsAPIReturnGetDeclaredByChannelRequest
*/
func (a *ReturnsAPIService) ReturnGetDeclaredByChannel(ctx context.Context) ReturnsAPIReturnGetDeclaredByChannelRequest {
	return ReturnsAPIReturnGetDeclaredByChannelRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfMerchantReturnResponse
func (a *ReturnsAPIService) ReturnGetDeclaredByChannelExecute(r ReturnsAPIReturnGetDeclaredByChannelRequest) (*CollectionOfMerchantReturnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionOfMerchantReturnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnsAPIService.ReturnGetDeclaredByChannel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/returns/merchant"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.channelIds != nil {
		t := *r.channelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", t, "multi")
		}
	}
	if r.merchantOrderNos != nil {
		t := *r.merchantOrderNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "merchantOrderNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "merchantOrderNos", t, "multi")
		}
	}
	if r.channelOrderNos != nil {
		t := *r.channelOrderNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelOrderNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelOrderNos", t, "multi")
		}
	}
	if r.fulfillmentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fulfillmentType", r.fulfillmentType, "")
	}
	if r.statuses != nil {
		t := *r.statuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", t, "multi")
		}
	}
	if r.reasons != nil {
		t := *r.reasons
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reasons", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reasons", t, "multi")
		}
	}
	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromDate", r.fromDate, "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toDate", r.toDate, "")
	}
	if r.isAcknowledged != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isAcknowledged", r.isAcknowledged, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnsAPIReturnGetReturnsRequest struct {
	ctx context.Context
	ApiService *ReturnsAPIService
	creatorType *CreatorFilter
	channelIds *[]int32
	merchantOrderNos *[]string
	channelOrderNos *[]string
	fulfillmentType *FulfillmentType
	statuses *[]ReturnStatus
	reasons *[]ReturnReason
	fromDate *time.Time
	toDate *time.Time
	isAcknowledged *bool
	page *int32
}

// Filter on the return&#39;s creator. Default is MIXED.
func (r ReturnsAPIReturnGetReturnsRequest) CreatorType(creatorType CreatorFilter) ReturnsAPIReturnGetReturnsRequest {
	r.creatorType = &creatorType
	return r
}

// Filter on Channel IDs
func (r ReturnsAPIReturnGetReturnsRequest) ChannelIds(channelIds []int32) ReturnsAPIReturnGetReturnsRequest {
	r.channelIds = &channelIds
	return r
}

// Filter on unique order reference used by the merchant.
func (r ReturnsAPIReturnGetReturnsRequest) MerchantOrderNos(merchantOrderNos []string) ReturnsAPIReturnGetReturnsRequest {
	r.merchantOrderNos = &merchantOrderNos
	return r
}

// Filter on unique order reference used by the channel.
func (r ReturnsAPIReturnGetReturnsRequest) ChannelOrderNos(channelOrderNos []string) ReturnsAPIReturnGetReturnsRequest {
	r.channelOrderNos = &channelOrderNos
	return r
}

// Filter on the fulfillment type of the order.
func (r ReturnsAPIReturnGetReturnsRequest) FulfillmentType(fulfillmentType FulfillmentType) ReturnsAPIReturnGetReturnsRequest {
	r.fulfillmentType = &fulfillmentType
	return r
}

// Return status(es) to filter on.
func (r ReturnsAPIReturnGetReturnsRequest) Statuses(statuses []ReturnStatus) ReturnsAPIReturnGetReturnsRequest {
	r.statuses = &statuses
	return r
}

// Return reason(s) to filter on.
func (r ReturnsAPIReturnGetReturnsRequest) Reasons(reasons []ReturnReason) ReturnsAPIReturnGetReturnsRequest {
	r.reasons = &reasons
	return r
}

// Filter on the creation date, starting from this date. This date is inclusive.
func (r ReturnsAPIReturnGetReturnsRequest) FromDate(fromDate time.Time) ReturnsAPIReturnGetReturnsRequest {
	r.fromDate = &fromDate
	return r
}

// Filter on the creation date, until this date. This date is exclusive.
func (r ReturnsAPIReturnGetReturnsRequest) ToDate(toDate time.Time) ReturnsAPIReturnGetReturnsRequest {
	r.toDate = &toDate
	return r
}

// Filters based on acknowledgements
func (r ReturnsAPIReturnGetReturnsRequest) IsAcknowledged(isAcknowledged bool) ReturnsAPIReturnGetReturnsRequest {
	r.isAcknowledged = &isAcknowledged
	return r
}

// The page to filter on. Starts at 1.
func (r ReturnsAPIReturnGetReturnsRequest) Page(page int32) ReturnsAPIReturnGetReturnsRequest {
	r.page = &page
	return r
}

func (r ReturnsAPIReturnGetReturnsRequest) Execute() (*CollectionOfMerchantReturnResponse, *http.Response, error) {
	return r.ApiService.ReturnGetReturnsExecute(r)
}

/*
ReturnGetReturns Gets returns by filter

Gets the returns based on the filter provided.<br /><br />**NB:** this endpoint is used to retrieve all types of returns: merchant, marketplace, mixed, and marketplace-fulfilled.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnsAPIReturnGetReturnsRequest
*/
func (a *ReturnsAPIService) ReturnGetReturns(ctx context.Context) ReturnsAPIReturnGetReturnsRequest {
	return ReturnsAPIReturnGetReturnsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfMerchantReturnResponse
func (a *ReturnsAPIService) ReturnGetReturnsExecute(r ReturnsAPIReturnGetReturnsRequest) (*CollectionOfMerchantReturnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionOfMerchantReturnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnsAPIService.ReturnGetReturns")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/returns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.creatorType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creatorType", r.creatorType, "")
	}
	if r.channelIds != nil {
		t := *r.channelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", t, "multi")
		}
	}
	if r.merchantOrderNos != nil {
		t := *r.merchantOrderNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "merchantOrderNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "merchantOrderNos", t, "multi")
		}
	}
	if r.channelOrderNos != nil {
		t := *r.channelOrderNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelOrderNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelOrderNos", t, "multi")
		}
	}
	if r.fulfillmentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fulfillmentType", r.fulfillmentType, "")
	}
	if r.statuses != nil {
		t := *r.statuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", t, "multi")
		}
	}
	if r.reasons != nil {
		t := *r.reasons
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reasons", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reasons", t, "multi")
		}
	}
	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromDate", r.fromDate, "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toDate", r.toDate, "")
	}
	if r.isAcknowledged != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isAcknowledged", r.isAcknowledged, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnsAPIReturnGetUnhandledRequest struct {
	ctx context.Context
	ApiService *ReturnsAPIService
	channelIds *[]int32
	page *int32
}

// Filter on Channel IDs
func (r ReturnsAPIReturnGetUnhandledRequest) ChannelIds(channelIds []int32) ReturnsAPIReturnGetUnhandledRequest {
	r.channelIds = &channelIds
	return r
}

// The page to filter on. Starts at 1.
func (r ReturnsAPIReturnGetUnhandledRequest) Page(page int32) ReturnsAPIReturnGetUnhandledRequest {
	r.page = &page
	return r
}

func (r ReturnsAPIReturnGetUnhandledRequest) Execute() (*CollectionOfMerchantReturnResponse, *http.Response, error) {
	return r.ApiService.ReturnGetUnhandledExecute(r)
}

/*
ReturnGetUnhandled Gets unhandled returns

Gets all marketplace returns with the status **In progress**.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnsAPIReturnGetUnhandledRequest
*/
func (a *ReturnsAPIService) ReturnGetUnhandled(ctx context.Context) ReturnsAPIReturnGetUnhandledRequest {
	return ReturnsAPIReturnGetUnhandledRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfMerchantReturnResponse
func (a *ReturnsAPIService) ReturnGetUnhandledExecute(r ReturnsAPIReturnGetUnhandledRequest) (*CollectionOfMerchantReturnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionOfMerchantReturnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnsAPIService.ReturnGetUnhandled")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/returns/merchant/new"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.channelIds != nil {
		t := *r.channelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnsAPIReturnHandleRequest struct {
	ctx context.Context
	ApiService *ReturnsAPIService
	singleMerchantHandleReturnRequest *SingleMerchantHandleReturnRequest
}

// The return to handle
func (r ReturnsAPIReturnHandleRequest) SingleMerchantHandleReturnRequest(singleMerchantHandleReturnRequest SingleMerchantHandleReturnRequest) ReturnsAPIReturnHandleRequest {
	r.singleMerchantHandleReturnRequest = &singleMerchantHandleReturnRequest
	return r
}

func (r ReturnsAPIReturnHandleRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.ReturnHandleExecute(r)
}

/*
ReturnHandle [CLOSED BETA] Handle a return

Handles a return<br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnsAPIReturnHandleRequest
*/
func (a *ReturnsAPIService) ReturnHandle(ctx context.Context) ReturnsAPIReturnHandleRequest {
	return ReturnsAPIReturnHandleRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *ReturnsAPIService) ReturnHandleExecute(r ReturnsAPIReturnHandleRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnsAPIService.ReturnHandle")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/returns/merchant/handle"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.singleMerchantHandleReturnRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnsAPIReturnUpdateForMerchantRequest struct {
	ctx context.Context
	ApiService *ReturnsAPIService
	merchantReturnUpdateRequest *MerchantReturnUpdateRequest
}

func (r ReturnsAPIReturnUpdateForMerchantRequest) MerchantReturnUpdateRequest(merchantReturnUpdateRequest MerchantReturnUpdateRequest) ReturnsAPIReturnUpdateForMerchantRequest {
	r.merchantReturnUpdateRequest = &merchantReturnUpdateRequest
	return r
}

func (r ReturnsAPIReturnUpdateForMerchantRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.ReturnUpdateForMerchantExecute(r)
}

/*
ReturnUpdateForMerchant Marks returns as received

Marks a return as either fully or partially received.<br /> <br />**NB:** this endpoint is used for marketplace returns, and you can only accept or reject a return once.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnsAPIReturnUpdateForMerchantRequest
*/
func (a *ReturnsAPIService) ReturnUpdateForMerchant(ctx context.Context) ReturnsAPIReturnUpdateForMerchantRequest {
	return ReturnsAPIReturnUpdateForMerchantRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *ReturnsAPIService) ReturnUpdateForMerchantExecute(r ReturnsAPIReturnUpdateForMerchantRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnsAPIService.ReturnUpdateForMerchant")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/returns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.merchantReturnUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
