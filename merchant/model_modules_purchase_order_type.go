/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// ModulesPurchaseOrderType the model 'ModulesPurchaseOrderType'
type ModulesPurchaseOrderType string

// List of ModulesPurchaseOrderType
const (
	MODULESPURCHASEORDERTYPE_REGULAR_ORDER ModulesPurchaseOrderType = "REGULAR_ORDER"
	MODULESPURCHASEORDERTYPE_CONSIGNED_ORDER ModulesPurchaseOrderType = "CONSIGNED_ORDER"
	MODULESPURCHASEORDERTYPE_NEW_PRODUCT_INTRODUCTION ModulesPurchaseOrderType = "NEW_PRODUCT_INTRODUCTION"
	MODULESPURCHASEORDERTYPE_RUSH_ORDER ModulesPurchaseOrderType = "RUSH_ORDER"
)

// All allowed values of ModulesPurchaseOrderType enum
var AllowedModulesPurchaseOrderTypeEnumValues = []ModulesPurchaseOrderType{
	"REGULAR_ORDER",
	"CONSIGNED_ORDER",
	"NEW_PRODUCT_INTRODUCTION",
	"RUSH_ORDER",
}

func (v *ModulesPurchaseOrderType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModulesPurchaseOrderType(value)
	for _, existing := range AllowedModulesPurchaseOrderTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModulesPurchaseOrderType", value)
}

// NewModulesPurchaseOrderTypeFromValue returns a pointer to a valid ModulesPurchaseOrderType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModulesPurchaseOrderTypeFromValue(v string) (*ModulesPurchaseOrderType, error) {
	ev := ModulesPurchaseOrderType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModulesPurchaseOrderType: valid values are %v", v, AllowedModulesPurchaseOrderTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModulesPurchaseOrderType) IsValid() bool {
	for _, existing := range AllowedModulesPurchaseOrderTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ModulesPurchaseOrderType value
func (v ModulesPurchaseOrderType) Ptr() *ModulesPurchaseOrderType {
	return &v
}

type NullableModulesPurchaseOrderType struct {
	value *ModulesPurchaseOrderType
	isSet bool
}

func (v NullableModulesPurchaseOrderType) Get() *ModulesPurchaseOrderType {
	return v.value
}

func (v *NullableModulesPurchaseOrderType) Set(val *ModulesPurchaseOrderType) {
	v.value = val
	v.isSet = true
}

func (v NullableModulesPurchaseOrderType) IsSet() bool {
	return v.isSet
}

func (v *NullableModulesPurchaseOrderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModulesPurchaseOrderType(val *ModulesPurchaseOrderType) *NullableModulesPurchaseOrderType {
	return &NullableModulesPurchaseOrderType{value: val, isSet: true}
}

func (v NullableModulesPurchaseOrderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModulesPurchaseOrderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

