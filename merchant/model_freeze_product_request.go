/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FreezeProductRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FreezeProductRequest{}

// FreezeProductRequest struct for FreezeProductRequest
type FreezeProductRequest struct {
	MerchantProductNo string `json:"MerchantProductNo"`
	Reason string `json:"Reason"`
	Action FreezingActionRequest `json:"Action"`
}

type _FreezeProductRequest FreezeProductRequest

// NewFreezeProductRequest instantiates a new FreezeProductRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFreezeProductRequest(merchantProductNo string, reason string, action FreezingActionRequest) *FreezeProductRequest {
	this := FreezeProductRequest{}
	this.MerchantProductNo = merchantProductNo
	this.Reason = reason
	this.Action = action
	return &this
}

// NewFreezeProductRequestWithDefaults instantiates a new FreezeProductRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFreezeProductRequestWithDefaults() *FreezeProductRequest {
	this := FreezeProductRequest{}
	return &this
}

// GetMerchantProductNo returns the MerchantProductNo field value
func (o *FreezeProductRequest) GetMerchantProductNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantProductNo
}

// GetMerchantProductNoOk returns a tuple with the MerchantProductNo field value
// and a boolean to check if the value has been set.
func (o *FreezeProductRequest) GetMerchantProductNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantProductNo, true
}

// SetMerchantProductNo sets field value
func (o *FreezeProductRequest) SetMerchantProductNo(v string) {
	o.MerchantProductNo = v
}

// GetReason returns the Reason field value
func (o *FreezeProductRequest) GetReason() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Reason
}

// GetReasonOk returns a tuple with the Reason field value
// and a boolean to check if the value has been set.
func (o *FreezeProductRequest) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Reason, true
}

// SetReason sets field value
func (o *FreezeProductRequest) SetReason(v string) {
	o.Reason = v
}

// GetAction returns the Action field value
func (o *FreezeProductRequest) GetAction() FreezingActionRequest {
	if o == nil {
		var ret FreezingActionRequest
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *FreezeProductRequest) GetActionOk() (*FreezingActionRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *FreezeProductRequest) SetAction(v FreezingActionRequest) {
	o.Action = v
}

func (o FreezeProductRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FreezeProductRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["MerchantProductNo"] = o.MerchantProductNo
	toSerialize["Reason"] = o.Reason
	toSerialize["Action"] = o.Action
	return toSerialize, nil
}

func (o *FreezeProductRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"MerchantProductNo",
		"Reason",
		"Action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFreezeProductRequest := _FreezeProductRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFreezeProductRequest)

	if err != nil {
		return err
	}

	*o = FreezeProductRequest(varFreezeProductRequest)

	return err
}

type NullableFreezeProductRequest struct {
	value *FreezeProductRequest
	isSet bool
}

func (v NullableFreezeProductRequest) Get() *FreezeProductRequest {
	return v.value
}

func (v *NullableFreezeProductRequest) Set(val *FreezeProductRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFreezeProductRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFreezeProductRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFreezeProductRequest(val *FreezeProductRequest) *NullableFreezeProductRequest {
	return &NullableFreezeProductRequest{value: val, isSet: true}
}

func (v NullableFreezeProductRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFreezeProductRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


