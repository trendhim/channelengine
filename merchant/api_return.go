/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"time"
)


// ReturnAPIService ReturnAPI service
type ReturnAPIService service

type ReturnAPIReturnAcknowledgeRequest struct {
	ctx context.Context
	ApiService *ReturnAPIService
	merchantReturnAcknowledgeRequest *MerchantReturnAcknowledgeRequest
}

func (r ReturnAPIReturnAcknowledgeRequest) MerchantReturnAcknowledgeRequest(merchantReturnAcknowledgeRequest MerchantReturnAcknowledgeRequest) ReturnAPIReturnAcknowledgeRequest {
	r.merchantReturnAcknowledgeRequest = &merchantReturnAcknowledgeRequest
	return r
}

func (r ReturnAPIReturnAcknowledgeRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.ReturnAcknowledgeExecute(r)
}

/*
ReturnAcknowledge Acknowledges a return

Acknowledges a return based on the **Return ID** provided.<br /><br />**NB:** by acknowledging a return, you signal that it was registered in your system.<br />You can later filter your returns on the **Is acknowledged** parameter.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnAPIReturnAcknowledgeRequest
*/
func (a *ReturnAPIService) ReturnAcknowledge(ctx context.Context) ReturnAPIReturnAcknowledgeRequest {
	return ReturnAPIReturnAcknowledgeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *ReturnAPIService) ReturnAcknowledgeExecute(r ReturnAPIReturnAcknowledgeRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnAPIService.ReturnAcknowledge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/returns/merchant/acknowledge"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.merchantReturnAcknowledgeRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnAPIReturnDeclareForMerchantRequest struct {
	ctx context.Context
	ApiService *ReturnAPIService
	merchantReturnRequest *MerchantReturnRequest
}

func (r ReturnAPIReturnDeclareForMerchantRequest) MerchantReturnRequest(merchantReturnRequest MerchantReturnRequest) ReturnAPIReturnDeclareForMerchantRequest {
	r.merchantReturnRequest = &merchantReturnRequest
	return r
}

func (r ReturnAPIReturnDeclareForMerchantRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.ReturnDeclareForMerchantExecute(r)
}

/*
ReturnDeclareForMerchant Creates merchant return

Marks an order as either fully or partially returned.<br /><br />**NB:** this endpoint is used for merchant returns (i.e.: returns dealt with by the merchant).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnAPIReturnDeclareForMerchantRequest
*/
func (a *ReturnAPIService) ReturnDeclareForMerchant(ctx context.Context) ReturnAPIReturnDeclareForMerchantRequest {
	return ReturnAPIReturnDeclareForMerchantRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *ReturnAPIService) ReturnDeclareForMerchantExecute(r ReturnAPIReturnDeclareForMerchantRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnAPIService.ReturnDeclareForMerchant")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/returns/merchant"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.merchantReturnRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnAPIReturnGetByMerchantOrderNoRequest struct {
	ctx context.Context
	ApiService *ReturnAPIService
	merchantOrderNo string
}

func (r ReturnAPIReturnGetByMerchantOrderNoRequest) Execute() (*CollectionOfMerchantSingleOrderReturnResponse, *http.Response, error) {
	return r.ApiService.ReturnGetByMerchantOrderNoExecute(r)
}

/*
ReturnGetByMerchantOrderNo Gets a return

Gets the returns based on the **Merchant order number** provided.<br /><br />**NB:** this endpoint is meant for merchants. Marketplaces should use the **GET /v2/returns/channel** call instead.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param merchantOrderNo
 @return ReturnAPIReturnGetByMerchantOrderNoRequest
*/
func (a *ReturnAPIService) ReturnGetByMerchantOrderNo(ctx context.Context, merchantOrderNo string) ReturnAPIReturnGetByMerchantOrderNoRequest {
	return ReturnAPIReturnGetByMerchantOrderNoRequest{
		ApiService: a,
		ctx: ctx,
		merchantOrderNo: merchantOrderNo,
	}
}

// Execute executes the request
//  @return CollectionOfMerchantSingleOrderReturnResponse
func (a *ReturnAPIService) ReturnGetByMerchantOrderNoExecute(r ReturnAPIReturnGetByMerchantOrderNoRequest) (*CollectionOfMerchantSingleOrderReturnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionOfMerchantSingleOrderReturnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnAPIService.ReturnGetByMerchantOrderNo")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/returns/merchant/{merchantOrderNo}"
	localVarPath = strings.Replace(localVarPath, "{"+"merchantOrderNo"+"}", url.PathEscape(parameterValueToString(r.merchantOrderNo, "merchantOrderNo")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnAPIReturnGetDeclaredByChannelRequest struct {
	ctx context.Context
	ApiService *ReturnAPIService
	channelIds *[]int32
	merchantOrderNos *[]string
	channelOrderNos *[]string
	fulfillmentType *FulfillmentType
	statuses *[]ReturnStatus
	reasons *[]ReturnReason
	fromDate *time.Time
	toDate *time.Time
	isAcknowledged *bool
	page *int32
}

// Filter on Channel IDs
func (r ReturnAPIReturnGetDeclaredByChannelRequest) ChannelIds(channelIds []int32) ReturnAPIReturnGetDeclaredByChannelRequest {
	r.channelIds = &channelIds
	return r
}

// Filter on unique order reference used by the merchant.
func (r ReturnAPIReturnGetDeclaredByChannelRequest) MerchantOrderNos(merchantOrderNos []string) ReturnAPIReturnGetDeclaredByChannelRequest {
	r.merchantOrderNos = &merchantOrderNos
	return r
}

// Filter on unique order reference used by the channel.
func (r ReturnAPIReturnGetDeclaredByChannelRequest) ChannelOrderNos(channelOrderNos []string) ReturnAPIReturnGetDeclaredByChannelRequest {
	r.channelOrderNos = &channelOrderNos
	return r
}

// Filter on the fulfillment type of the order.
func (r ReturnAPIReturnGetDeclaredByChannelRequest) FulfillmentType(fulfillmentType FulfillmentType) ReturnAPIReturnGetDeclaredByChannelRequest {
	r.fulfillmentType = &fulfillmentType
	return r
}

// Return status(es) to filter on.
func (r ReturnAPIReturnGetDeclaredByChannelRequest) Statuses(statuses []ReturnStatus) ReturnAPIReturnGetDeclaredByChannelRequest {
	r.statuses = &statuses
	return r
}

// Return reason(s) to filter on.
func (r ReturnAPIReturnGetDeclaredByChannelRequest) Reasons(reasons []ReturnReason) ReturnAPIReturnGetDeclaredByChannelRequest {
	r.reasons = &reasons
	return r
}

// Filter on the creation date, starting from this date. This date is inclusive.
func (r ReturnAPIReturnGetDeclaredByChannelRequest) FromDate(fromDate time.Time) ReturnAPIReturnGetDeclaredByChannelRequest {
	r.fromDate = &fromDate
	return r
}

// Filter on the creation date, until this date. This date is exclusive.
func (r ReturnAPIReturnGetDeclaredByChannelRequest) ToDate(toDate time.Time) ReturnAPIReturnGetDeclaredByChannelRequest {
	r.toDate = &toDate
	return r
}

// Filters based on acknowledgements
func (r ReturnAPIReturnGetDeclaredByChannelRequest) IsAcknowledged(isAcknowledged bool) ReturnAPIReturnGetDeclaredByChannelRequest {
	r.isAcknowledged = &isAcknowledged
	return r
}

// The page to filter on. Starts at 1.
func (r ReturnAPIReturnGetDeclaredByChannelRequest) Page(page int32) ReturnAPIReturnGetDeclaredByChannelRequest {
	r.page = &page
	return r
}

func (r ReturnAPIReturnGetDeclaredByChannelRequest) Execute() (*CollectionOfMerchantReturnResponse, *http.Response, error) {
	return r.ApiService.ReturnGetDeclaredByChannelExecute(r)
}

/*
ReturnGetDeclaredByChannel Gets marketplace returns

Gets all returns created by the marketplace.<br /><br />**NB:** this endpoint is used for both marketplace and marketplace-fulfilled returns.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnAPIReturnGetDeclaredByChannelRequest
*/
func (a *ReturnAPIService) ReturnGetDeclaredByChannel(ctx context.Context) ReturnAPIReturnGetDeclaredByChannelRequest {
	return ReturnAPIReturnGetDeclaredByChannelRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfMerchantReturnResponse
func (a *ReturnAPIService) ReturnGetDeclaredByChannelExecute(r ReturnAPIReturnGetDeclaredByChannelRequest) (*CollectionOfMerchantReturnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionOfMerchantReturnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnAPIService.ReturnGetDeclaredByChannel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/returns/merchant"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.channelIds != nil {
		t := *r.channelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", t, "multi")
		}
	}
	if r.merchantOrderNos != nil {
		t := *r.merchantOrderNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "merchantOrderNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "merchantOrderNos", t, "multi")
		}
	}
	if r.channelOrderNos != nil {
		t := *r.channelOrderNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelOrderNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelOrderNos", t, "multi")
		}
	}
	if r.fulfillmentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fulfillmentType", r.fulfillmentType, "")
	}
	if r.statuses != nil {
		t := *r.statuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", t, "multi")
		}
	}
	if r.reasons != nil {
		t := *r.reasons
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reasons", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reasons", t, "multi")
		}
	}
	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromDate", r.fromDate, "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toDate", r.toDate, "")
	}
	if r.isAcknowledged != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isAcknowledged", r.isAcknowledged, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnAPIReturnGetReturnsRequest struct {
	ctx context.Context
	ApiService *ReturnAPIService
	creatorType *CreatorFilter
	channelIds *[]int32
	merchantOrderNos *[]string
	channelOrderNos *[]string
	fulfillmentType *FulfillmentType
	statuses *[]ReturnStatus
	reasons *[]ReturnReason
	fromDate *time.Time
	toDate *time.Time
	isAcknowledged *bool
	page *int32
}

// Filter on the return&#39;s creator. Default is MIXED.
func (r ReturnAPIReturnGetReturnsRequest) CreatorType(creatorType CreatorFilter) ReturnAPIReturnGetReturnsRequest {
	r.creatorType = &creatorType
	return r
}

// Filter on Channel IDs
func (r ReturnAPIReturnGetReturnsRequest) ChannelIds(channelIds []int32) ReturnAPIReturnGetReturnsRequest {
	r.channelIds = &channelIds
	return r
}

// Filter on unique order reference used by the merchant.
func (r ReturnAPIReturnGetReturnsRequest) MerchantOrderNos(merchantOrderNos []string) ReturnAPIReturnGetReturnsRequest {
	r.merchantOrderNos = &merchantOrderNos
	return r
}

// Filter on unique order reference used by the channel.
func (r ReturnAPIReturnGetReturnsRequest) ChannelOrderNos(channelOrderNos []string) ReturnAPIReturnGetReturnsRequest {
	r.channelOrderNos = &channelOrderNos
	return r
}

// Filter on the fulfillment type of the order.
func (r ReturnAPIReturnGetReturnsRequest) FulfillmentType(fulfillmentType FulfillmentType) ReturnAPIReturnGetReturnsRequest {
	r.fulfillmentType = &fulfillmentType
	return r
}

// Return status(es) to filter on.
func (r ReturnAPIReturnGetReturnsRequest) Statuses(statuses []ReturnStatus) ReturnAPIReturnGetReturnsRequest {
	r.statuses = &statuses
	return r
}

// Return reason(s) to filter on.
func (r ReturnAPIReturnGetReturnsRequest) Reasons(reasons []ReturnReason) ReturnAPIReturnGetReturnsRequest {
	r.reasons = &reasons
	return r
}

// Filter on the creation date, starting from this date. This date is inclusive.
func (r ReturnAPIReturnGetReturnsRequest) FromDate(fromDate time.Time) ReturnAPIReturnGetReturnsRequest {
	r.fromDate = &fromDate
	return r
}

// Filter on the creation date, until this date. This date is exclusive.
func (r ReturnAPIReturnGetReturnsRequest) ToDate(toDate time.Time) ReturnAPIReturnGetReturnsRequest {
	r.toDate = &toDate
	return r
}

// Filters based on acknowledgements
func (r ReturnAPIReturnGetReturnsRequest) IsAcknowledged(isAcknowledged bool) ReturnAPIReturnGetReturnsRequest {
	r.isAcknowledged = &isAcknowledged
	return r
}

// The page to filter on. Starts at 1.
func (r ReturnAPIReturnGetReturnsRequest) Page(page int32) ReturnAPIReturnGetReturnsRequest {
	r.page = &page
	return r
}

func (r ReturnAPIReturnGetReturnsRequest) Execute() (*CollectionOfMerchantReturnResponse, *http.Response, error) {
	return r.ApiService.ReturnGetReturnsExecute(r)
}

/*
ReturnGetReturns Gets returns by filter

Gets the returns based on the filter provided.<br /><br />**NB:** this endpoint is used to retrieve all types of returns: merchant, marketplace, mixed, and marketplace-fulfilled.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnAPIReturnGetReturnsRequest
*/
func (a *ReturnAPIService) ReturnGetReturns(ctx context.Context) ReturnAPIReturnGetReturnsRequest {
	return ReturnAPIReturnGetReturnsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfMerchantReturnResponse
func (a *ReturnAPIService) ReturnGetReturnsExecute(r ReturnAPIReturnGetReturnsRequest) (*CollectionOfMerchantReturnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionOfMerchantReturnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnAPIService.ReturnGetReturns")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/returns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.creatorType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creatorType", r.creatorType, "")
	}
	if r.channelIds != nil {
		t := *r.channelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", t, "multi")
		}
	}
	if r.merchantOrderNos != nil {
		t := *r.merchantOrderNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "merchantOrderNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "merchantOrderNos", t, "multi")
		}
	}
	if r.channelOrderNos != nil {
		t := *r.channelOrderNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelOrderNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelOrderNos", t, "multi")
		}
	}
	if r.fulfillmentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fulfillmentType", r.fulfillmentType, "")
	}
	if r.statuses != nil {
		t := *r.statuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", t, "multi")
		}
	}
	if r.reasons != nil {
		t := *r.reasons
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reasons", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reasons", t, "multi")
		}
	}
	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromDate", r.fromDate, "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toDate", r.toDate, "")
	}
	if r.isAcknowledged != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isAcknowledged", r.isAcknowledged, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnAPIReturnGetUnhandledRequest struct {
	ctx context.Context
	ApiService *ReturnAPIService
	channelIds *[]int32
	page *int32
}

// Filter on Channel IDs
func (r ReturnAPIReturnGetUnhandledRequest) ChannelIds(channelIds []int32) ReturnAPIReturnGetUnhandledRequest {
	r.channelIds = &channelIds
	return r
}

// The page to filter on. Starts at 1.
func (r ReturnAPIReturnGetUnhandledRequest) Page(page int32) ReturnAPIReturnGetUnhandledRequest {
	r.page = &page
	return r
}

func (r ReturnAPIReturnGetUnhandledRequest) Execute() (*CollectionOfMerchantReturnResponse, *http.Response, error) {
	return r.ApiService.ReturnGetUnhandledExecute(r)
}

/*
ReturnGetUnhandled Gets unhandled returns

Gets all marketplace returns with the status **In progress**.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnAPIReturnGetUnhandledRequest
*/
func (a *ReturnAPIService) ReturnGetUnhandled(ctx context.Context) ReturnAPIReturnGetUnhandledRequest {
	return ReturnAPIReturnGetUnhandledRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfMerchantReturnResponse
func (a *ReturnAPIService) ReturnGetUnhandledExecute(r ReturnAPIReturnGetUnhandledRequest) (*CollectionOfMerchantReturnResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionOfMerchantReturnResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnAPIService.ReturnGetUnhandled")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/returns/merchant/new"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.channelIds != nil {
		t := *r.channelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ReturnAPIReturnUpdateForMerchantRequest struct {
	ctx context.Context
	ApiService *ReturnAPIService
	merchantReturnUpdateRequest *MerchantReturnUpdateRequest
}

func (r ReturnAPIReturnUpdateForMerchantRequest) MerchantReturnUpdateRequest(merchantReturnUpdateRequest MerchantReturnUpdateRequest) ReturnAPIReturnUpdateForMerchantRequest {
	r.merchantReturnUpdateRequest = &merchantReturnUpdateRequest
	return r
}

func (r ReturnAPIReturnUpdateForMerchantRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.ReturnUpdateForMerchantExecute(r)
}

/*
ReturnUpdateForMerchant Marks returns as received

Marks a return as either fully or partially received.<br /> <br />**NB:** this endpoint is used for marketplace returns, and you can only accept or reject a return once.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ReturnAPIReturnUpdateForMerchantRequest
*/
func (a *ReturnAPIService) ReturnUpdateForMerchant(ctx context.Context) ReturnAPIReturnUpdateForMerchantRequest {
	return ReturnAPIReturnUpdateForMerchantRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *ReturnAPIService) ReturnUpdateForMerchantExecute(r ReturnAPIReturnUpdateForMerchantRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ReturnAPIService.ReturnUpdateForMerchant")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/returns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.merchantReturnUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
