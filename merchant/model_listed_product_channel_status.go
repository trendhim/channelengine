/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// ListedProductChannelStatus the model 'ListedProductChannelStatus'
type ListedProductChannelStatus string

// List of ListedProductChannelStatus
const (
	LISTEDPRODUCTCHANNELSTATUS_NONE ListedProductChannelStatus = "NONE"
	LISTEDPRODUCTCHANNELSTATUS_PUBLISHED ListedProductChannelStatus = "PUBLISHED"
	LISTEDPRODUCTCHANNELSTATUS_NOT_PUBLISHED ListedProductChannelStatus = "NOT_PUBLISHED"
	LISTEDPRODUCTCHANNELSTATUS_UNKNOWN ListedProductChannelStatus = "UNKNOWN"
	LISTEDPRODUCTCHANNELSTATUS_UNDER_REVIEW ListedProductChannelStatus = "UNDER_REVIEW"
	LISTEDPRODUCTCHANNELSTATUS_INVALID_ON_CREATE ListedProductChannelStatus = "INVALID_ON_CREATE"
)

// All allowed values of ListedProductChannelStatus enum
var AllowedListedProductChannelStatusEnumValues = []ListedProductChannelStatus{
	"NONE",
	"PUBLISHED",
	"NOT_PUBLISHED",
	"UNKNOWN",
	"UNDER_REVIEW",
	"INVALID_ON_CREATE",
}

func (v *ListedProductChannelStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ListedProductChannelStatus(value)
	for _, existing := range AllowedListedProductChannelStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ListedProductChannelStatus", value)
}

// NewListedProductChannelStatusFromValue returns a pointer to a valid ListedProductChannelStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewListedProductChannelStatusFromValue(v string) (*ListedProductChannelStatus, error) {
	ev := ListedProductChannelStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ListedProductChannelStatus: valid values are %v", v, AllowedListedProductChannelStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ListedProductChannelStatus) IsValid() bool {
	for _, existing := range AllowedListedProductChannelStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ListedProductChannelStatus value
func (v ListedProductChannelStatus) Ptr() *ListedProductChannelStatus {
	return &v
}

type NullableListedProductChannelStatus struct {
	value *ListedProductChannelStatus
	isSet bool
}

func (v NullableListedProductChannelStatus) Get() *ListedProductChannelStatus {
	return v.value
}

func (v *NullableListedProductChannelStatus) Set(val *ListedProductChannelStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableListedProductChannelStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableListedProductChannelStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListedProductChannelStatus(val *ListedProductChannelStatus) *NullableListedProductChannelStatus {
	return &NullableListedProductChannelStatus{value: val, isSet: true}
}

func (v NullableListedProductChannelStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListedProductChannelStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

