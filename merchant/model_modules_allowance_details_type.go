/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// ModulesAllowanceDetailsType the model 'ModulesAllowanceDetailsType'
type ModulesAllowanceDetailsType string

// List of ModulesAllowanceDetailsType
const (
	MODULESALLOWANCEDETAILSTYPE_DISCOUNT ModulesAllowanceDetailsType = "DISCOUNT"
	MODULESALLOWANCEDETAILSTYPE_DISCOUNT_INCENTIVE ModulesAllowanceDetailsType = "DISCOUNT_INCENTIVE"
	MODULESALLOWANCEDETAILSTYPE_DEFECTIVE ModulesAllowanceDetailsType = "DEFECTIVE"
	MODULESALLOWANCEDETAILSTYPE_PROMOTIONAL ModulesAllowanceDetailsType = "PROMOTIONAL"
	MODULESALLOWANCEDETAILSTYPE_UNSALEABLE_MERCHANDISE ModulesAllowanceDetailsType = "UNSALEABLE_MERCHANDISE"
	MODULESALLOWANCEDETAILSTYPE_SPECIAL ModulesAllowanceDetailsType = "SPECIAL"
)

// All allowed values of ModulesAllowanceDetailsType enum
var AllowedModulesAllowanceDetailsTypeEnumValues = []ModulesAllowanceDetailsType{
	"DISCOUNT",
	"DISCOUNT_INCENTIVE",
	"DEFECTIVE",
	"PROMOTIONAL",
	"UNSALEABLE_MERCHANDISE",
	"SPECIAL",
}

func (v *ModulesAllowanceDetailsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModulesAllowanceDetailsType(value)
	for _, existing := range AllowedModulesAllowanceDetailsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModulesAllowanceDetailsType", value)
}

// NewModulesAllowanceDetailsTypeFromValue returns a pointer to a valid ModulesAllowanceDetailsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModulesAllowanceDetailsTypeFromValue(v string) (*ModulesAllowanceDetailsType, error) {
	ev := ModulesAllowanceDetailsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModulesAllowanceDetailsType: valid values are %v", v, AllowedModulesAllowanceDetailsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModulesAllowanceDetailsType) IsValid() bool {
	for _, existing := range AllowedModulesAllowanceDetailsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ModulesAllowanceDetailsType value
func (v ModulesAllowanceDetailsType) Ptr() *ModulesAllowanceDetailsType {
	return &v
}

type NullableModulesAllowanceDetailsType struct {
	value *ModulesAllowanceDetailsType
	isSet bool
}

func (v NullableModulesAllowanceDetailsType) Get() *ModulesAllowanceDetailsType {
	return v.value
}

func (v *NullableModulesAllowanceDetailsType) Set(val *ModulesAllowanceDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableModulesAllowanceDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableModulesAllowanceDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModulesAllowanceDetailsType(val *ModulesAllowanceDetailsType) *NullableModulesAllowanceDetailsType {
	return &NullableModulesAllowanceDetailsType{value: val, isSet: true}
}

func (v NullableModulesAllowanceDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModulesAllowanceDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

