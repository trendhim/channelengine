/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// PurchaseOrderRejectionReason the model 'PurchaseOrderRejectionReason'
type PurchaseOrderRejectionReason string

// List of PurchaseOrderRejectionReason
const (
	PURCHASEORDERREJECTIONREASON_INVALID_PRODUCT PurchaseOrderRejectionReason = "INVALID_PRODUCT"
	PURCHASEORDERREJECTIONREASON_OBSOLETE_PRODUCT PurchaseOrderRejectionReason = "OBSOLETE_PRODUCT"
	PURCHASEORDERREJECTIONREASON_TEMPORARILY_UNAVAILABLE PurchaseOrderRejectionReason = "TEMPORARILY_UNAVAILABLE"
)

// All allowed values of PurchaseOrderRejectionReason enum
var AllowedPurchaseOrderRejectionReasonEnumValues = []PurchaseOrderRejectionReason{
	"INVALID_PRODUCT",
	"OBSOLETE_PRODUCT",
	"TEMPORARILY_UNAVAILABLE",
}

func (v *PurchaseOrderRejectionReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PurchaseOrderRejectionReason(value)
	for _, existing := range AllowedPurchaseOrderRejectionReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PurchaseOrderRejectionReason", value)
}

// NewPurchaseOrderRejectionReasonFromValue returns a pointer to a valid PurchaseOrderRejectionReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPurchaseOrderRejectionReasonFromValue(v string) (*PurchaseOrderRejectionReason, error) {
	ev := PurchaseOrderRejectionReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PurchaseOrderRejectionReason: valid values are %v", v, AllowedPurchaseOrderRejectionReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PurchaseOrderRejectionReason) IsValid() bool {
	for _, existing := range AllowedPurchaseOrderRejectionReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PurchaseOrderRejectionReason value
func (v PurchaseOrderRejectionReason) Ptr() *PurchaseOrderRejectionReason {
	return &v
}

type NullablePurchaseOrderRejectionReason struct {
	value *PurchaseOrderRejectionReason
	isSet bool
}

func (v NullablePurchaseOrderRejectionReason) Get() *PurchaseOrderRejectionReason {
	return v.value
}

func (v *NullablePurchaseOrderRejectionReason) Set(val *PurchaseOrderRejectionReason) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseOrderRejectionReason) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseOrderRejectionReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseOrderRejectionReason(val *PurchaseOrderRejectionReason) *NullablePurchaseOrderRejectionReason {
	return &NullablePurchaseOrderRejectionReason{value: val, isSet: true}
}

func (v NullablePurchaseOrderRejectionReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseOrderRejectionReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

