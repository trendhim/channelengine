/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
)


// CompetitionPriceAPIService CompetitionPriceAPI service
type CompetitionPriceAPIService service

type CompetitionPriceAPICompetitionPricesGetBuyBoxPricesRequest struct {
	ctx context.Context
	ApiService *CompetitionPriceAPIService
	channelId *int32
	gtinList *[]string
	skuList *[]string
	page *int32
}

// The id of the channel
func (r CompetitionPriceAPICompetitionPricesGetBuyBoxPricesRequest) ChannelId(channelId int32) CompetitionPriceAPICompetitionPricesGetBuyBoxPricesRequest {
	r.channelId = &channelId
	return r
}

// Search products by submitting a list of GTIN&#39;s. (optional)&lt;br /&gt;Max. 2000.
func (r CompetitionPriceAPICompetitionPricesGetBuyBoxPricesRequest) GtinList(gtinList []string) CompetitionPriceAPICompetitionPricesGetBuyBoxPricesRequest {
	r.gtinList = &gtinList
	return r
}

// Search products by submitting a list of Sku&#39;s. (optional)&lt;br /&gt;Max. 2000. If GtinList is already set, this one is ignored.
func (r CompetitionPriceAPICompetitionPricesGetBuyBoxPricesRequest) SkuList(skuList []string) CompetitionPriceAPICompetitionPricesGetBuyBoxPricesRequest {
	r.skuList = &skuList
	return r
}

// The page to filter on. Starts at 1.
func (r CompetitionPriceAPICompetitionPricesGetBuyBoxPricesRequest) Page(page int32) CompetitionPriceAPICompetitionPricesGetBuyBoxPricesRequest {
	r.page = &page
	return r
}

func (r CompetitionPriceAPICompetitionPricesGetBuyBoxPricesRequest) Execute() (*CollectionOfMerchantProductWithBuyBoxPrice, *http.Response, error) {
	return r.ApiService.CompetitionPricesGetBuyBoxPricesExecute(r)
}

/*
CompetitionPricesGetBuyBoxPrices Gets the price from the buy box winner

Gets the current price of the buy box winner per product for a marketplace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return CompetitionPriceAPICompetitionPricesGetBuyBoxPricesRequest
*/
func (a *CompetitionPriceAPIService) CompetitionPricesGetBuyBoxPrices(ctx context.Context) CompetitionPriceAPICompetitionPricesGetBuyBoxPricesRequest {
	return CompetitionPriceAPICompetitionPricesGetBuyBoxPricesRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfMerchantProductWithBuyBoxPrice
func (a *CompetitionPriceAPIService) CompetitionPricesGetBuyBoxPricesExecute(r CompetitionPriceAPICompetitionPricesGetBuyBoxPricesRequest) (*CollectionOfMerchantProductWithBuyBoxPrice, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionOfMerchantProductWithBuyBoxPrice
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CompetitionPriceAPIService.CompetitionPricesGetBuyBoxPrices")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/competitionprices/buyboxprices"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.channelId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "channelId", r.channelId, "")
	}
	if r.gtinList != nil {
		t := *r.gtinList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "gtinList", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "gtinList", t, "multi")
		}
	}
	if r.skuList != nil {
		t := *r.skuList
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "skuList", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "skuList", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
