/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// ChannelExportStatus the model 'ChannelExportStatus'
type ChannelExportStatus string

// List of ChannelExportStatus
const (
	CHANNELEXPORTSTATUS_AWAITING_EXPORT ChannelExportStatus = "AWAITING_EXPORT"
	CHANNELEXPORTSTATUS_AWAITING_CHANNEL_RESPONSE ChannelExportStatus = "AWAITING_CHANNEL_RESPONSE"
	CHANNELEXPORTSTATUS_SUCCEEDED ChannelExportStatus = "SUCCEEDED"
	CHANNELEXPORTSTATUS_FAILED_RETRY ChannelExportStatus = "FAILED_RETRY"
	CHANNELEXPORTSTATUS_FAILED_NO_RETRY ChannelExportStatus = "FAILED_NO_RETRY"
)

// All allowed values of ChannelExportStatus enum
var AllowedChannelExportStatusEnumValues = []ChannelExportStatus{
	"AWAITING_EXPORT",
	"AWAITING_CHANNEL_RESPONSE",
	"SUCCEEDED",
	"FAILED_RETRY",
	"FAILED_NO_RETRY",
}

func (v *ChannelExportStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ChannelExportStatus(value)
	for _, existing := range AllowedChannelExportStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ChannelExportStatus", value)
}

// NewChannelExportStatusFromValue returns a pointer to a valid ChannelExportStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChannelExportStatusFromValue(v string) (*ChannelExportStatus, error) {
	ev := ChannelExportStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ChannelExportStatus: valid values are %v", v, AllowedChannelExportStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChannelExportStatus) IsValid() bool {
	for _, existing := range AllowedChannelExportStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ChannelExportStatus value
func (v ChannelExportStatus) Ptr() *ChannelExportStatus {
	return &v
}

type NullableChannelExportStatus struct {
	value *ChannelExportStatus
	isSet bool
}

func (v NullableChannelExportStatus) Get() *ChannelExportStatus {
	return v.value
}

func (v *NullableChannelExportStatus) Set(val *ChannelExportStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelExportStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelExportStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelExportStatus(val *ChannelExportStatus) *NullableChannelExportStatus {
	return &NullableChannelExportStatus{value: val, isSet: true}
}

func (v NullableChannelExportStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelExportStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

