/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// OrderSupport the model 'OrderSupport'
type OrderSupport string

// List of OrderSupport
const (
	ORDERSUPPORT_NONE OrderSupport = "NONE"
	ORDERSUPPORT_ORDERS OrderSupport = "ORDERS"
	ORDERSUPPORT_SPLIT_ORDERS OrderSupport = "SPLIT_ORDERS"
	ORDERSUPPORT_SPLIT_ORDER_LINES OrderSupport = "SPLIT_ORDER_LINES"
)

// All allowed values of OrderSupport enum
var AllowedOrderSupportEnumValues = []OrderSupport{
	"NONE",
	"ORDERS",
	"SPLIT_ORDERS",
	"SPLIT_ORDER_LINES",
}

func (v *OrderSupport) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderSupport(value)
	for _, existing := range AllowedOrderSupportEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderSupport", value)
}

// NewOrderSupportFromValue returns a pointer to a valid OrderSupport
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderSupportFromValue(v string) (*OrderSupport, error) {
	ev := OrderSupport(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderSupport: valid values are %v", v, AllowedOrderSupportEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderSupport) IsValid() bool {
	for _, existing := range AllowedOrderSupportEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderSupport value
func (v OrderSupport) Ptr() *OrderSupport {
	return &v
}

type NullableOrderSupport struct {
	value *OrderSupport
	isSet bool
}

func (v NullableOrderSupport) Get() *OrderSupport {
	return v.value
}

func (v *NullableOrderSupport) Set(val *OrderSupport) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderSupport) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderSupport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderSupport(val *OrderSupport) *NullableOrderSupport {
	return &NullableOrderSupport{value: val, isSet: true}
}

func (v NullableOrderSupport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderSupport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

