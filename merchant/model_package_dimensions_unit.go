/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// PackageDimensionsUnit the model 'PackageDimensionsUnit'
type PackageDimensionsUnit string

// List of PackageDimensionsUnit
const (
	PACKAGEDIMENSIONSUNIT_CM PackageDimensionsUnit = "CM"
	PACKAGEDIMENSIONSUNIT_INCH PackageDimensionsUnit = "INCH"
)

// All allowed values of PackageDimensionsUnit enum
var AllowedPackageDimensionsUnitEnumValues = []PackageDimensionsUnit{
	"CM",
	"INCH",
}

func (v *PackageDimensionsUnit) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PackageDimensionsUnit(value)
	for _, existing := range AllowedPackageDimensionsUnitEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PackageDimensionsUnit", value)
}

// NewPackageDimensionsUnitFromValue returns a pointer to a valid PackageDimensionsUnit
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPackageDimensionsUnitFromValue(v string) (*PackageDimensionsUnit, error) {
	ev := PackageDimensionsUnit(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PackageDimensionsUnit: valid values are %v", v, AllowedPackageDimensionsUnitEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PackageDimensionsUnit) IsValid() bool {
	for _, existing := range AllowedPackageDimensionsUnitEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PackageDimensionsUnit value
func (v PackageDimensionsUnit) Ptr() *PackageDimensionsUnit {
	return &v
}

type NullablePackageDimensionsUnit struct {
	value *PackageDimensionsUnit
	isSet bool
}

func (v NullablePackageDimensionsUnit) Get() *PackageDimensionsUnit {
	return v.value
}

func (v *NullablePackageDimensionsUnit) Set(val *PackageDimensionsUnit) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageDimensionsUnit) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageDimensionsUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageDimensionsUnit(val *PackageDimensionsUnit) *NullablePackageDimensionsUnit {
	return &NullablePackageDimensionsUnit{value: val, isSet: true}
}

func (v NullablePackageDimensionsUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageDimensionsUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

