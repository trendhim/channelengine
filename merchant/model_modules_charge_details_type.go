/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// ModulesChargeDetailsType the model 'ModulesChargeDetailsType'
type ModulesChargeDetailsType string

// List of ModulesChargeDetailsType
const (
	MODULESCHARGEDETAILSTYPE_FREIGHT ModulesChargeDetailsType = "FREIGHT"
	MODULESCHARGEDETAILSTYPE_PACKING ModulesChargeDetailsType = "PACKING"
	MODULESCHARGEDETAILSTYPE_DUTY ModulesChargeDetailsType = "DUTY"
	MODULESCHARGEDETAILSTYPE_SERVICE ModulesChargeDetailsType = "SERVICE"
	MODULESCHARGEDETAILSTYPE_SMALL_ORDER ModulesChargeDetailsType = "SMALL_ORDER"
	MODULESCHARGEDETAILSTYPE_INSURANCE_PLACEMENT_COST ModulesChargeDetailsType = "INSURANCE_PLACEMENT_COST"
	MODULESCHARGEDETAILSTYPE_INSURANCE_FEE ModulesChargeDetailsType = "INSURANCE_FEE"
	MODULESCHARGEDETAILSTYPE_SPECIAL_HANDLING_SERVICE ModulesChargeDetailsType = "SPECIAL_HANDLING_SERVICE"
	MODULESCHARGEDETAILSTYPE_COLLECTION_AND_RECYCLING_SERVICE ModulesChargeDetailsType = "COLLECTION_AND_RECYCLING_SERVICE"
	MODULESCHARGEDETAILSTYPE_ENVIRONMENTAL_PROTECTION_SERVICE ModulesChargeDetailsType = "ENVIRONMENTAL_PROTECTION_SERVICE"
	MODULESCHARGEDETAILSTYPE_TAX_COLLECTED_AT_SOURCE ModulesChargeDetailsType = "TAX_COLLECTED_AT_SOURCE"
)

// All allowed values of ModulesChargeDetailsType enum
var AllowedModulesChargeDetailsTypeEnumValues = []ModulesChargeDetailsType{
	"FREIGHT",
	"PACKING",
	"DUTY",
	"SERVICE",
	"SMALL_ORDER",
	"INSURANCE_PLACEMENT_COST",
	"INSURANCE_FEE",
	"SPECIAL_HANDLING_SERVICE",
	"COLLECTION_AND_RECYCLING_SERVICE",
	"ENVIRONMENTAL_PROTECTION_SERVICE",
	"TAX_COLLECTED_AT_SOURCE",
}

func (v *ModulesChargeDetailsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModulesChargeDetailsType(value)
	for _, existing := range AllowedModulesChargeDetailsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModulesChargeDetailsType", value)
}

// NewModulesChargeDetailsTypeFromValue returns a pointer to a valid ModulesChargeDetailsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModulesChargeDetailsTypeFromValue(v string) (*ModulesChargeDetailsType, error) {
	ev := ModulesChargeDetailsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModulesChargeDetailsType: valid values are %v", v, AllowedModulesChargeDetailsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModulesChargeDetailsType) IsValid() bool {
	for _, existing := range AllowedModulesChargeDetailsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ModulesChargeDetailsType value
func (v ModulesChargeDetailsType) Ptr() *ModulesChargeDetailsType {
	return &v
}

type NullableModulesChargeDetailsType struct {
	value *ModulesChargeDetailsType
	isSet bool
}

func (v NullableModulesChargeDetailsType) Get() *ModulesChargeDetailsType {
	return v.value
}

func (v *NullableModulesChargeDetailsType) Set(val *ModulesChargeDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableModulesChargeDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableModulesChargeDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModulesChargeDetailsType(val *ModulesChargeDetailsType) *NullableModulesChargeDetailsType {
	return &NullableModulesChargeDetailsType{value: val, isSet: true}
}

func (v NullableModulesChargeDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModulesChargeDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

