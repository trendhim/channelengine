/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// VatRateType the model 'VatRateType'
type VatRateType string

// List of VatRateType
const (
	VATRATETYPE_STANDARD VatRateType = "STANDARD"
	VATRATETYPE_REDUCED VatRateType = "REDUCED"
	VATRATETYPE_SUPER_REDUCED VatRateType = "SUPER_REDUCED"
	VATRATETYPE_EXEMPT VatRateType = "EXEMPT"
)

// All allowed values of VatRateType enum
var AllowedVatRateTypeEnumValues = []VatRateType{
	"STANDARD",
	"REDUCED",
	"SUPER_REDUCED",
	"EXEMPT",
}

func (v *VatRateType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VatRateType(value)
	for _, existing := range AllowedVatRateTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VatRateType", value)
}

// NewVatRateTypeFromValue returns a pointer to a valid VatRateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVatRateTypeFromValue(v string) (*VatRateType, error) {
	ev := VatRateType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VatRateType: valid values are %v", v, AllowedVatRateTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VatRateType) IsValid() bool {
	for _, existing := range AllowedVatRateTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VatRateType value
func (v VatRateType) Ptr() *VatRateType {
	return &v
}

type NullableVatRateType struct {
	value *VatRateType
	isSet bool
}

func (v NullableVatRateType) Get() *VatRateType {
	return v.value
}

func (v *NullableVatRateType) Set(val *VatRateType) {
	v.value = val
	v.isSet = true
}

func (v NullableVatRateType) IsSet() bool {
	return v.isSet
}

func (v *NullableVatRateType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVatRateType(val *VatRateType) *NullableVatRateType {
	return &NullableVatRateType{value: val, isSet: true}
}

func (v NullableVatRateType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVatRateType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

