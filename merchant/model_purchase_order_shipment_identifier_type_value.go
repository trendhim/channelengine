/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// PurchaseOrderShipmentIdentifierTypeValue the model 'PurchaseOrderShipmentIdentifierTypeValue'
type PurchaseOrderShipmentIdentifierTypeValue string

// List of PurchaseOrderShipmentIdentifierTypeValue
const (
	PURCHASEORDERSHIPMENTIDENTIFIERTYPEVALUE_MERCHANT_SHIPMENT_NO PurchaseOrderShipmentIdentifierTypeValue = "MERCHANT_SHIPMENT_NO"
	PURCHASEORDERSHIPMENTIDENTIFIERTYPEVALUE_CHANNEL_PURCHASE_ORDER_NO PurchaseOrderShipmentIdentifierTypeValue = "CHANNEL_PURCHASE_ORDER_NO"
	PURCHASEORDERSHIPMENTIDENTIFIERTYPEVALUE_MERCHANT_PURCHASE_ORDER_NO PurchaseOrderShipmentIdentifierTypeValue = "MERCHANT_PURCHASE_ORDER_NO"
)

// All allowed values of PurchaseOrderShipmentIdentifierTypeValue enum
var AllowedPurchaseOrderShipmentIdentifierTypeValueEnumValues = []PurchaseOrderShipmentIdentifierTypeValue{
	"MERCHANT_SHIPMENT_NO",
	"CHANNEL_PURCHASE_ORDER_NO",
	"MERCHANT_PURCHASE_ORDER_NO",
}

func (v *PurchaseOrderShipmentIdentifierTypeValue) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PurchaseOrderShipmentIdentifierTypeValue(value)
	for _, existing := range AllowedPurchaseOrderShipmentIdentifierTypeValueEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PurchaseOrderShipmentIdentifierTypeValue", value)
}

// NewPurchaseOrderShipmentIdentifierTypeValueFromValue returns a pointer to a valid PurchaseOrderShipmentIdentifierTypeValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPurchaseOrderShipmentIdentifierTypeValueFromValue(v string) (*PurchaseOrderShipmentIdentifierTypeValue, error) {
	ev := PurchaseOrderShipmentIdentifierTypeValue(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PurchaseOrderShipmentIdentifierTypeValue: valid values are %v", v, AllowedPurchaseOrderShipmentIdentifierTypeValueEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PurchaseOrderShipmentIdentifierTypeValue) IsValid() bool {
	for _, existing := range AllowedPurchaseOrderShipmentIdentifierTypeValueEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PurchaseOrderShipmentIdentifierTypeValue value
func (v PurchaseOrderShipmentIdentifierTypeValue) Ptr() *PurchaseOrderShipmentIdentifierTypeValue {
	return &v
}

type NullablePurchaseOrderShipmentIdentifierTypeValue struct {
	value *PurchaseOrderShipmentIdentifierTypeValue
	isSet bool
}

func (v NullablePurchaseOrderShipmentIdentifierTypeValue) Get() *PurchaseOrderShipmentIdentifierTypeValue {
	return v.value
}

func (v *NullablePurchaseOrderShipmentIdentifierTypeValue) Set(val *PurchaseOrderShipmentIdentifierTypeValue) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseOrderShipmentIdentifierTypeValue) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseOrderShipmentIdentifierTypeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseOrderShipmentIdentifierTypeValue(val *PurchaseOrderShipmentIdentifierTypeValue) *NullablePurchaseOrderShipmentIdentifierTypeValue {
	return &NullablePurchaseOrderShipmentIdentifierTypeValue{value: val, isSet: true}
}

func (v NullablePurchaseOrderShipmentIdentifierTypeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseOrderShipmentIdentifierTypeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

