/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
)

// checks if the MerchantWebhookResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MerchantWebhookResponse{}

// MerchantWebhookResponse struct for MerchantWebhookResponse
type MerchantWebhookResponse struct {
	Name NullableString `json:"Name,omitempty"`
	Url NullableString `json:"Url,omitempty"`
	IsActive *bool `json:"IsActive,omitempty"`
	Events []WebhookEventType `json:"Events,omitempty"`
}

// NewMerchantWebhookResponse instantiates a new MerchantWebhookResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerchantWebhookResponse() *MerchantWebhookResponse {
	this := MerchantWebhookResponse{}
	return &this
}

// NewMerchantWebhookResponseWithDefaults instantiates a new MerchantWebhookResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerchantWebhookResponseWithDefaults() *MerchantWebhookResponse {
	this := MerchantWebhookResponse{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MerchantWebhookResponse) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MerchantWebhookResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MerchantWebhookResponse) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MerchantWebhookResponse) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MerchantWebhookResponse) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MerchantWebhookResponse) UnsetName() {
	o.Name.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MerchantWebhookResponse) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MerchantWebhookResponse) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *MerchantWebhookResponse) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *MerchantWebhookResponse) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *MerchantWebhookResponse) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *MerchantWebhookResponse) UnsetUrl() {
	o.Url.Unset()
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *MerchantWebhookResponse) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantWebhookResponse) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *MerchantWebhookResponse) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *MerchantWebhookResponse) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetEvents returns the Events field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MerchantWebhookResponse) GetEvents() []WebhookEventType {
	if o == nil {
		var ret []WebhookEventType
		return ret
	}
	return o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MerchantWebhookResponse) GetEventsOk() ([]WebhookEventType, bool) {
	if o == nil || IsNil(o.Events) {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *MerchantWebhookResponse) HasEvents() bool {
	if o != nil && IsNil(o.Events) {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []WebhookEventType and assigns it to the Events field.
func (o *MerchantWebhookResponse) SetEvents(v []WebhookEventType) {
	o.Events = v
}

func (o MerchantWebhookResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MerchantWebhookResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if o.Url.IsSet() {
		toSerialize["Url"] = o.Url.Get()
	}
	if !IsNil(o.IsActive) {
		toSerialize["IsActive"] = o.IsActive
	}
	if o.Events != nil {
		toSerialize["Events"] = o.Events
	}
	return toSerialize, nil
}

type NullableMerchantWebhookResponse struct {
	value *MerchantWebhookResponse
	isSet bool
}

func (v NullableMerchantWebhookResponse) Get() *MerchantWebhookResponse {
	return v.value
}

func (v *NullableMerchantWebhookResponse) Set(val *MerchantWebhookResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchantWebhookResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchantWebhookResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchantWebhookResponse(val *MerchantWebhookResponse) *NullableMerchantWebhookResponse {
	return &NullableMerchantWebhookResponse{value: val, isSet: true}
}

func (v NullableMerchantWebhookResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchantWebhookResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


