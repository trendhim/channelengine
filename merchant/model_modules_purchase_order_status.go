/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// ModulesPurchaseOrderStatus the model 'ModulesPurchaseOrderStatus'
type ModulesPurchaseOrderStatus string

// List of ModulesPurchaseOrderStatus
const (
	MODULESPURCHASEORDERSTATUS_NEW ModulesPurchaseOrderStatus = "NEW"
	MODULESPURCHASEORDERSTATUS_IN_PROGRESS ModulesPurchaseOrderStatus = "IN_PROGRESS"
	MODULESPURCHASEORDERSTATUS_CLOSED ModulesPurchaseOrderStatus = "CLOSED"
)

// All allowed values of ModulesPurchaseOrderStatus enum
var AllowedModulesPurchaseOrderStatusEnumValues = []ModulesPurchaseOrderStatus{
	"NEW",
	"IN_PROGRESS",
	"CLOSED",
}

func (v *ModulesPurchaseOrderStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModulesPurchaseOrderStatus(value)
	for _, existing := range AllowedModulesPurchaseOrderStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModulesPurchaseOrderStatus", value)
}

// NewModulesPurchaseOrderStatusFromValue returns a pointer to a valid ModulesPurchaseOrderStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModulesPurchaseOrderStatusFromValue(v string) (*ModulesPurchaseOrderStatus, error) {
	ev := ModulesPurchaseOrderStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModulesPurchaseOrderStatus: valid values are %v", v, AllowedModulesPurchaseOrderStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModulesPurchaseOrderStatus) IsValid() bool {
	for _, existing := range AllowedModulesPurchaseOrderStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ModulesPurchaseOrderStatus value
func (v ModulesPurchaseOrderStatus) Ptr() *ModulesPurchaseOrderStatus {
	return &v
}

type NullableModulesPurchaseOrderStatus struct {
	value *ModulesPurchaseOrderStatus
	isSet bool
}

func (v NullableModulesPurchaseOrderStatus) Get() *ModulesPurchaseOrderStatus {
	return v.value
}

func (v *NullableModulesPurchaseOrderStatus) Set(val *ModulesPurchaseOrderStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableModulesPurchaseOrderStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableModulesPurchaseOrderStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModulesPurchaseOrderStatus(val *ModulesPurchaseOrderStatus) *NullableModulesPurchaseOrderStatus {
	return &NullableModulesPurchaseOrderStatus{value: val, isSet: true}
}

func (v NullableModulesPurchaseOrderStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModulesPurchaseOrderStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

