/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// FreezingActionRequest the model 'FreezingActionRequest'
type FreezingActionRequest string

// List of FreezingActionRequest
const (
	FREEZINGACTIONREQUEST_FREEZE FreezingActionRequest = "FREEZE"
	FREEZINGACTIONREQUEST_UNFREEZE FreezingActionRequest = "UNFREEZE"
)

// All allowed values of FreezingActionRequest enum
var AllowedFreezingActionRequestEnumValues = []FreezingActionRequest{
	"FREEZE",
	"UNFREEZE",
}

func (v *FreezingActionRequest) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FreezingActionRequest(value)
	for _, existing := range AllowedFreezingActionRequestEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FreezingActionRequest", value)
}

// NewFreezingActionRequestFromValue returns a pointer to a valid FreezingActionRequest
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFreezingActionRequestFromValue(v string) (*FreezingActionRequest, error) {
	ev := FreezingActionRequest(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FreezingActionRequest: valid values are %v", v, AllowedFreezingActionRequestEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FreezingActionRequest) IsValid() bool {
	for _, existing := range AllowedFreezingActionRequestEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FreezingActionRequest value
func (v FreezingActionRequest) Ptr() *FreezingActionRequest {
	return &v
}

type NullableFreezingActionRequest struct {
	value *FreezingActionRequest
	isSet bool
}

func (v NullableFreezingActionRequest) Get() *FreezingActionRequest {
	return v.value
}

func (v *NullableFreezingActionRequest) Set(val *FreezingActionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableFreezingActionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableFreezingActionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFreezingActionRequest(val *FreezingActionRequest) *NullableFreezingActionRequest {
	return &NullableFreezingActionRequest{value: val, isSet: true}
}

func (v NullableFreezingActionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFreezingActionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

