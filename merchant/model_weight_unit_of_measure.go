/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// WeightUnitOfMeasure the model 'WeightUnitOfMeasure'
type WeightUnitOfMeasure string

// List of WeightUnitOfMeasure
const (
	WEIGHTUNITOFMEASURE_GRAMS WeightUnitOfMeasure = "GRAMS"
	WEIGHTUNITOFMEASURE_KILOGRAMS WeightUnitOfMeasure = "KILOGRAMS"
	WEIGHTUNITOFMEASURE_OUNCES WeightUnitOfMeasure = "OUNCES"
	WEIGHTUNITOFMEASURE_POUNDS WeightUnitOfMeasure = "POUNDS"
)

// All allowed values of WeightUnitOfMeasure enum
var AllowedWeightUnitOfMeasureEnumValues = []WeightUnitOfMeasure{
	"GRAMS",
	"KILOGRAMS",
	"OUNCES",
	"POUNDS",
}

func (v *WeightUnitOfMeasure) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WeightUnitOfMeasure(value)
	for _, existing := range AllowedWeightUnitOfMeasureEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WeightUnitOfMeasure", value)
}

// NewWeightUnitOfMeasureFromValue returns a pointer to a valid WeightUnitOfMeasure
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWeightUnitOfMeasureFromValue(v string) (*WeightUnitOfMeasure, error) {
	ev := WeightUnitOfMeasure(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WeightUnitOfMeasure: valid values are %v", v, AllowedWeightUnitOfMeasureEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WeightUnitOfMeasure) IsValid() bool {
	for _, existing := range AllowedWeightUnitOfMeasureEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WeightUnitOfMeasure value
func (v WeightUnitOfMeasure) Ptr() *WeightUnitOfMeasure {
	return &v
}

type NullableWeightUnitOfMeasure struct {
	value *WeightUnitOfMeasure
	isSet bool
}

func (v NullableWeightUnitOfMeasure) Get() *WeightUnitOfMeasure {
	return v.value
}

func (v *NullableWeightUnitOfMeasure) Set(val *WeightUnitOfMeasure) {
	v.value = val
	v.isSet = true
}

func (v NullableWeightUnitOfMeasure) IsSet() bool {
	return v.isSet
}

func (v *NullableWeightUnitOfMeasure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWeightUnitOfMeasure(val *WeightUnitOfMeasure) *NullableWeightUnitOfMeasure {
	return &NullableWeightUnitOfMeasure{value: val, isSet: true}
}

func (v NullableWeightUnitOfMeasure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWeightUnitOfMeasure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

