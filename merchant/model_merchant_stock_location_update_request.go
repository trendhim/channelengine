/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
)

// checks if the MerchantStockLocationUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MerchantStockLocationUpdateRequest{}

// MerchantStockLocationUpdateRequest struct for MerchantStockLocationUpdateRequest
type MerchantStockLocationUpdateRequest struct {
	// The stock of the product. Should not be negative.
	Stock *int32 `json:"Stock,omitempty"`
	// The stock location id of updated stok.  If not provided stock from default stock location will be updated.
	StockLocationId NullableInt32 `json:"StockLocationId,omitempty"`
}

// NewMerchantStockLocationUpdateRequest instantiates a new MerchantStockLocationUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerchantStockLocationUpdateRequest() *MerchantStockLocationUpdateRequest {
	this := MerchantStockLocationUpdateRequest{}
	return &this
}

// NewMerchantStockLocationUpdateRequestWithDefaults instantiates a new MerchantStockLocationUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerchantStockLocationUpdateRequestWithDefaults() *MerchantStockLocationUpdateRequest {
	this := MerchantStockLocationUpdateRequest{}
	return &this
}

// GetStock returns the Stock field value if set, zero value otherwise.
func (o *MerchantStockLocationUpdateRequest) GetStock() int32 {
	if o == nil || IsNil(o.Stock) {
		var ret int32
		return ret
	}
	return *o.Stock
}

// GetStockOk returns a tuple with the Stock field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantStockLocationUpdateRequest) GetStockOk() (*int32, bool) {
	if o == nil || IsNil(o.Stock) {
		return nil, false
	}
	return o.Stock, true
}

// HasStock returns a boolean if a field has been set.
func (o *MerchantStockLocationUpdateRequest) HasStock() bool {
	if o != nil && !IsNil(o.Stock) {
		return true
	}

	return false
}

// SetStock gets a reference to the given int32 and assigns it to the Stock field.
func (o *MerchantStockLocationUpdateRequest) SetStock(v int32) {
	o.Stock = &v
}

// GetStockLocationId returns the StockLocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MerchantStockLocationUpdateRequest) GetStockLocationId() int32 {
	if o == nil || IsNil(o.StockLocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.StockLocationId.Get()
}

// GetStockLocationIdOk returns a tuple with the StockLocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MerchantStockLocationUpdateRequest) GetStockLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StockLocationId.Get(), o.StockLocationId.IsSet()
}

// HasStockLocationId returns a boolean if a field has been set.
func (o *MerchantStockLocationUpdateRequest) HasStockLocationId() bool {
	if o != nil && o.StockLocationId.IsSet() {
		return true
	}

	return false
}

// SetStockLocationId gets a reference to the given NullableInt32 and assigns it to the StockLocationId field.
func (o *MerchantStockLocationUpdateRequest) SetStockLocationId(v int32) {
	o.StockLocationId.Set(&v)
}
// SetStockLocationIdNil sets the value for StockLocationId to be an explicit nil
func (o *MerchantStockLocationUpdateRequest) SetStockLocationIdNil() {
	o.StockLocationId.Set(nil)
}

// UnsetStockLocationId ensures that no value is present for StockLocationId, not even an explicit nil
func (o *MerchantStockLocationUpdateRequest) UnsetStockLocationId() {
	o.StockLocationId.Unset()
}

func (o MerchantStockLocationUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MerchantStockLocationUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Stock) {
		toSerialize["Stock"] = o.Stock
	}
	if o.StockLocationId.IsSet() {
		toSerialize["StockLocationId"] = o.StockLocationId.Get()
	}
	return toSerialize, nil
}

type NullableMerchantStockLocationUpdateRequest struct {
	value *MerchantStockLocationUpdateRequest
	isSet bool
}

func (v NullableMerchantStockLocationUpdateRequest) Get() *MerchantStockLocationUpdateRequest {
	return v.value
}

func (v *NullableMerchantStockLocationUpdateRequest) Set(val *MerchantStockLocationUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchantStockLocationUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchantStockLocationUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchantStockLocationUpdateRequest(val *MerchantStockLocationUpdateRequest) *NullableMerchantStockLocationUpdateRequest {
	return &NullableMerchantStockLocationUpdateRequest{value: val, isSet: true}
}

func (v NullableMerchantStockLocationUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchantStockLocationUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


