/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
)

// checks if the StockUpdateResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StockUpdateResponse{}

// StockUpdateResponse struct for StockUpdateResponse
type StockUpdateResponse struct {
	Results map[string][]string `json:"Results,omitempty"`
}

// NewStockUpdateResponse instantiates a new StockUpdateResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStockUpdateResponse() *StockUpdateResponse {
	this := StockUpdateResponse{}
	return &this
}

// NewStockUpdateResponseWithDefaults instantiates a new StockUpdateResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStockUpdateResponseWithDefaults() *StockUpdateResponse {
	this := StockUpdateResponse{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StockUpdateResponse) GetResults() map[string][]string {
	if o == nil {
		var ret map[string][]string
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StockUpdateResponse) GetResultsOk() (*map[string][]string, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return &o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *StockUpdateResponse) HasResults() bool {
	if o != nil && IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given map[string][]string and assigns it to the Results field.
func (o *StockUpdateResponse) SetResults(v map[string][]string) {
	o.Results = v
}

func (o StockUpdateResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StockUpdateResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Results != nil {
		toSerialize["Results"] = o.Results
	}
	return toSerialize, nil
}

type NullableStockUpdateResponse struct {
	value *StockUpdateResponse
	isSet bool
}

func (v NullableStockUpdateResponse) Get() *StockUpdateResponse {
	return v.value
}

func (v *NullableStockUpdateResponse) Set(val *StockUpdateResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableStockUpdateResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableStockUpdateResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStockUpdateResponse(val *StockUpdateResponse) *NullableStockUpdateResponse {
	return &NullableStockUpdateResponse{value: val, isSet: true}
}

func (v NullableStockUpdateResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStockUpdateResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


