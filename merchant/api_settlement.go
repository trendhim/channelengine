/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"reflect"
	"time"
)


// SettlementAPIService SettlementAPI service
type SettlementAPIService service

type SettlementAPISettlementGetByFilterRequest struct {
	ctx context.Context
	ApiService *SettlementAPIService
	channelIds *[]int32
	fromStartDate *time.Time
	toStartDate *time.Time
	fromEndDate *time.Time
	toEndDate *time.Time
	fromCreateDate *time.Time
	toCreateDate *time.Time
	fromUpdateDate *time.Time
	toUpdateDate *time.Time
	page *int32
}

// Filter on channel id list.
func (r SettlementAPISettlementGetByFilterRequest) ChannelIds(channelIds []int32) SettlementAPISettlementGetByFilterRequest {
	r.channelIds = &channelIds
	return r
}

// Filter on the start date of the settlement in ChannelEngine, until this date. This date is exclusive.
func (r SettlementAPISettlementGetByFilterRequest) FromStartDate(fromStartDate time.Time) SettlementAPISettlementGetByFilterRequest {
	r.fromStartDate = &fromStartDate
	return r
}

// Filter on the start date of the settlement in ChannelEngine, until this date. This date is exclusive.
func (r SettlementAPISettlementGetByFilterRequest) ToStartDate(toStartDate time.Time) SettlementAPISettlementGetByFilterRequest {
	r.toStartDate = &toStartDate
	return r
}

// Filter on the end date of the settlement in ChannelEngine, starting from this date. This date is inclusive.
func (r SettlementAPISettlementGetByFilterRequest) FromEndDate(fromEndDate time.Time) SettlementAPISettlementGetByFilterRequest {
	r.fromEndDate = &fromEndDate
	return r
}

// Filter on the end date of the settlement in ChannelEngine, until this date. This date is exclusive.
func (r SettlementAPISettlementGetByFilterRequest) ToEndDate(toEndDate time.Time) SettlementAPISettlementGetByFilterRequest {
	r.toEndDate = &toEndDate
	return r
}

// Filter on the create date of the settlement in ChannelEngine, until this date. This date is exclusive.
func (r SettlementAPISettlementGetByFilterRequest) FromCreateDate(fromCreateDate time.Time) SettlementAPISettlementGetByFilterRequest {
	r.fromCreateDate = &fromCreateDate
	return r
}

// Filter on the create date of the settlement in ChannelEngine, until this date. This date is exclusive.
func (r SettlementAPISettlementGetByFilterRequest) ToCreateDate(toCreateDate time.Time) SettlementAPISettlementGetByFilterRequest {
	r.toCreateDate = &toCreateDate
	return r
}

// Filter on the update date of the settlement in ChannelEngine, starting from this date. This date is inclusive.
func (r SettlementAPISettlementGetByFilterRequest) FromUpdateDate(fromUpdateDate time.Time) SettlementAPISettlementGetByFilterRequest {
	r.fromUpdateDate = &fromUpdateDate
	return r
}

// Filter on the update date of the settlement in ChannelEngine, until this date. This date is exclusive.
func (r SettlementAPISettlementGetByFilterRequest) ToUpdateDate(toUpdateDate time.Time) SettlementAPISettlementGetByFilterRequest {
	r.toUpdateDate = &toUpdateDate
	return r
}

// The page to filter on. Starts at 1.
func (r SettlementAPISettlementGetByFilterRequest) Page(page int32) SettlementAPISettlementGetByFilterRequest {
	r.page = &page
	return r
}

func (r SettlementAPISettlementGetByFilterRequest) Execute() (*CollectionOfMerchantReportsResponse, *http.Response, error) {
	return r.ApiService.SettlementGetByFilterExecute(r)
}

/*
SettlementGetByFilter Gets settlements

Gets the settlements based on the available filters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return SettlementAPISettlementGetByFilterRequest
*/
func (a *SettlementAPIService) SettlementGetByFilter(ctx context.Context) SettlementAPISettlementGetByFilterRequest {
	return SettlementAPISettlementGetByFilterRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfMerchantReportsResponse
func (a *SettlementAPIService) SettlementGetByFilterExecute(r SettlementAPISettlementGetByFilterRequest) (*CollectionOfMerchantReportsResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionOfMerchantReportsResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SettlementAPIService.SettlementGetByFilter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/settlements"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.channelIds != nil {
		t := *r.channelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", t, "multi")
		}
	}
	if r.fromStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromStartDate", r.fromStartDate, "")
	}
	if r.toStartDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toStartDate", r.toStartDate, "")
	}
	if r.fromEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromEndDate", r.fromEndDate, "")
	}
	if r.toEndDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toEndDate", r.toEndDate, "")
	}
	if r.fromCreateDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromCreateDate", r.fromCreateDate, "")
	}
	if r.toCreateDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toCreateDate", r.toCreateDate, "")
	}
	if r.fromUpdateDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromUpdateDate", r.fromUpdateDate, "")
	}
	if r.toUpdateDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toUpdateDate", r.toUpdateDate, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
