/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MerchantStockPriceUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MerchantStockPriceUpdateRequest{}

// MerchantStockPriceUpdateRequest struct for MerchantStockPriceUpdateRequest
type MerchantStockPriceUpdateRequest struct {
	// The unique product reference used by the Merchant (sku).
	MerchantProductNo string `json:"MerchantProductNo"`
	// The stock of the product. Should not be negative.
	Stock NullableInt32 `json:"Stock,omitempty"`
	// The price of the product. Should not be negative.
	Price NullableFloat32 `json:"Price,omitempty"`
	// The stock location id of the updated stock. If not provided, the stock from the default stock location will be updated.
	StockLocationId NullableInt32 `json:"StockLocationId,omitempty"`
}

type _MerchantStockPriceUpdateRequest MerchantStockPriceUpdateRequest

// NewMerchantStockPriceUpdateRequest instantiates a new MerchantStockPriceUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerchantStockPriceUpdateRequest(merchantProductNo string) *MerchantStockPriceUpdateRequest {
	this := MerchantStockPriceUpdateRequest{}
	this.MerchantProductNo = merchantProductNo
	return &this
}

// NewMerchantStockPriceUpdateRequestWithDefaults instantiates a new MerchantStockPriceUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerchantStockPriceUpdateRequestWithDefaults() *MerchantStockPriceUpdateRequest {
	this := MerchantStockPriceUpdateRequest{}
	return &this
}

// GetMerchantProductNo returns the MerchantProductNo field value
func (o *MerchantStockPriceUpdateRequest) GetMerchantProductNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantProductNo
}

// GetMerchantProductNoOk returns a tuple with the MerchantProductNo field value
// and a boolean to check if the value has been set.
func (o *MerchantStockPriceUpdateRequest) GetMerchantProductNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantProductNo, true
}

// SetMerchantProductNo sets field value
func (o *MerchantStockPriceUpdateRequest) SetMerchantProductNo(v string) {
	o.MerchantProductNo = v
}

// GetStock returns the Stock field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MerchantStockPriceUpdateRequest) GetStock() int32 {
	if o == nil || IsNil(o.Stock.Get()) {
		var ret int32
		return ret
	}
	return *o.Stock.Get()
}

// GetStockOk returns a tuple with the Stock field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MerchantStockPriceUpdateRequest) GetStockOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stock.Get(), o.Stock.IsSet()
}

// HasStock returns a boolean if a field has been set.
func (o *MerchantStockPriceUpdateRequest) HasStock() bool {
	if o != nil && o.Stock.IsSet() {
		return true
	}

	return false
}

// SetStock gets a reference to the given NullableInt32 and assigns it to the Stock field.
func (o *MerchantStockPriceUpdateRequest) SetStock(v int32) {
	o.Stock.Set(&v)
}
// SetStockNil sets the value for Stock to be an explicit nil
func (o *MerchantStockPriceUpdateRequest) SetStockNil() {
	o.Stock.Set(nil)
}

// UnsetStock ensures that no value is present for Stock, not even an explicit nil
func (o *MerchantStockPriceUpdateRequest) UnsetStock() {
	o.Stock.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MerchantStockPriceUpdateRequest) GetPrice() float32 {
	if o == nil || IsNil(o.Price.Get()) {
		var ret float32
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MerchantStockPriceUpdateRequest) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *MerchantStockPriceUpdateRequest) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat32 and assigns it to the Price field.
func (o *MerchantStockPriceUpdateRequest) SetPrice(v float32) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *MerchantStockPriceUpdateRequest) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *MerchantStockPriceUpdateRequest) UnsetPrice() {
	o.Price.Unset()
}

// GetStockLocationId returns the StockLocationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MerchantStockPriceUpdateRequest) GetStockLocationId() int32 {
	if o == nil || IsNil(o.StockLocationId.Get()) {
		var ret int32
		return ret
	}
	return *o.StockLocationId.Get()
}

// GetStockLocationIdOk returns a tuple with the StockLocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MerchantStockPriceUpdateRequest) GetStockLocationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.StockLocationId.Get(), o.StockLocationId.IsSet()
}

// HasStockLocationId returns a boolean if a field has been set.
func (o *MerchantStockPriceUpdateRequest) HasStockLocationId() bool {
	if o != nil && o.StockLocationId.IsSet() {
		return true
	}

	return false
}

// SetStockLocationId gets a reference to the given NullableInt32 and assigns it to the StockLocationId field.
func (o *MerchantStockPriceUpdateRequest) SetStockLocationId(v int32) {
	o.StockLocationId.Set(&v)
}
// SetStockLocationIdNil sets the value for StockLocationId to be an explicit nil
func (o *MerchantStockPriceUpdateRequest) SetStockLocationIdNil() {
	o.StockLocationId.Set(nil)
}

// UnsetStockLocationId ensures that no value is present for StockLocationId, not even an explicit nil
func (o *MerchantStockPriceUpdateRequest) UnsetStockLocationId() {
	o.StockLocationId.Unset()
}

func (o MerchantStockPriceUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MerchantStockPriceUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["MerchantProductNo"] = o.MerchantProductNo
	if o.Stock.IsSet() {
		toSerialize["Stock"] = o.Stock.Get()
	}
	if o.Price.IsSet() {
		toSerialize["Price"] = o.Price.Get()
	}
	if o.StockLocationId.IsSet() {
		toSerialize["StockLocationId"] = o.StockLocationId.Get()
	}
	return toSerialize, nil
}

func (o *MerchantStockPriceUpdateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"MerchantProductNo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMerchantStockPriceUpdateRequest := _MerchantStockPriceUpdateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMerchantStockPriceUpdateRequest)

	if err != nil {
		return err
	}

	*o = MerchantStockPriceUpdateRequest(varMerchantStockPriceUpdateRequest)

	return err
}

type NullableMerchantStockPriceUpdateRequest struct {
	value *MerchantStockPriceUpdateRequest
	isSet bool
}

func (v NullableMerchantStockPriceUpdateRequest) Get() *MerchantStockPriceUpdateRequest {
	return v.value
}

func (v *NullableMerchantStockPriceUpdateRequest) Set(val *MerchantStockPriceUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchantStockPriceUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchantStockPriceUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchantStockPriceUpdateRequest(val *MerchantStockPriceUpdateRequest) *NullableMerchantStockPriceUpdateRequest {
	return &NullableMerchantStockPriceUpdateRequest{value: val, isSet: true}
}

func (v NullableMerchantStockPriceUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchantStockPriceUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


