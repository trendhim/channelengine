/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// ModuleReturnStatus the model 'ModuleReturnStatus'
type ModuleReturnStatus string

// List of ModuleReturnStatus
const (
	MODULERETURNSTATUS_NEW ModuleReturnStatus = "NEW"
	MODULERETURNSTATUS_HANDLED ModuleReturnStatus = "HANDLED"
	MODULERETURNSTATUS_CANCELLED ModuleReturnStatus = "CANCELLED"
	MODULERETURNSTATUS_IN_PROGRESS ModuleReturnStatus = "IN_PROGRESS"
)

// All allowed values of ModuleReturnStatus enum
var AllowedModuleReturnStatusEnumValues = []ModuleReturnStatus{
	"NEW",
	"HANDLED",
	"CANCELLED",
	"IN_PROGRESS",
}

func (v *ModuleReturnStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModuleReturnStatus(value)
	for _, existing := range AllowedModuleReturnStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModuleReturnStatus", value)
}

// NewModuleReturnStatusFromValue returns a pointer to a valid ModuleReturnStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModuleReturnStatusFromValue(v string) (*ModuleReturnStatus, error) {
	ev := ModuleReturnStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModuleReturnStatus: valid values are %v", v, AllowedModuleReturnStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModuleReturnStatus) IsValid() bool {
	for _, existing := range AllowedModuleReturnStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ModuleReturnStatus value
func (v ModuleReturnStatus) Ptr() *ModuleReturnStatus {
	return &v
}

type NullableModuleReturnStatus struct {
	value *ModuleReturnStatus
	isSet bool
}

func (v NullableModuleReturnStatus) Get() *ModuleReturnStatus {
	return v.value
}

func (v *NullableModuleReturnStatus) Set(val *ModuleReturnStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableModuleReturnStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableModuleReturnStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModuleReturnStatus(val *ModuleReturnStatus) *NullableModuleReturnStatus {
	return &NullableModuleReturnStatus{value: val, isSet: true}
}

func (v NullableModuleReturnStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModuleReturnStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

