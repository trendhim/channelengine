/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
)

// checks if the MerchantProductBundleResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MerchantProductBundleResponse{}

// MerchantProductBundleResponse struct for MerchantProductBundleResponse
type MerchantProductBundleResponse struct {
	MerchantProductNo NullableString `json:"MerchantProductNo,omitempty"`
	Ean NullableString `json:"Ean,omitempty"`
	Name NullableString `json:"Name,omitempty"`
	Price *float32 `json:"Price,omitempty"`
	Parts []MerchantProductBundlePartResponse `json:"Parts,omitempty"`
}

// NewMerchantProductBundleResponse instantiates a new MerchantProductBundleResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerchantProductBundleResponse() *MerchantProductBundleResponse {
	this := MerchantProductBundleResponse{}
	return &this
}

// NewMerchantProductBundleResponseWithDefaults instantiates a new MerchantProductBundleResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerchantProductBundleResponseWithDefaults() *MerchantProductBundleResponse {
	this := MerchantProductBundleResponse{}
	return &this
}

// GetMerchantProductNo returns the MerchantProductNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MerchantProductBundleResponse) GetMerchantProductNo() string {
	if o == nil || IsNil(o.MerchantProductNo.Get()) {
		var ret string
		return ret
	}
	return *o.MerchantProductNo.Get()
}

// GetMerchantProductNoOk returns a tuple with the MerchantProductNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MerchantProductBundleResponse) GetMerchantProductNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MerchantProductNo.Get(), o.MerchantProductNo.IsSet()
}

// HasMerchantProductNo returns a boolean if a field has been set.
func (o *MerchantProductBundleResponse) HasMerchantProductNo() bool {
	if o != nil && o.MerchantProductNo.IsSet() {
		return true
	}

	return false
}

// SetMerchantProductNo gets a reference to the given NullableString and assigns it to the MerchantProductNo field.
func (o *MerchantProductBundleResponse) SetMerchantProductNo(v string) {
	o.MerchantProductNo.Set(&v)
}
// SetMerchantProductNoNil sets the value for MerchantProductNo to be an explicit nil
func (o *MerchantProductBundleResponse) SetMerchantProductNoNil() {
	o.MerchantProductNo.Set(nil)
}

// UnsetMerchantProductNo ensures that no value is present for MerchantProductNo, not even an explicit nil
func (o *MerchantProductBundleResponse) UnsetMerchantProductNo() {
	o.MerchantProductNo.Unset()
}

// GetEan returns the Ean field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MerchantProductBundleResponse) GetEan() string {
	if o == nil || IsNil(o.Ean.Get()) {
		var ret string
		return ret
	}
	return *o.Ean.Get()
}

// GetEanOk returns a tuple with the Ean field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MerchantProductBundleResponse) GetEanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ean.Get(), o.Ean.IsSet()
}

// HasEan returns a boolean if a field has been set.
func (o *MerchantProductBundleResponse) HasEan() bool {
	if o != nil && o.Ean.IsSet() {
		return true
	}

	return false
}

// SetEan gets a reference to the given NullableString and assigns it to the Ean field.
func (o *MerchantProductBundleResponse) SetEan(v string) {
	o.Ean.Set(&v)
}
// SetEanNil sets the value for Ean to be an explicit nil
func (o *MerchantProductBundleResponse) SetEanNil() {
	o.Ean.Set(nil)
}

// UnsetEan ensures that no value is present for Ean, not even an explicit nil
func (o *MerchantProductBundleResponse) UnsetEan() {
	o.Ean.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MerchantProductBundleResponse) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MerchantProductBundleResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MerchantProductBundleResponse) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MerchantProductBundleResponse) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MerchantProductBundleResponse) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MerchantProductBundleResponse) UnsetName() {
	o.Name.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *MerchantProductBundleResponse) GetPrice() float32 {
	if o == nil || IsNil(o.Price) {
		var ret float32
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantProductBundleResponse) GetPriceOk() (*float32, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *MerchantProductBundleResponse) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given float32 and assigns it to the Price field.
func (o *MerchantProductBundleResponse) SetPrice(v float32) {
	o.Price = &v
}

// GetParts returns the Parts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MerchantProductBundleResponse) GetParts() []MerchantProductBundlePartResponse {
	if o == nil {
		var ret []MerchantProductBundlePartResponse
		return ret
	}
	return o.Parts
}

// GetPartsOk returns a tuple with the Parts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MerchantProductBundleResponse) GetPartsOk() ([]MerchantProductBundlePartResponse, bool) {
	if o == nil || IsNil(o.Parts) {
		return nil, false
	}
	return o.Parts, true
}

// HasParts returns a boolean if a field has been set.
func (o *MerchantProductBundleResponse) HasParts() bool {
	if o != nil && !IsNil(o.Parts) {
		return true
	}

	return false
}

// SetParts gets a reference to the given []MerchantProductBundlePartResponse and assigns it to the Parts field.
func (o *MerchantProductBundleResponse) SetParts(v []MerchantProductBundlePartResponse) {
	o.Parts = v
}

func (o MerchantProductBundleResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MerchantProductBundleResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.MerchantProductNo.IsSet() {
		toSerialize["MerchantProductNo"] = o.MerchantProductNo.Get()
	}
	if o.Ean.IsSet() {
		toSerialize["Ean"] = o.Ean.Get()
	}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if !IsNil(o.Price) {
		toSerialize["Price"] = o.Price
	}
	if o.Parts != nil {
		toSerialize["Parts"] = o.Parts
	}
	return toSerialize, nil
}

type NullableMerchantProductBundleResponse struct {
	value *MerchantProductBundleResponse
	isSet bool
}

func (v NullableMerchantProductBundleResponse) Get() *MerchantProductBundleResponse {
	return v.value
}

func (v *NullableMerchantProductBundleResponse) Set(val *MerchantProductBundleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchantProductBundleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchantProductBundleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchantProductBundleResponse(val *MerchantProductBundleResponse) *NullableMerchantProductBundleResponse {
	return &NullableMerchantProductBundleResponse{value: val, isSet: true}
}

func (v NullableMerchantProductBundleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchantProductBundleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


