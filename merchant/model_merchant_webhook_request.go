/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MerchantWebhookRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MerchantWebhookRequest{}

// MerchantWebhookRequest struct for MerchantWebhookRequest
type MerchantWebhookRequest struct {
	// The unique name of a webhook.
	Name string `json:"Name"`
	// The callback URL used by a webhook. E.g.: https://test-store.com/callback.
	Url string `json:"Url"`
	// Determines if a webhook is active, and callbacks should proceed.
	IsActive *bool `json:"IsActive,omitempty"`
	// The events supported by the webhook.
	Events []WebhookEventType `json:"Events"`
}

type _MerchantWebhookRequest MerchantWebhookRequest

// NewMerchantWebhookRequest instantiates a new MerchantWebhookRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerchantWebhookRequest(name string, url string, events []WebhookEventType) *MerchantWebhookRequest {
	this := MerchantWebhookRequest{}
	this.Name = name
	this.Url = url
	this.Events = events
	return &this
}

// NewMerchantWebhookRequestWithDefaults instantiates a new MerchantWebhookRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerchantWebhookRequestWithDefaults() *MerchantWebhookRequest {
	this := MerchantWebhookRequest{}
	return &this
}

// GetName returns the Name field value
func (o *MerchantWebhookRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *MerchantWebhookRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *MerchantWebhookRequest) SetName(v string) {
	o.Name = v
}

// GetUrl returns the Url field value
func (o *MerchantWebhookRequest) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *MerchantWebhookRequest) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *MerchantWebhookRequest) SetUrl(v string) {
	o.Url = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *MerchantWebhookRequest) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantWebhookRequest) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *MerchantWebhookRequest) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *MerchantWebhookRequest) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetEvents returns the Events field value
func (o *MerchantWebhookRequest) GetEvents() []WebhookEventType {
	if o == nil {
		var ret []WebhookEventType
		return ret
	}

	return o.Events
}

// GetEventsOk returns a tuple with the Events field value
// and a boolean to check if the value has been set.
func (o *MerchantWebhookRequest) GetEventsOk() ([]WebhookEventType, bool) {
	if o == nil {
		return nil, false
	}
	return o.Events, true
}

// SetEvents sets field value
func (o *MerchantWebhookRequest) SetEvents(v []WebhookEventType) {
	o.Events = v
}

func (o MerchantWebhookRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MerchantWebhookRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["Name"] = o.Name
	toSerialize["Url"] = o.Url
	if !IsNil(o.IsActive) {
		toSerialize["IsActive"] = o.IsActive
	}
	toSerialize["Events"] = o.Events
	return toSerialize, nil
}

func (o *MerchantWebhookRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"Name",
		"Url",
		"Events",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMerchantWebhookRequest := _MerchantWebhookRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	// decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMerchantWebhookRequest)

	if err != nil {
		return err
	}

	*o = MerchantWebhookRequest(varMerchantWebhookRequest)

	return err
}

type NullableMerchantWebhookRequest struct {
	value *MerchantWebhookRequest
	isSet bool
}

func (v NullableMerchantWebhookRequest) Get() *MerchantWebhookRequest {
	return v.value
}

func (v *NullableMerchantWebhookRequest) Set(val *MerchantWebhookRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchantWebhookRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchantWebhookRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchantWebhookRequest(val *MerchantWebhookRequest) *NullableMerchantWebhookRequest {
	return &NullableMerchantWebhookRequest{value: val, isSet: true}
}

func (v NullableMerchantWebhookRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchantWebhookRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


