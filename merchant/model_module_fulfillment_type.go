/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// ModuleFulfillmentType the model 'ModuleFulfillmentType'
type ModuleFulfillmentType string

// List of ModuleFulfillmentType
const (
	MODULEFULFILLMENTTYPE_ALL ModuleFulfillmentType = "ALL"
	MODULEFULFILLMENTTYPE_ONLY_MERCHANT ModuleFulfillmentType = "ONLY_MERCHANT"
	MODULEFULFILLMENTTYPE_ONLY_CHANNEL ModuleFulfillmentType = "ONLY_CHANNEL"
	MODULEFULFILLMENTTYPE_MIXED ModuleFulfillmentType = "MIXED"
	MODULEFULFILLMENTTYPE_INCLUDES_MERCHANT ModuleFulfillmentType = "INCLUDES_MERCHANT"
	MODULEFULFILLMENTTYPE_INCLUDES_CHANNEL ModuleFulfillmentType = "INCLUDES_CHANNEL"
)

// All allowed values of ModuleFulfillmentType enum
var AllowedModuleFulfillmentTypeEnumValues = []ModuleFulfillmentType{
	"ALL",
	"ONLY_MERCHANT",
	"ONLY_CHANNEL",
	"MIXED",
	"INCLUDES_MERCHANT",
	"INCLUDES_CHANNEL",
}

func (v *ModuleFulfillmentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModuleFulfillmentType(value)
	for _, existing := range AllowedModuleFulfillmentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModuleFulfillmentType", value)
}

// NewModuleFulfillmentTypeFromValue returns a pointer to a valid ModuleFulfillmentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModuleFulfillmentTypeFromValue(v string) (*ModuleFulfillmentType, error) {
	ev := ModuleFulfillmentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModuleFulfillmentType: valid values are %v", v, AllowedModuleFulfillmentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModuleFulfillmentType) IsValid() bool {
	for _, existing := range AllowedModuleFulfillmentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ModuleFulfillmentType value
func (v ModuleFulfillmentType) Ptr() *ModuleFulfillmentType {
	return &v
}

type NullableModuleFulfillmentType struct {
	value *ModuleFulfillmentType
	isSet bool
}

func (v NullableModuleFulfillmentType) Get() *ModuleFulfillmentType {
	return v.value
}

func (v *NullableModuleFulfillmentType) Set(val *ModuleFulfillmentType) {
	v.value = val
	v.isSet = true
}

func (v NullableModuleFulfillmentType) IsSet() bool {
	return v.isSet
}

func (v *NullableModuleFulfillmentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModuleFulfillmentType(val *ModuleFulfillmentType) *NullableModuleFulfillmentType {
	return &NullableModuleFulfillmentType{value: val, isSet: true}
}

func (v NullableModuleFulfillmentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModuleFulfillmentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

