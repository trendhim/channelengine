/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"time"
	"os"
)


// ShipmentsAPIService ShipmentsAPI service
type ShipmentsAPIService service

type ShipmentsAPIShipmentCreateRequest struct {
	ctx context.Context
	ApiService *ShipmentsAPIService
	merchantShipmentRequest *MerchantShipmentRequest
}

func (r ShipmentsAPIShipmentCreateRequest) MerchantShipmentRequest(merchantShipmentRequest MerchantShipmentRequest) ShipmentsAPIShipmentCreateRequest {
	r.merchantShipmentRequest = &merchantShipmentRequest
	return r
}

func (r ShipmentsAPIShipmentCreateRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.ShipmentCreateExecute(r)
}

/*
ShipmentCreate Creates shipments

Marks an order as fully or partially shipped, based on the order line and quantity input.<br />Indicate the **Stock location ID** if you make use of multiple stock locations.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ShipmentsAPIShipmentCreateRequest
*/
func (a *ShipmentsAPIService) ShipmentCreate(ctx context.Context) ShipmentsAPIShipmentCreateRequest {
	return ShipmentsAPIShipmentCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *ShipmentsAPIService) ShipmentCreateExecute(r ShipmentsAPIShipmentCreateRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentsAPIService.ShipmentCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/shipments"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.merchantShipmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ShipmentsAPIShipmentCreateForChannelMethodRequest struct {
	ctx context.Context
	ApiService *ShipmentsAPIService
	merchantChannelLabelShipmentRequest *MerchantChannelLabelShipmentRequest
}

// The shipment to create
func (r ShipmentsAPIShipmentCreateForChannelMethodRequest) MerchantChannelLabelShipmentRequest(merchantChannelLabelShipmentRequest MerchantChannelLabelShipmentRequest) ShipmentsAPIShipmentCreateForChannelMethodRequest {
	r.merchantChannelLabelShipmentRequest = &merchantChannelLabelShipmentRequest
	return r
}

func (r ShipmentsAPIShipmentCreateForChannelMethodRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.ShipmentCreateForChannelMethodExecute(r)
}

/*
ShipmentCreateForChannelMethod Creates a shipment and initiates shipping label generation

Marks an order as either fully or partially shipped, based on the order line and quantity input.<br />It also provides the marketplace with information necessary to generate a shipping label.<br />If you make use of multiple stock locations, indicate the **Stock location ID**.<br /> <br />**NB:** to request a shipping label, include information on the package size (i.e.: dimensions and weight).

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ShipmentsAPIShipmentCreateForChannelMethodRequest
*/
func (a *ShipmentsAPIService) ShipmentCreateForChannelMethod(ctx context.Context) ShipmentsAPIShipmentCreateForChannelMethodRequest {
	return ShipmentsAPIShipmentCreateForChannelMethodRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *ShipmentsAPIService) ShipmentCreateForChannelMethodExecute(r ShipmentsAPIShipmentCreateForChannelMethodRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentsAPIService.ShipmentCreateForChannelMethod")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/shipments/channelmethod"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.merchantChannelLabelShipmentRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ShipmentsAPIShipmentGetShipmentLabelCarriersRequest struct {
	ctx context.Context
	ApiService *ShipmentsAPIService
	merchantOrderNo string
	merchantShipmentLabelCarrierRequest *MerchantShipmentLabelCarrierRequest
}

// The parcel information
func (r ShipmentsAPIShipmentGetShipmentLabelCarriersRequest) MerchantShipmentLabelCarrierRequest(merchantShipmentLabelCarrierRequest MerchantShipmentLabelCarrierRequest) ShipmentsAPIShipmentGetShipmentLabelCarriersRequest {
	r.merchantShipmentLabelCarrierRequest = &merchantShipmentLabelCarrierRequest
	return r
}

func (r ShipmentsAPIShipmentGetShipmentLabelCarriersRequest) Execute() (*CollectionOfMerchantShipmentLabelCarrierResponse, *http.Response, error) {
	return r.ApiService.ShipmentGetShipmentLabelCarriersExecute(r)
}

/*
ShipmentGetShipmentLabelCarriers Gets carriers providing shipping labels

Posts a request to get the available marketplace carrier offers.<br /><br />**NB:** this endpoint is used to buy a shipping label through the marketplace.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param merchantOrderNo The merchant's order reference.
 @return ShipmentsAPIShipmentGetShipmentLabelCarriersRequest
*/
func (a *ShipmentsAPIService) ShipmentGetShipmentLabelCarriers(ctx context.Context, merchantOrderNo string) ShipmentsAPIShipmentGetShipmentLabelCarriersRequest {
	return ShipmentsAPIShipmentGetShipmentLabelCarriersRequest{
		ApiService: a,
		ctx: ctx,
		merchantOrderNo: merchantOrderNo,
	}
}

// Execute executes the request
//  @return CollectionOfMerchantShipmentLabelCarrierResponse
func (a *ShipmentsAPIService) ShipmentGetShipmentLabelCarriersExecute(r ShipmentsAPIShipmentGetShipmentLabelCarriersRequest) (*CollectionOfMerchantShipmentLabelCarrierResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionOfMerchantShipmentLabelCarrierResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentsAPIService.ShipmentGetShipmentLabelCarriers")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/carriers/{merchantOrderNo}"
	localVarPath = strings.Replace(localVarPath, "{"+"merchantOrderNo"+"}", url.PathEscape(parameterValueToString(r.merchantOrderNo, "merchantOrderNo")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.merchantShipmentLabelCarrierRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ShipmentsAPIShipmentIndexRequest struct {
	ctx context.Context
	ApiService *ShipmentsAPIService
	merchantShipmentNos *[]string
	merchantOrderNos *[]string
	method *string
	shippedFromCountryCodes *[]string
	fromShipmentDate *time.Time
	toShipmentDate *time.Time
	fromCreateDate *time.Time
	toCreateDate *time.Time
	fromUpdateDate *time.Time
	toUpdateDate *time.Time
	fulfillmentType *ShipmentFulfillmentType
	channelShipmentNos *[]string
	channelOrderNos *[]string
	page *int32
}

// Filter on the unique references (ids) as used by the merchant.
func (r ShipmentsAPIShipmentIndexRequest) MerchantShipmentNos(merchantShipmentNos []string) ShipmentsAPIShipmentIndexRequest {
	r.merchantShipmentNos = &merchantShipmentNos
	return r
}

// Filter on the unique references (ids) of order as used by the merchant.
func (r ShipmentsAPIShipmentIndexRequest) MerchantOrderNos(merchantOrderNos []string) ShipmentsAPIShipmentIndexRequest {
	r.merchantOrderNos = &merchantOrderNos
	return r
}

// Filter on the shipping method.
func (r ShipmentsAPIShipmentIndexRequest) Method(method string) ShipmentsAPIShipmentIndexRequest {
	r.method = &method
	return r
}

// 2-digit Country code
func (r ShipmentsAPIShipmentIndexRequest) ShippedFromCountryCodes(shippedFromCountryCodes []string) ShipmentsAPIShipmentIndexRequest {
	r.shippedFromCountryCodes = &shippedFromCountryCodes
	return r
}

// Filter on the shipment date, starting from this date. This date is inclusive.
func (r ShipmentsAPIShipmentIndexRequest) FromShipmentDate(fromShipmentDate time.Time) ShipmentsAPIShipmentIndexRequest {
	r.fromShipmentDate = &fromShipmentDate
	return r
}

// Filter on the shipment date, until this date. This date is exclusive.
func (r ShipmentsAPIShipmentIndexRequest) ToShipmentDate(toShipmentDate time.Time) ShipmentsAPIShipmentIndexRequest {
	r.toShipmentDate = &toShipmentDate
	return r
}

// Filter on the create date of the shipment in ChannelEngine, starting from this date. This date is inclusive.
func (r ShipmentsAPIShipmentIndexRequest) FromCreateDate(fromCreateDate time.Time) ShipmentsAPIShipmentIndexRequest {
	r.fromCreateDate = &fromCreateDate
	return r
}

// Filter on the create date of the shipment in ChannelEngine, until this date. This date is exclusive.
func (r ShipmentsAPIShipmentIndexRequest) ToCreateDate(toCreateDate time.Time) ShipmentsAPIShipmentIndexRequest {
	r.toCreateDate = &toCreateDate
	return r
}

// Filter on the update date of the shipment in ChannelEngine, starting from this date. This date is inclusive.
func (r ShipmentsAPIShipmentIndexRequest) FromUpdateDate(fromUpdateDate time.Time) ShipmentsAPIShipmentIndexRequest {
	r.fromUpdateDate = &fromUpdateDate
	return r
}

// Filter on the update date of the shipment in ChannelEngine, until this date. This date is exclusive.
func (r ShipmentsAPIShipmentIndexRequest) ToUpdateDate(toUpdateDate time.Time) ShipmentsAPIShipmentIndexRequest {
	r.toUpdateDate = &toUpdateDate
	return r
}

// Filter on the fulfillment type of the shipment.
func (r ShipmentsAPIShipmentIndexRequest) FulfillmentType(fulfillmentType ShipmentFulfillmentType) ShipmentsAPIShipmentIndexRequest {
	r.fulfillmentType = &fulfillmentType
	return r
}

// Filter on the unique references (ids) as used by the channel.
func (r ShipmentsAPIShipmentIndexRequest) ChannelShipmentNos(channelShipmentNos []string) ShipmentsAPIShipmentIndexRequest {
	r.channelShipmentNos = &channelShipmentNos
	return r
}

// Filter on the unique references (ids) of order as used by the channel.
func (r ShipmentsAPIShipmentIndexRequest) ChannelOrderNos(channelOrderNos []string) ShipmentsAPIShipmentIndexRequest {
	r.channelOrderNos = &channelOrderNos
	return r
}

// The page to filter on. Starts at 1.
func (r ShipmentsAPIShipmentIndexRequest) Page(page int32) ShipmentsAPIShipmentIndexRequest {
	r.page = &page
	return r
}

func (r ShipmentsAPIShipmentIndexRequest) Execute() (*CollectionOfMerchantShipmentResponse, *http.Response, error) {
	return r.ApiService.ShipmentIndexExecute(r)
}

/*
ShipmentIndex Gets shipments by filter

Gets the shipments based on the available filters.<br />Shipments are listed in chronological order, from old to new.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ShipmentsAPIShipmentIndexRequest
*/
func (a *ShipmentsAPIService) ShipmentIndex(ctx context.Context) ShipmentsAPIShipmentIndexRequest {
	return ShipmentsAPIShipmentIndexRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfMerchantShipmentResponse
func (a *ShipmentsAPIService) ShipmentIndexExecute(r ShipmentsAPIShipmentIndexRequest) (*CollectionOfMerchantShipmentResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionOfMerchantShipmentResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentsAPIService.ShipmentIndex")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/shipments/merchant"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.merchantShipmentNos != nil {
		t := *r.merchantShipmentNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "merchantShipmentNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "merchantShipmentNos", t, "multi")
		}
	}
	if r.merchantOrderNos != nil {
		t := *r.merchantOrderNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "merchantOrderNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "merchantOrderNos", t, "multi")
		}
	}
	if r.method != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "method", r.method, "")
	}
	if r.shippedFromCountryCodes != nil {
		t := *r.shippedFromCountryCodes
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "shippedFromCountryCodes", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "shippedFromCountryCodes", t, "multi")
		}
	}
	if r.fromShipmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromShipmentDate", r.fromShipmentDate, "")
	}
	if r.toShipmentDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toShipmentDate", r.toShipmentDate, "")
	}
	if r.fromCreateDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromCreateDate", r.fromCreateDate, "")
	}
	if r.toCreateDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toCreateDate", r.toCreateDate, "")
	}
	if r.fromUpdateDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromUpdateDate", r.fromUpdateDate, "")
	}
	if r.toUpdateDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toUpdateDate", r.toUpdateDate, "")
	}
	if r.fulfillmentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fulfillmentType", r.fulfillmentType, "")
	}
	if r.channelShipmentNos != nil {
		t := *r.channelShipmentNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelShipmentNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelShipmentNos", t, "multi")
		}
	}
	if r.channelOrderNos != nil {
		t := *r.channelOrderNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelOrderNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelOrderNos", t, "multi")
		}
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ShipmentsAPIShipmentShippingLabelRequest struct {
	ctx context.Context
	ApiService *ShipmentsAPIService
	merchantShipmentNo string
}

func (r ShipmentsAPIShipmentShippingLabelRequest) Execute() (**os.File, *http.Response, error) {
	return r.ApiService.ShipmentShippingLabelExecute(r)
}

/*
ShipmentShippingLabel Gets a shipping label

 Downloads the shipping label for the shipment.<br /> <br /> **NB:** it may take some time between the creation of the shipment and the availability of the label.<br />A "404 not found" error might indicate that the label is not available yet.<br />A "410 gone" the shipping label is not available anymore.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param merchantShipmentNo The unique shipment reference as used by the merchant.
 @return ShipmentsAPIShipmentShippingLabelRequest
*/
func (a *ShipmentsAPIService) ShipmentShippingLabel(ctx context.Context, merchantShipmentNo string) ShipmentsAPIShipmentShippingLabelRequest {
	return ShipmentsAPIShipmentShippingLabelRequest{
		ApiService: a,
		ctx: ctx,
		merchantShipmentNo: merchantShipmentNo,
	}
}

// Execute executes the request
//  @return *os.File
func (a *ShipmentsAPIService) ShipmentShippingLabelExecute(r ShipmentsAPIShipmentShippingLabelRequest) (**os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  **os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentsAPIService.ShipmentShippingLabel")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/orders/{merchantShipmentNo}/shippinglabel"
	localVarPath = strings.Replace(localVarPath, "{"+"merchantShipmentNo"+"}", url.PathEscape(parameterValueToString(r.merchantShipmentNo, "merchantShipmentNo")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/vnd.shippingLabel", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 410 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ShipmentsAPIShipmentUpdateRequest struct {
	ctx context.Context
	ApiService *ShipmentsAPIService
	merchantShipmentNo string
	merchantShipmentTrackingRequest *MerchantShipmentTrackingRequest
}

// The updated tracking information.
func (r ShipmentsAPIShipmentUpdateRequest) MerchantShipmentTrackingRequest(merchantShipmentTrackingRequest MerchantShipmentTrackingRequest) ShipmentsAPIShipmentUpdateRequest {
	r.merchantShipmentTrackingRequest = &merchantShipmentTrackingRequest
	return r
}

func (r ShipmentsAPIShipmentUpdateRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.ShipmentUpdateExecute(r)
}

/*
ShipmentUpdate Updates a shipment

Updates an existing shipment with tracking information and shipping method.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param merchantShipmentNo The merchant's shipment reference.
 @return ShipmentsAPIShipmentUpdateRequest
*/
func (a *ShipmentsAPIService) ShipmentUpdate(ctx context.Context, merchantShipmentNo string) ShipmentsAPIShipmentUpdateRequest {
	return ShipmentsAPIShipmentUpdateRequest{
		ApiService: a,
		ctx: ctx,
		merchantShipmentNo: merchantShipmentNo,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *ShipmentsAPIService) ShipmentUpdateExecute(r ShipmentsAPIShipmentUpdateRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "ShipmentsAPIService.ShipmentUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/shipments/{merchantShipmentNo}"
	localVarPath = strings.Replace(localVarPath, "{"+"merchantShipmentNo"+"}", url.PathEscape(parameterValueToString(r.merchantShipmentNo, "merchantShipmentNo")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.merchantShipmentTrackingRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
