/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"time"
)

// checks if the IPurchaseOrderLineByFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPurchaseOrderLineByFilter{}

// IPurchaseOrderLineByFilter struct for IPurchaseOrderLineByFilter
type IPurchaseOrderLineByFilter struct {
	Id NullableInt32 `json:"Id,omitempty"`
	ChannelOrderLineNo NullableString `json:"ChannelOrderLineNo,omitempty"`
	ChannelProductNo NullableString `json:"ChannelProductNo,omitempty"`
	MerchantProductNo NullableString `json:"MerchantProductNo,omitempty"`
	Quantity *int32 `json:"Quantity,omitempty"`
	IsBackOrderAllowed *bool `json:"IsBackOrderAllowed,omitempty"`
	UnitOfMeasure *PurchaseOrderLineUnitOfMeasure `json:"UnitOfMeasure,omitempty"`
	UnitSize NullableInt32 `json:"UnitSize,omitempty"`
	NetCostAmount NullableFloat32 `json:"NetCostAmount,omitempty"`
	NetCostCurrency NullableString `json:"NetCostCurrency,omitempty"`
	ListPriceAmount NullableFloat32 `json:"ListPriceAmount,omitempty"`
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	UpdatedAt NullableTime `json:"UpdatedAt,omitempty"`
	AcknowledgedDate NullableTime `json:"AcknowledgedDate,omitempty"`
	LineTotal NullableFloat32 `json:"LineTotal,omitempty"`
}

// NewIPurchaseOrderLineByFilter instantiates a new IPurchaseOrderLineByFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPurchaseOrderLineByFilter() *IPurchaseOrderLineByFilter {
	this := IPurchaseOrderLineByFilter{}
	return &this
}

// NewIPurchaseOrderLineByFilterWithDefaults instantiates a new IPurchaseOrderLineByFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPurchaseOrderLineByFilterWithDefaults() *IPurchaseOrderLineByFilter {
	this := IPurchaseOrderLineByFilter{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPurchaseOrderLineByFilter) GetId() int32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPurchaseOrderLineByFilter) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *IPurchaseOrderLineByFilter) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *IPurchaseOrderLineByFilter) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *IPurchaseOrderLineByFilter) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *IPurchaseOrderLineByFilter) UnsetId() {
	o.Id.Unset()
}

// GetChannelOrderLineNo returns the ChannelOrderLineNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPurchaseOrderLineByFilter) GetChannelOrderLineNo() string {
	if o == nil || IsNil(o.ChannelOrderLineNo.Get()) {
		var ret string
		return ret
	}
	return *o.ChannelOrderLineNo.Get()
}

// GetChannelOrderLineNoOk returns a tuple with the ChannelOrderLineNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPurchaseOrderLineByFilter) GetChannelOrderLineNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChannelOrderLineNo.Get(), o.ChannelOrderLineNo.IsSet()
}

// HasChannelOrderLineNo returns a boolean if a field has been set.
func (o *IPurchaseOrderLineByFilter) HasChannelOrderLineNo() bool {
	if o != nil && o.ChannelOrderLineNo.IsSet() {
		return true
	}

	return false
}

// SetChannelOrderLineNo gets a reference to the given NullableString and assigns it to the ChannelOrderLineNo field.
func (o *IPurchaseOrderLineByFilter) SetChannelOrderLineNo(v string) {
	o.ChannelOrderLineNo.Set(&v)
}
// SetChannelOrderLineNoNil sets the value for ChannelOrderLineNo to be an explicit nil
func (o *IPurchaseOrderLineByFilter) SetChannelOrderLineNoNil() {
	o.ChannelOrderLineNo.Set(nil)
}

// UnsetChannelOrderLineNo ensures that no value is present for ChannelOrderLineNo, not even an explicit nil
func (o *IPurchaseOrderLineByFilter) UnsetChannelOrderLineNo() {
	o.ChannelOrderLineNo.Unset()
}

// GetChannelProductNo returns the ChannelProductNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPurchaseOrderLineByFilter) GetChannelProductNo() string {
	if o == nil || IsNil(o.ChannelProductNo.Get()) {
		var ret string
		return ret
	}
	return *o.ChannelProductNo.Get()
}

// GetChannelProductNoOk returns a tuple with the ChannelProductNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPurchaseOrderLineByFilter) GetChannelProductNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChannelProductNo.Get(), o.ChannelProductNo.IsSet()
}

// HasChannelProductNo returns a boolean if a field has been set.
func (o *IPurchaseOrderLineByFilter) HasChannelProductNo() bool {
	if o != nil && o.ChannelProductNo.IsSet() {
		return true
	}

	return false
}

// SetChannelProductNo gets a reference to the given NullableString and assigns it to the ChannelProductNo field.
func (o *IPurchaseOrderLineByFilter) SetChannelProductNo(v string) {
	o.ChannelProductNo.Set(&v)
}
// SetChannelProductNoNil sets the value for ChannelProductNo to be an explicit nil
func (o *IPurchaseOrderLineByFilter) SetChannelProductNoNil() {
	o.ChannelProductNo.Set(nil)
}

// UnsetChannelProductNo ensures that no value is present for ChannelProductNo, not even an explicit nil
func (o *IPurchaseOrderLineByFilter) UnsetChannelProductNo() {
	o.ChannelProductNo.Unset()
}

// GetMerchantProductNo returns the MerchantProductNo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPurchaseOrderLineByFilter) GetMerchantProductNo() string {
	if o == nil || IsNil(o.MerchantProductNo.Get()) {
		var ret string
		return ret
	}
	return *o.MerchantProductNo.Get()
}

// GetMerchantProductNoOk returns a tuple with the MerchantProductNo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPurchaseOrderLineByFilter) GetMerchantProductNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MerchantProductNo.Get(), o.MerchantProductNo.IsSet()
}

// HasMerchantProductNo returns a boolean if a field has been set.
func (o *IPurchaseOrderLineByFilter) HasMerchantProductNo() bool {
	if o != nil && o.MerchantProductNo.IsSet() {
		return true
	}

	return false
}

// SetMerchantProductNo gets a reference to the given NullableString and assigns it to the MerchantProductNo field.
func (o *IPurchaseOrderLineByFilter) SetMerchantProductNo(v string) {
	o.MerchantProductNo.Set(&v)
}
// SetMerchantProductNoNil sets the value for MerchantProductNo to be an explicit nil
func (o *IPurchaseOrderLineByFilter) SetMerchantProductNoNil() {
	o.MerchantProductNo.Set(nil)
}

// UnsetMerchantProductNo ensures that no value is present for MerchantProductNo, not even an explicit nil
func (o *IPurchaseOrderLineByFilter) UnsetMerchantProductNo() {
	o.MerchantProductNo.Unset()
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *IPurchaseOrderLineByFilter) GetQuantity() int32 {
	if o == nil || IsNil(o.Quantity) {
		var ret int32
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPurchaseOrderLineByFilter) GetQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *IPurchaseOrderLineByFilter) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given int32 and assigns it to the Quantity field.
func (o *IPurchaseOrderLineByFilter) SetQuantity(v int32) {
	o.Quantity = &v
}

// GetIsBackOrderAllowed returns the IsBackOrderAllowed field value if set, zero value otherwise.
func (o *IPurchaseOrderLineByFilter) GetIsBackOrderAllowed() bool {
	if o == nil || IsNil(o.IsBackOrderAllowed) {
		var ret bool
		return ret
	}
	return *o.IsBackOrderAllowed
}

// GetIsBackOrderAllowedOk returns a tuple with the IsBackOrderAllowed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPurchaseOrderLineByFilter) GetIsBackOrderAllowedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsBackOrderAllowed) {
		return nil, false
	}
	return o.IsBackOrderAllowed, true
}

// HasIsBackOrderAllowed returns a boolean if a field has been set.
func (o *IPurchaseOrderLineByFilter) HasIsBackOrderAllowed() bool {
	if o != nil && !IsNil(o.IsBackOrderAllowed) {
		return true
	}

	return false
}

// SetIsBackOrderAllowed gets a reference to the given bool and assigns it to the IsBackOrderAllowed field.
func (o *IPurchaseOrderLineByFilter) SetIsBackOrderAllowed(v bool) {
	o.IsBackOrderAllowed = &v
}

// GetUnitOfMeasure returns the UnitOfMeasure field value if set, zero value otherwise.
func (o *IPurchaseOrderLineByFilter) GetUnitOfMeasure() PurchaseOrderLineUnitOfMeasure {
	if o == nil || IsNil(o.UnitOfMeasure) {
		var ret PurchaseOrderLineUnitOfMeasure
		return ret
	}
	return *o.UnitOfMeasure
}

// GetUnitOfMeasureOk returns a tuple with the UnitOfMeasure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPurchaseOrderLineByFilter) GetUnitOfMeasureOk() (*PurchaseOrderLineUnitOfMeasure, bool) {
	if o == nil || IsNil(o.UnitOfMeasure) {
		return nil, false
	}
	return o.UnitOfMeasure, true
}

// HasUnitOfMeasure returns a boolean if a field has been set.
func (o *IPurchaseOrderLineByFilter) HasUnitOfMeasure() bool {
	if o != nil && !IsNil(o.UnitOfMeasure) {
		return true
	}

	return false
}

// SetUnitOfMeasure gets a reference to the given PurchaseOrderLineUnitOfMeasure and assigns it to the UnitOfMeasure field.
func (o *IPurchaseOrderLineByFilter) SetUnitOfMeasure(v PurchaseOrderLineUnitOfMeasure) {
	o.UnitOfMeasure = &v
}

// GetUnitSize returns the UnitSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPurchaseOrderLineByFilter) GetUnitSize() int32 {
	if o == nil || IsNil(o.UnitSize.Get()) {
		var ret int32
		return ret
	}
	return *o.UnitSize.Get()
}

// GetUnitSizeOk returns a tuple with the UnitSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPurchaseOrderLineByFilter) GetUnitSizeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitSize.Get(), o.UnitSize.IsSet()
}

// HasUnitSize returns a boolean if a field has been set.
func (o *IPurchaseOrderLineByFilter) HasUnitSize() bool {
	if o != nil && o.UnitSize.IsSet() {
		return true
	}

	return false
}

// SetUnitSize gets a reference to the given NullableInt32 and assigns it to the UnitSize field.
func (o *IPurchaseOrderLineByFilter) SetUnitSize(v int32) {
	o.UnitSize.Set(&v)
}
// SetUnitSizeNil sets the value for UnitSize to be an explicit nil
func (o *IPurchaseOrderLineByFilter) SetUnitSizeNil() {
	o.UnitSize.Set(nil)
}

// UnsetUnitSize ensures that no value is present for UnitSize, not even an explicit nil
func (o *IPurchaseOrderLineByFilter) UnsetUnitSize() {
	o.UnitSize.Unset()
}

// GetNetCostAmount returns the NetCostAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPurchaseOrderLineByFilter) GetNetCostAmount() float32 {
	if o == nil || IsNil(o.NetCostAmount.Get()) {
		var ret float32
		return ret
	}
	return *o.NetCostAmount.Get()
}

// GetNetCostAmountOk returns a tuple with the NetCostAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPurchaseOrderLineByFilter) GetNetCostAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetCostAmount.Get(), o.NetCostAmount.IsSet()
}

// HasNetCostAmount returns a boolean if a field has been set.
func (o *IPurchaseOrderLineByFilter) HasNetCostAmount() bool {
	if o != nil && o.NetCostAmount.IsSet() {
		return true
	}

	return false
}

// SetNetCostAmount gets a reference to the given NullableFloat32 and assigns it to the NetCostAmount field.
func (o *IPurchaseOrderLineByFilter) SetNetCostAmount(v float32) {
	o.NetCostAmount.Set(&v)
}
// SetNetCostAmountNil sets the value for NetCostAmount to be an explicit nil
func (o *IPurchaseOrderLineByFilter) SetNetCostAmountNil() {
	o.NetCostAmount.Set(nil)
}

// UnsetNetCostAmount ensures that no value is present for NetCostAmount, not even an explicit nil
func (o *IPurchaseOrderLineByFilter) UnsetNetCostAmount() {
	o.NetCostAmount.Unset()
}

// GetNetCostCurrency returns the NetCostCurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPurchaseOrderLineByFilter) GetNetCostCurrency() string {
	if o == nil || IsNil(o.NetCostCurrency.Get()) {
		var ret string
		return ret
	}
	return *o.NetCostCurrency.Get()
}

// GetNetCostCurrencyOk returns a tuple with the NetCostCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPurchaseOrderLineByFilter) GetNetCostCurrencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetCostCurrency.Get(), o.NetCostCurrency.IsSet()
}

// HasNetCostCurrency returns a boolean if a field has been set.
func (o *IPurchaseOrderLineByFilter) HasNetCostCurrency() bool {
	if o != nil && o.NetCostCurrency.IsSet() {
		return true
	}

	return false
}

// SetNetCostCurrency gets a reference to the given NullableString and assigns it to the NetCostCurrency field.
func (o *IPurchaseOrderLineByFilter) SetNetCostCurrency(v string) {
	o.NetCostCurrency.Set(&v)
}
// SetNetCostCurrencyNil sets the value for NetCostCurrency to be an explicit nil
func (o *IPurchaseOrderLineByFilter) SetNetCostCurrencyNil() {
	o.NetCostCurrency.Set(nil)
}

// UnsetNetCostCurrency ensures that no value is present for NetCostCurrency, not even an explicit nil
func (o *IPurchaseOrderLineByFilter) UnsetNetCostCurrency() {
	o.NetCostCurrency.Unset()
}

// GetListPriceAmount returns the ListPriceAmount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPurchaseOrderLineByFilter) GetListPriceAmount() float32 {
	if o == nil || IsNil(o.ListPriceAmount.Get()) {
		var ret float32
		return ret
	}
	return *o.ListPriceAmount.Get()
}

// GetListPriceAmountOk returns a tuple with the ListPriceAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPurchaseOrderLineByFilter) GetListPriceAmountOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ListPriceAmount.Get(), o.ListPriceAmount.IsSet()
}

// HasListPriceAmount returns a boolean if a field has been set.
func (o *IPurchaseOrderLineByFilter) HasListPriceAmount() bool {
	if o != nil && o.ListPriceAmount.IsSet() {
		return true
	}

	return false
}

// SetListPriceAmount gets a reference to the given NullableFloat32 and assigns it to the ListPriceAmount field.
func (o *IPurchaseOrderLineByFilter) SetListPriceAmount(v float32) {
	o.ListPriceAmount.Set(&v)
}
// SetListPriceAmountNil sets the value for ListPriceAmount to be an explicit nil
func (o *IPurchaseOrderLineByFilter) SetListPriceAmountNil() {
	o.ListPriceAmount.Set(nil)
}

// UnsetListPriceAmount ensures that no value is present for ListPriceAmount, not even an explicit nil
func (o *IPurchaseOrderLineByFilter) UnsetListPriceAmount() {
	o.ListPriceAmount.Unset()
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *IPurchaseOrderLineByFilter) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPurchaseOrderLineByFilter) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *IPurchaseOrderLineByFilter) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *IPurchaseOrderLineByFilter) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPurchaseOrderLineByFilter) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt.Get()) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt.Get()
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPurchaseOrderLineByFilter) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedAt.Get(), o.UpdatedAt.IsSet()
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *IPurchaseOrderLineByFilter) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt.IsSet() {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given NullableTime and assigns it to the UpdatedAt field.
func (o *IPurchaseOrderLineByFilter) SetUpdatedAt(v time.Time) {
	o.UpdatedAt.Set(&v)
}
// SetUpdatedAtNil sets the value for UpdatedAt to be an explicit nil
func (o *IPurchaseOrderLineByFilter) SetUpdatedAtNil() {
	o.UpdatedAt.Set(nil)
}

// UnsetUpdatedAt ensures that no value is present for UpdatedAt, not even an explicit nil
func (o *IPurchaseOrderLineByFilter) UnsetUpdatedAt() {
	o.UpdatedAt.Unset()
}

// GetAcknowledgedDate returns the AcknowledgedDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPurchaseOrderLineByFilter) GetAcknowledgedDate() time.Time {
	if o == nil || IsNil(o.AcknowledgedDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.AcknowledgedDate.Get()
}

// GetAcknowledgedDateOk returns a tuple with the AcknowledgedDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPurchaseOrderLineByFilter) GetAcknowledgedDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.AcknowledgedDate.Get(), o.AcknowledgedDate.IsSet()
}

// HasAcknowledgedDate returns a boolean if a field has been set.
func (o *IPurchaseOrderLineByFilter) HasAcknowledgedDate() bool {
	if o != nil && o.AcknowledgedDate.IsSet() {
		return true
	}

	return false
}

// SetAcknowledgedDate gets a reference to the given NullableTime and assigns it to the AcknowledgedDate field.
func (o *IPurchaseOrderLineByFilter) SetAcknowledgedDate(v time.Time) {
	o.AcknowledgedDate.Set(&v)
}
// SetAcknowledgedDateNil sets the value for AcknowledgedDate to be an explicit nil
func (o *IPurchaseOrderLineByFilter) SetAcknowledgedDateNil() {
	o.AcknowledgedDate.Set(nil)
}

// UnsetAcknowledgedDate ensures that no value is present for AcknowledgedDate, not even an explicit nil
func (o *IPurchaseOrderLineByFilter) UnsetAcknowledgedDate() {
	o.AcknowledgedDate.Unset()
}

// GetLineTotal returns the LineTotal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPurchaseOrderLineByFilter) GetLineTotal() float32 {
	if o == nil || IsNil(o.LineTotal.Get()) {
		var ret float32
		return ret
	}
	return *o.LineTotal.Get()
}

// GetLineTotalOk returns a tuple with the LineTotal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPurchaseOrderLineByFilter) GetLineTotalOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LineTotal.Get(), o.LineTotal.IsSet()
}

// HasLineTotal returns a boolean if a field has been set.
func (o *IPurchaseOrderLineByFilter) HasLineTotal() bool {
	if o != nil && o.LineTotal.IsSet() {
		return true
	}

	return false
}

// SetLineTotal gets a reference to the given NullableFloat32 and assigns it to the LineTotal field.
func (o *IPurchaseOrderLineByFilter) SetLineTotal(v float32) {
	o.LineTotal.Set(&v)
}
// SetLineTotalNil sets the value for LineTotal to be an explicit nil
func (o *IPurchaseOrderLineByFilter) SetLineTotalNil() {
	o.LineTotal.Set(nil)
}

// UnsetLineTotal ensures that no value is present for LineTotal, not even an explicit nil
func (o *IPurchaseOrderLineByFilter) UnsetLineTotal() {
	o.LineTotal.Unset()
}

func (o IPurchaseOrderLineByFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPurchaseOrderLineByFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["Id"] = o.Id.Get()
	}
	if o.ChannelOrderLineNo.IsSet() {
		toSerialize["ChannelOrderLineNo"] = o.ChannelOrderLineNo.Get()
	}
	if o.ChannelProductNo.IsSet() {
		toSerialize["ChannelProductNo"] = o.ChannelProductNo.Get()
	}
	if o.MerchantProductNo.IsSet() {
		toSerialize["MerchantProductNo"] = o.MerchantProductNo.Get()
	}
	if !IsNil(o.Quantity) {
		toSerialize["Quantity"] = o.Quantity
	}
	if !IsNil(o.IsBackOrderAllowed) {
		toSerialize["IsBackOrderAllowed"] = o.IsBackOrderAllowed
	}
	if !IsNil(o.UnitOfMeasure) {
		toSerialize["UnitOfMeasure"] = o.UnitOfMeasure
	}
	if o.UnitSize.IsSet() {
		toSerialize["UnitSize"] = o.UnitSize.Get()
	}
	if o.NetCostAmount.IsSet() {
		toSerialize["NetCostAmount"] = o.NetCostAmount.Get()
	}
	if o.NetCostCurrency.IsSet() {
		toSerialize["NetCostCurrency"] = o.NetCostCurrency.Get()
	}
	if o.ListPriceAmount.IsSet() {
		toSerialize["ListPriceAmount"] = o.ListPriceAmount.Get()
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if o.UpdatedAt.IsSet() {
		toSerialize["UpdatedAt"] = o.UpdatedAt.Get()
	}
	if o.AcknowledgedDate.IsSet() {
		toSerialize["AcknowledgedDate"] = o.AcknowledgedDate.Get()
	}
	if o.LineTotal.IsSet() {
		toSerialize["LineTotal"] = o.LineTotal.Get()
	}
	return toSerialize, nil
}

type NullableIPurchaseOrderLineByFilter struct {
	value *IPurchaseOrderLineByFilter
	isSet bool
}

func (v NullableIPurchaseOrderLineByFilter) Get() *IPurchaseOrderLineByFilter {
	return v.value
}

func (v *NullableIPurchaseOrderLineByFilter) Set(val *IPurchaseOrderLineByFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableIPurchaseOrderLineByFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableIPurchaseOrderLineByFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPurchaseOrderLineByFilter(val *IPurchaseOrderLineByFilter) *NullableIPurchaseOrderLineByFilter {
	return &NullableIPurchaseOrderLineByFilter{value: val, isSet: true}
}

func (v NullableIPurchaseOrderLineByFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPurchaseOrderLineByFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


