/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// ModulesAdditionalDetailsType the model 'ModulesAdditionalDetailsType'
type ModulesAdditionalDetailsType string

// List of ModulesAdditionalDetailsType
const (
	MODULESADDITIONALDETAILSTYPE_SUR ModulesAdditionalDetailsType = "SUR"
	MODULESADDITIONALDETAILSTYPE_OCR ModulesAdditionalDetailsType = "OCR"
	MODULESADDITIONALDETAILSTYPE_CARTON_COUNT ModulesAdditionalDetailsType = "CARTON_COUNT"
)

// All allowed values of ModulesAdditionalDetailsType enum
var AllowedModulesAdditionalDetailsTypeEnumValues = []ModulesAdditionalDetailsType{
	"SUR",
	"OCR",
	"CARTON_COUNT",
}

func (v *ModulesAdditionalDetailsType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModulesAdditionalDetailsType(value)
	for _, existing := range AllowedModulesAdditionalDetailsTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModulesAdditionalDetailsType", value)
}

// NewModulesAdditionalDetailsTypeFromValue returns a pointer to a valid ModulesAdditionalDetailsType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModulesAdditionalDetailsTypeFromValue(v string) (*ModulesAdditionalDetailsType, error) {
	ev := ModulesAdditionalDetailsType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModulesAdditionalDetailsType: valid values are %v", v, AllowedModulesAdditionalDetailsTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModulesAdditionalDetailsType) IsValid() bool {
	for _, existing := range AllowedModulesAdditionalDetailsTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ModulesAdditionalDetailsType value
func (v ModulesAdditionalDetailsType) Ptr() *ModulesAdditionalDetailsType {
	return &v
}

type NullableModulesAdditionalDetailsType struct {
	value *ModulesAdditionalDetailsType
	isSet bool
}

func (v NullableModulesAdditionalDetailsType) Get() *ModulesAdditionalDetailsType {
	return v.value
}

func (v *NullableModulesAdditionalDetailsType) Set(val *ModulesAdditionalDetailsType) {
	v.value = val
	v.isSet = true
}

func (v NullableModulesAdditionalDetailsType) IsSet() bool {
	return v.isSet
}

func (v *NullableModulesAdditionalDetailsType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModulesAdditionalDetailsType(val *ModulesAdditionalDetailsType) *NullableModulesAdditionalDetailsType {
	return &NullableModulesAdditionalDetailsType{value: val, isSet: true}
}

func (v NullableModulesAdditionalDetailsType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModulesAdditionalDetailsType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

