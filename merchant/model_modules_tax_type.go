/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// ModulesTaxType the model 'ModulesTaxType'
type ModulesTaxType string

// List of ModulesTaxType
const (
	MODULESTAXTYPE_CGST ModulesTaxType = "CGST"
	MODULESTAXTYPE_SGST ModulesTaxType = "SGST"
	MODULESTAXTYPE_CESS ModulesTaxType = "CESS"
	MODULESTAXTYPE_UTGST ModulesTaxType = "UTGST"
	MODULESTAXTYPE_IGST ModulesTaxType = "IGST"
	MODULESTAXTYPE_MWST ModulesTaxType = "MWST"
	MODULESTAXTYPE_PST ModulesTaxType = "PST"
	MODULESTAXTYPE_TVA ModulesTaxType = "TVA"
	MODULESTAXTYPE_VAT ModulesTaxType = "VAT"
	MODULESTAXTYPE_GST ModulesTaxType = "GST"
	MODULESTAXTYPE_ST ModulesTaxType = "ST"
	MODULESTAXTYPE_CONSUMPTION ModulesTaxType = "CONSUMPTION"
	MODULESTAXTYPE_MUTUALLY_DEFINED ModulesTaxType = "MUTUALLY_DEFINED"
	MODULESTAXTYPE_DOMESTIC_VAT ModulesTaxType = "DOMESTIC_VAT"
)

// All allowed values of ModulesTaxType enum
var AllowedModulesTaxTypeEnumValues = []ModulesTaxType{
	"CGST",
	"SGST",
	"CESS",
	"UTGST",
	"IGST",
	"MWST",
	"PST",
	"TVA",
	"VAT",
	"GST",
	"ST",
	"CONSUMPTION",
	"MUTUALLY_DEFINED",
	"DOMESTIC_VAT",
}

func (v *ModulesTaxType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ModulesTaxType(value)
	for _, existing := range AllowedModulesTaxTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ModulesTaxType", value)
}

// NewModulesTaxTypeFromValue returns a pointer to a valid ModulesTaxType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewModulesTaxTypeFromValue(v string) (*ModulesTaxType, error) {
	ev := ModulesTaxType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ModulesTaxType: valid values are %v", v, AllowedModulesTaxTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ModulesTaxType) IsValid() bool {
	for _, existing := range AllowedModulesTaxTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ModulesTaxType value
func (v ModulesTaxType) Ptr() *ModulesTaxType {
	return &v
}

type NullableModulesTaxType struct {
	value *ModulesTaxType
	isSet bool
}

func (v NullableModulesTaxType) Get() *ModulesTaxType {
	return v.value
}

func (v *NullableModulesTaxType) Set(val *ModulesTaxType) {
	v.value = val
	v.isSet = true
}

func (v NullableModulesTaxType) IsSet() bool {
	return v.isSet
}

func (v *NullableModulesTaxType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModulesTaxType(val *ModulesTaxType) *NullableModulesTaxType {
	return &NullableModulesTaxType{value: val, isSet: true}
}

func (v NullableModulesTaxType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModulesTaxType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

