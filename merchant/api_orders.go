/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"time"
	"os"
)


// OrdersAPIService OrdersAPI service
type OrdersAPIService service

type OrdersAPIOrderAcknowledgeRequest struct {
	ctx context.Context
	ApiService *OrdersAPIService
	merchantOrderAcknowledgementRequest *MerchantOrderAcknowledgementRequest
}

// Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses.
func (r OrdersAPIOrderAcknowledgeRequest) MerchantOrderAcknowledgementRequest(merchantOrderAcknowledgementRequest MerchantOrderAcknowledgementRequest) OrdersAPIOrderAcknowledgeRequest {
	r.merchantOrderAcknowledgementRequest = &merchantOrderAcknowledgementRequest
	return r
}

func (r OrdersAPIOrderAcknowledgeRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.OrderAcknowledgeExecute(r)
}

/*
OrderAcknowledge Acknowledges orders

Acknowledges an order to confirm order import.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return OrdersAPIOrderAcknowledgeRequest
*/
func (a *OrdersAPIService) OrderAcknowledge(ctx context.Context) OrdersAPIOrderAcknowledgeRequest {
	return OrdersAPIOrderAcknowledgeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *OrdersAPIService) OrderAcknowledgeExecute(r OrdersAPIOrderAcknowledgeRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersAPIService.OrderAcknowledge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/orders/acknowledge"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.merchantOrderAcknowledgementRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 409 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OrdersAPIOrderGetByFilterRequest struct {
	ctx context.Context
	ApiService *OrdersAPIService
	statuses *[]OrderStatusView
	emailAddresses *[]string
	merchantOrderNos *[]string
	channelOrderNos *[]string
	commercialOrderNos *[]string
	fromDate *time.Time
	toDate *time.Time
	fromCreatedAtDate *time.Time
	toCreatedAtDate *time.Time
	excludeMarketplaceFulfilledOrdersAndLines *bool
	fulfillmentType *FulfillmentType
	onlyWithCancellationRequests *bool
	channelIds *[]int32
	stockLocationIds *[]int32
	isAcknowledged *bool
	fromUpdatedAtDate *time.Time
	toUpdatedAtDate *time.Time
	fromAcknowledgedDate *time.Time
	toAcknowledgedDate *time.Time
	fromClosedAtDate *time.Time
	toClosedAtDate *time.Time
	page *int32
}

// Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter.
func (r OrdersAPIOrderGetByFilterRequest) Statuses(statuses []OrderStatusView) OrdersAPIOrderGetByFilterRequest {
	r.statuses = &statuses
	return r
}

// Client emailaddresses to filter on.
func (r OrdersAPIOrderGetByFilterRequest) EmailAddresses(emailAddresses []string) OrdersAPIOrderGetByFilterRequest {
	r.emailAddresses = &emailAddresses
	return r
}

// Filter on unique order reference used by the merchant.
func (r OrdersAPIOrderGetByFilterRequest) MerchantOrderNos(merchantOrderNos []string) OrdersAPIOrderGetByFilterRequest {
	r.merchantOrderNos = &merchantOrderNos
	return r
}

// Filter on unique order reference used by the channel.
func (r OrdersAPIOrderGetByFilterRequest) ChannelOrderNos(channelOrderNos []string) OrdersAPIOrderGetByFilterRequest {
	r.channelOrderNos = &channelOrderNos
	return r
}

// Filter on commercial order numbers.
func (r OrdersAPIOrderGetByFilterRequest) CommercialOrderNos(commercialOrderNos []string) OrdersAPIOrderGetByFilterRequest {
	r.commercialOrderNos = &commercialOrderNos
	return r
}

// Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel.
func (r OrdersAPIOrderGetByFilterRequest) FromDate(fromDate time.Time) OrdersAPIOrderGetByFilterRequest {
	r.fromDate = &fromDate
	return r
}

// Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel.
func (r OrdersAPIOrderGetByFilterRequest) ToDate(toDate time.Time) OrdersAPIOrderGetByFilterRequest {
	r.toDate = &toDate
	return r
}

// Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created.
func (r OrdersAPIOrderGetByFilterRequest) FromCreatedAtDate(fromCreatedAtDate time.Time) OrdersAPIOrderGetByFilterRequest {
	r.fromCreatedAtDate = &fromCreatedAtDate
	return r
}

// Filter on the created at date in ChannelEngine, until this date. This date is exclusive.&lt;br /&gt;The created date is set on the date and time when the order is created.
func (r OrdersAPIOrderGetByFilterRequest) ToCreatedAtDate(toCreatedAtDate time.Time) OrdersAPIOrderGetByFilterRequest {
	r.toCreatedAtDate = &toCreatedAtDate
	return r
}

// Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)
func (r OrdersAPIOrderGetByFilterRequest) ExcludeMarketplaceFulfilledOrdersAndLines(excludeMarketplaceFulfilledOrdersAndLines bool) OrdersAPIOrderGetByFilterRequest {
	r.excludeMarketplaceFulfilledOrdersAndLines = &excludeMarketplaceFulfilledOrdersAndLines
	return r
}

// Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.
func (r OrdersAPIOrderGetByFilterRequest) FulfillmentType(fulfillmentType FulfillmentType) OrdersAPIOrderGetByFilterRequest {
	r.fulfillmentType = &fulfillmentType
	return r
}

// Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.
func (r OrdersAPIOrderGetByFilterRequest) OnlyWithCancellationRequests(onlyWithCancellationRequests bool) OrdersAPIOrderGetByFilterRequest {
	r.onlyWithCancellationRequests = &onlyWithCancellationRequests
	return r
}

// Filter orders on channel(s).
func (r OrdersAPIOrderGetByFilterRequest) ChannelIds(channelIds []int32) OrdersAPIOrderGetByFilterRequest {
	r.channelIds = &channelIds
	return r
}

// Filter on stock locations
func (r OrdersAPIOrderGetByFilterRequest) StockLocationIds(stockLocationIds []int32) OrdersAPIOrderGetByFilterRequest {
	r.stockLocationIds = &stockLocationIds
	return r
}

// Filter on acknowledged value
func (r OrdersAPIOrderGetByFilterRequest) IsAcknowledged(isAcknowledged bool) OrdersAPIOrderGetByFilterRequest {
	r.isAcknowledged = &isAcknowledged
	return r
}

// Filter on the order update date, starting from this date. This date is inclusive.
func (r OrdersAPIOrderGetByFilterRequest) FromUpdatedAtDate(fromUpdatedAtDate time.Time) OrdersAPIOrderGetByFilterRequest {
	r.fromUpdatedAtDate = &fromUpdatedAtDate
	return r
}

// Filter on the order update date, unitl this date. This date is exclusive.
func (r OrdersAPIOrderGetByFilterRequest) ToUpdatedAtDate(toUpdatedAtDate time.Time) OrdersAPIOrderGetByFilterRequest {
	r.toUpdatedAtDate = &toUpdatedAtDate
	return r
}

// Filter on the order acknowledged date, starting from this date. This date is inclusive.
func (r OrdersAPIOrderGetByFilterRequest) FromAcknowledgedDate(fromAcknowledgedDate time.Time) OrdersAPIOrderGetByFilterRequest {
	r.fromAcknowledgedDate = &fromAcknowledgedDate
	return r
}

// Filter on the order acknowledged date, until this date. This date is exclusive.
func (r OrdersAPIOrderGetByFilterRequest) ToAcknowledgedDate(toAcknowledgedDate time.Time) OrdersAPIOrderGetByFilterRequest {
	r.toAcknowledgedDate = &toAcknowledgedDate
	return r
}

// Filter on the order ClosedAt date, starting from this date. This date is inclusive.
func (r OrdersAPIOrderGetByFilterRequest) FromClosedAtDate(fromClosedAtDate time.Time) OrdersAPIOrderGetByFilterRequest {
	r.fromClosedAtDate = &fromClosedAtDate
	return r
}

// Filter on the order ClosedAt date, until this date. This date is exclusive.
func (r OrdersAPIOrderGetByFilterRequest) ToClosedAtDate(toClosedAtDate time.Time) OrdersAPIOrderGetByFilterRequest {
	r.toClosedAtDate = &toClosedAtDate
	return r
}

// The page to filter on. Starts at 1.
func (r OrdersAPIOrderGetByFilterRequest) Page(page int32) OrdersAPIOrderGetByFilterRequest {
	r.page = &page
	return r
}

func (r OrdersAPIOrderGetByFilterRequest) Execute() (*CollectionOfMerchantOrderResponse, *http.Response, error) {
	return r.ApiService.OrderGetByFilterExecute(r)
}

/*
OrderGetByFilter Gets orders by filter

Gets orders based on the available filters.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return OrdersAPIOrderGetByFilterRequest
*/
func (a *OrdersAPIService) OrderGetByFilter(ctx context.Context) OrdersAPIOrderGetByFilterRequest {
	return OrdersAPIOrderGetByFilterRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfMerchantOrderResponse
func (a *OrdersAPIService) OrderGetByFilterExecute(r OrdersAPIOrderGetByFilterRequest) (*CollectionOfMerchantOrderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionOfMerchantOrderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersAPIService.OrderGetByFilter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/orders"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.statuses != nil {
		t := *r.statuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "statuses", t, "multi")
		}
	}
	if r.emailAddresses != nil {
		t := *r.emailAddresses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "emailAddresses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "emailAddresses", t, "multi")
		}
	}
	if r.merchantOrderNos != nil {
		t := *r.merchantOrderNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "merchantOrderNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "merchantOrderNos", t, "multi")
		}
	}
	if r.channelOrderNos != nil {
		t := *r.channelOrderNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelOrderNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelOrderNos", t, "multi")
		}
	}
	if r.commercialOrderNos != nil {
		t := *r.commercialOrderNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "commercialOrderNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "commercialOrderNos", t, "multi")
		}
	}
	if r.fromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromDate", r.fromDate, "")
	}
	if r.toDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toDate", r.toDate, "")
	}
	if r.fromCreatedAtDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromCreatedAtDate", r.fromCreatedAtDate, "")
	}
	if r.toCreatedAtDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toCreatedAtDate", r.toCreatedAtDate, "")
	}
	if r.excludeMarketplaceFulfilledOrdersAndLines != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "excludeMarketplaceFulfilledOrdersAndLines", r.excludeMarketplaceFulfilledOrdersAndLines, "")
	}
	if r.fulfillmentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fulfillmentType", r.fulfillmentType, "")
	}
	if r.onlyWithCancellationRequests != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "onlyWithCancellationRequests", r.onlyWithCancellationRequests, "")
	}
	if r.channelIds != nil {
		t := *r.channelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", t, "multi")
		}
	}
	if r.stockLocationIds != nil {
		t := *r.stockLocationIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "stockLocationIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "stockLocationIds", t, "multi")
		}
	}
	if r.isAcknowledged != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isAcknowledged", r.isAcknowledged, "")
	}
	if r.fromUpdatedAtDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromUpdatedAtDate", r.fromUpdatedAtDate, "")
	}
	if r.toUpdatedAtDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toUpdatedAtDate", r.toUpdatedAtDate, "")
	}
	if r.fromAcknowledgedDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromAcknowledgedDate", r.fromAcknowledgedDate, "")
	}
	if r.toAcknowledgedDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toAcknowledgedDate", r.toAcknowledgedDate, "")
	}
	if r.fromClosedAtDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fromClosedAtDate", r.fromClosedAtDate, "")
	}
	if r.toClosedAtDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "toClosedAtDate", r.toClosedAtDate, "")
	}
	if r.page != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OrdersAPIOrderGetNewRequest struct {
	ctx context.Context
	ApiService *OrdersAPIService
	stockLocationId *int32
}

// The ChannelEngine id of the stock location.
func (r OrdersAPIOrderGetNewRequest) StockLocationId(stockLocationId int32) OrdersAPIOrderGetNewRequest {
	r.stockLocationId = &stockLocationId
	return r
}

func (r OrdersAPIOrderGetNewRequest) Execute() (*CollectionOfMerchantOrderResponse, *http.Response, error) {
	return r.ApiService.OrderGetNewExecute(r)
}

/*
OrderGetNew Gets new orders

Gets orders with the status **New**.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return OrdersAPIOrderGetNewRequest
*/
func (a *OrdersAPIService) OrderGetNew(ctx context.Context) OrdersAPIOrderGetNewRequest {
	return OrdersAPIOrderGetNewRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return CollectionOfMerchantOrderResponse
func (a *OrdersAPIService) OrderGetNewExecute(r OrdersAPIOrderGetNewRequest) (*CollectionOfMerchantOrderResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *CollectionOfMerchantOrderResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersAPIService.OrderGetNew")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/orders/new"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.stockLocationId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "stockLocationId", r.stockLocationId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OrdersAPIOrderInvoiceRequest struct {
	ctx context.Context
	ApiService *OrdersAPIService
	merchantOrderNo string
	useCustomerCulture *bool
}

// Generate the invoice in the billing address&#39; country&#39;s language.
func (r OrdersAPIOrderInvoiceRequest) UseCustomerCulture(useCustomerCulture bool) OrdersAPIOrderInvoiceRequest {
	r.useCustomerCulture = &useCustomerCulture
	return r
}

func (r OrdersAPIOrderInvoiceRequest) Execute() (**os.File, *http.Response, error) {
	return r.ApiService.OrderInvoiceExecute(r)
}

/*
OrderInvoice Generates an order invoice

Generates the ChannelEngine sales tax invoice for an order in PDF.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param merchantOrderNo The unique order reference as used by the merchant.
 @return OrdersAPIOrderInvoiceRequest
*/
func (a *OrdersAPIService) OrderInvoice(ctx context.Context, merchantOrderNo string) OrdersAPIOrderInvoiceRequest {
	return OrdersAPIOrderInvoiceRequest{
		ApiService: a,
		ctx: ctx,
		merchantOrderNo: merchantOrderNo,
	}
}

// Execute executes the request
//  @return *os.File
func (a *OrdersAPIService) OrderInvoiceExecute(r OrdersAPIOrderInvoiceRequest) (**os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  **os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersAPIService.OrderInvoice")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/orders/{merchantOrderNo}/invoice"
	localVarPath = strings.Replace(localVarPath, "{"+"merchantOrderNo"+"}", url.PathEscape(parameterValueToString(r.merchantOrderNo, "merchantOrderNo")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.useCustomerCulture != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "useCustomerCulture", r.useCustomerCulture, "")
	} else {
		var defaultValue bool = false
		r.useCustomerCulture = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/pdf", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OrdersAPIOrderPackingSlipRequest struct {
	ctx context.Context
	ApiService *OrdersAPIService
	merchantOrderNo string
	useCustomerCulture *bool
}

// Generate the invoice in the billing address&#39; country&#39;s language.
func (r OrdersAPIOrderPackingSlipRequest) UseCustomerCulture(useCustomerCulture bool) OrdersAPIOrderPackingSlipRequest {
	r.useCustomerCulture = &useCustomerCulture
	return r
}

func (r OrdersAPIOrderPackingSlipRequest) Execute() (**os.File, *http.Response, error) {
	return r.ApiService.OrderPackingSlipExecute(r)
}

/*
OrderPackingSlip Generates a packing slip

Generates the ChannelEngine packing slip for an order in PDF.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param merchantOrderNo The unique order reference as used by the merchant.
 @return OrdersAPIOrderPackingSlipRequest
*/
func (a *OrdersAPIService) OrderPackingSlip(ctx context.Context, merchantOrderNo string) OrdersAPIOrderPackingSlipRequest {
	return OrdersAPIOrderPackingSlipRequest{
		ApiService: a,
		ctx: ctx,
		merchantOrderNo: merchantOrderNo,
	}
}

// Execute executes the request
//  @return *os.File
func (a *OrdersAPIService) OrderPackingSlipExecute(r OrdersAPIOrderPackingSlipRequest) (**os.File, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  **os.File
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersAPIService.OrderPackingSlip")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/orders/{merchantOrderNo}/packingslip"
	localVarPath = strings.Replace(localVarPath, "{"+"merchantOrderNo"+"}", url.PathEscape(parameterValueToString(r.merchantOrderNo, "merchantOrderNo")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.useCustomerCulture != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "useCustomerCulture", r.useCustomerCulture, "")
	} else {
		var defaultValue bool = false
		r.useCustomerCulture = &defaultValue
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/pdf", "application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OrdersAPIOrderUpdateRequest struct {
	ctx context.Context
	ApiService *OrdersAPIService
	merchantOrderCommentUpdateRequest *MerchantOrderCommentUpdateRequest
}

func (r OrdersAPIOrderUpdateRequest) MerchantOrderCommentUpdateRequest(merchantOrderCommentUpdateRequest MerchantOrderCommentUpdateRequest) OrdersAPIOrderUpdateRequest {
	r.merchantOrderCommentUpdateRequest = &merchantOrderCommentUpdateRequest
	return r
}

func (r OrdersAPIOrderUpdateRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.OrderUpdateExecute(r)
}

/*
OrderUpdate Updates an order comment

Updates the merchant comment for an order based on the ChannelEngine **Order ID** or the **Merchant order number**.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return OrdersAPIOrderUpdateRequest
*/
func (a *OrdersAPIService) OrderUpdate(ctx context.Context) OrdersAPIOrderUpdateRequest {
	return OrdersAPIOrderUpdateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *OrdersAPIService) OrderUpdateExecute(r OrdersAPIOrderUpdateRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersAPIService.OrderUpdate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/orders/comment"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.merchantOrderCommentUpdateRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OrdersAPIOrderUploadInvoiceRequest struct {
	ctx context.Context
	ApiService *OrdersAPIService
	merchantOrderNo string
	invoice *os.File
	invoiceNumber *string
}

// PDF invoice file up to 1 MB with additional data.
func (r OrdersAPIOrderUploadInvoiceRequest) Invoice(invoice *os.File) OrdersAPIOrderUploadInvoiceRequest {
	r.invoice = invoice
	return r
}

// The invoice number used in the invoice.
func (r OrdersAPIOrderUploadInvoiceRequest) InvoiceNumber(invoiceNumber string) OrdersAPIOrderUploadInvoiceRequest {
	r.invoiceNumber = &invoiceNumber
	return r
}

func (r OrdersAPIOrderUploadInvoiceRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.OrderUploadInvoiceExecute(r)
}

/*
OrderUploadInvoice Uploads an order invoice

Uploads the invoice for an order in PDF.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param merchantOrderNo The unique order reference as used by the merchant.
 @return OrdersAPIOrderUploadInvoiceRequest
*/
func (a *OrdersAPIService) OrderUploadInvoice(ctx context.Context, merchantOrderNo string) OrdersAPIOrderUploadInvoiceRequest {
	return OrdersAPIOrderUploadInvoiceRequest{
		ApiService: a,
		ctx: ctx,
		merchantOrderNo: merchantOrderNo,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *OrdersAPIService) OrderUploadInvoiceExecute(r OrdersAPIOrderUploadInvoiceRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersAPIService.OrderUploadInvoice")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/orders/{merchantOrderNo}/invoice"
	localVarPath = strings.Replace(localVarPath, "{"+"merchantOrderNo"+"}", url.PathEscape(parameterValueToString(r.merchantOrderNo, "merchantOrderNo")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.invoice == nil {
		return localVarReturnValue, nil, reportError("invoice is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"multipart/form-data"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	var invoiceLocalVarFormFileName string
	var invoiceLocalVarFileName     string
	var invoiceLocalVarFileBytes    []byte

	invoiceLocalVarFormFileName = "invoice"
	invoiceLocalVarFile := r.invoice

	if invoiceLocalVarFile != nil {
		fbs, _ := io.ReadAll(invoiceLocalVarFile)

		invoiceLocalVarFileBytes = fbs
		invoiceLocalVarFileName = invoiceLocalVarFile.Name()
		invoiceLocalVarFile.Close()
		formFiles = append(formFiles, formFile{fileBytes: invoiceLocalVarFileBytes, fileName: invoiceLocalVarFileName, formFileName: invoiceLocalVarFormFileName})
	}
	if r.invoiceNumber != nil {
		parameterAddToHeaderOrQuery(localVarFormParams, "invoiceNumber", r.invoiceNumber, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type OrdersAPIOrderUploadInvoiceAsStringRequest struct {
	ctx context.Context
	ApiService *OrdersAPIService
	merchantOrderNo string
	merchantInvoiceUploadRequest *MerchantInvoiceUploadRequest
}

func (r OrdersAPIOrderUploadInvoiceAsStringRequest) MerchantInvoiceUploadRequest(merchantInvoiceUploadRequest MerchantInvoiceUploadRequest) OrdersAPIOrderUploadInvoiceAsStringRequest {
	r.merchantInvoiceUploadRequest = &merchantInvoiceUploadRequest
	return r
}

func (r OrdersAPIOrderUploadInvoiceAsStringRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.OrderUploadInvoiceAsStringExecute(r)
}

/*
OrderUploadInvoiceAsString Uploads an order invoice PDF from Base64 string.

Uploads an order invoice PDF from Base64 string.<br />Invoice size must be less than 1 mb.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param merchantOrderNo
 @return OrdersAPIOrderUploadInvoiceAsStringRequest
*/
func (a *OrdersAPIService) OrderUploadInvoiceAsString(ctx context.Context, merchantOrderNo string) OrdersAPIOrderUploadInvoiceAsStringRequest {
	return OrdersAPIOrderUploadInvoiceAsStringRequest{
		ApiService: a,
		ctx: ctx,
		merchantOrderNo: merchantOrderNo,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *OrdersAPIService) OrderUploadInvoiceAsStringExecute(r OrdersAPIOrderUploadInvoiceAsStringRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "OrdersAPIService.OrderUploadInvoiceAsString")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2/orders/{merchantOrderNo}/invoice-base64"
	localVarPath = strings.Replace(localVarPath, "{"+"merchantOrderNo"+"}", url.PathEscape(parameterValueToString(r.merchantOrderNo, "merchantOrderNo")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.merchantInvoiceUploadRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
