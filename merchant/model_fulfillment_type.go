/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// FulfillmentType the model 'FulfillmentType'
type FulfillmentType string

// List of FulfillmentType
const (
	FULFILLMENTTYPE_ALL FulfillmentType = "ALL"
	FULFILLMENTTYPE_ONLY_MERCHANT FulfillmentType = "ONLY_MERCHANT"
	FULFILLMENTTYPE_ONLY_CHANNEL FulfillmentType = "ONLY_CHANNEL"
	FULFILLMENTTYPE_MIXED FulfillmentType = "MIXED"
	FULFILLMENTTYPE_INCLUDES_MERCHANT FulfillmentType = "INCLUDES_MERCHANT"
	FULFILLMENTTYPE_INCLUDES_CHANNEL FulfillmentType = "INCLUDES_CHANNEL"
)

// All allowed values of FulfillmentType enum
var AllowedFulfillmentTypeEnumValues = []FulfillmentType{
	"ALL",
	"ONLY_MERCHANT",
	"ONLY_CHANNEL",
	"MIXED",
	"INCLUDES_MERCHANT",
	"INCLUDES_CHANNEL",
}

func (v *FulfillmentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := FulfillmentType(value)
	for _, existing := range AllowedFulfillmentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid FulfillmentType", value)
}

// NewFulfillmentTypeFromValue returns a pointer to a valid FulfillmentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFulfillmentTypeFromValue(v string) (*FulfillmentType, error) {
	ev := FulfillmentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for FulfillmentType: valid values are %v", v, AllowedFulfillmentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FulfillmentType) IsValid() bool {
	for _, existing := range AllowedFulfillmentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to FulfillmentType value
func (v FulfillmentType) Ptr() *FulfillmentType {
	return &v
}

type NullableFulfillmentType struct {
	value *FulfillmentType
	isSet bool
}

func (v NullableFulfillmentType) Get() *FulfillmentType {
	return v.value
}

func (v *NullableFulfillmentType) Set(val *FulfillmentType) {
	v.value = val
	v.isSet = true
}

func (v NullableFulfillmentType) IsSet() bool {
	return v.isSet
}

func (v *NullableFulfillmentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFulfillmentType(val *FulfillmentType) *NullableFulfillmentType {
	return &NullableFulfillmentType{value: val, isSet: true}
}

func (v NullableFulfillmentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFulfillmentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

