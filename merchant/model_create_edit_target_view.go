/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
)

// checks if the CreateEditTargetView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateEditTargetView{}

// CreateEditTargetView struct for CreateEditTargetView
type CreateEditTargetView struct {
	TargetInclVat NullableFloat32 `json:"TargetInclVat,omitempty"`
	TargetExclVat NullableFloat32 `json:"TargetExclVat,omitempty"`
	Month *int32 `json:"Month,omitempty"`
	Year *int32 `json:"Year,omitempty"`
}

// NewCreateEditTargetView instantiates a new CreateEditTargetView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateEditTargetView() *CreateEditTargetView {
	this := CreateEditTargetView{}
	return &this
}

// NewCreateEditTargetViewWithDefaults instantiates a new CreateEditTargetView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateEditTargetViewWithDefaults() *CreateEditTargetView {
	this := CreateEditTargetView{}
	return &this
}

// GetTargetInclVat returns the TargetInclVat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateEditTargetView) GetTargetInclVat() float32 {
	if o == nil || IsNil(o.TargetInclVat.Get()) {
		var ret float32
		return ret
	}
	return *o.TargetInclVat.Get()
}

// GetTargetInclVatOk returns a tuple with the TargetInclVat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateEditTargetView) GetTargetInclVatOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetInclVat.Get(), o.TargetInclVat.IsSet()
}

// HasTargetInclVat returns a boolean if a field has been set.
func (o *CreateEditTargetView) HasTargetInclVat() bool {
	if o != nil && o.TargetInclVat.IsSet() {
		return true
	}

	return false
}

// SetTargetInclVat gets a reference to the given NullableFloat32 and assigns it to the TargetInclVat field.
func (o *CreateEditTargetView) SetTargetInclVat(v float32) {
	o.TargetInclVat.Set(&v)
}
// SetTargetInclVatNil sets the value for TargetInclVat to be an explicit nil
func (o *CreateEditTargetView) SetTargetInclVatNil() {
	o.TargetInclVat.Set(nil)
}

// UnsetTargetInclVat ensures that no value is present for TargetInclVat, not even an explicit nil
func (o *CreateEditTargetView) UnsetTargetInclVat() {
	o.TargetInclVat.Unset()
}

// GetTargetExclVat returns the TargetExclVat field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateEditTargetView) GetTargetExclVat() float32 {
	if o == nil || IsNil(o.TargetExclVat.Get()) {
		var ret float32
		return ret
	}
	return *o.TargetExclVat.Get()
}

// GetTargetExclVatOk returns a tuple with the TargetExclVat field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateEditTargetView) GetTargetExclVatOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetExclVat.Get(), o.TargetExclVat.IsSet()
}

// HasTargetExclVat returns a boolean if a field has been set.
func (o *CreateEditTargetView) HasTargetExclVat() bool {
	if o != nil && o.TargetExclVat.IsSet() {
		return true
	}

	return false
}

// SetTargetExclVat gets a reference to the given NullableFloat32 and assigns it to the TargetExclVat field.
func (o *CreateEditTargetView) SetTargetExclVat(v float32) {
	o.TargetExclVat.Set(&v)
}
// SetTargetExclVatNil sets the value for TargetExclVat to be an explicit nil
func (o *CreateEditTargetView) SetTargetExclVatNil() {
	o.TargetExclVat.Set(nil)
}

// UnsetTargetExclVat ensures that no value is present for TargetExclVat, not even an explicit nil
func (o *CreateEditTargetView) UnsetTargetExclVat() {
	o.TargetExclVat.Unset()
}

// GetMonth returns the Month field value if set, zero value otherwise.
func (o *CreateEditTargetView) GetMonth() int32 {
	if o == nil || IsNil(o.Month) {
		var ret int32
		return ret
	}
	return *o.Month
}

// GetMonthOk returns a tuple with the Month field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEditTargetView) GetMonthOk() (*int32, bool) {
	if o == nil || IsNil(o.Month) {
		return nil, false
	}
	return o.Month, true
}

// HasMonth returns a boolean if a field has been set.
func (o *CreateEditTargetView) HasMonth() bool {
	if o != nil && !IsNil(o.Month) {
		return true
	}

	return false
}

// SetMonth gets a reference to the given int32 and assigns it to the Month field.
func (o *CreateEditTargetView) SetMonth(v int32) {
	o.Month = &v
}

// GetYear returns the Year field value if set, zero value otherwise.
func (o *CreateEditTargetView) GetYear() int32 {
	if o == nil || IsNil(o.Year) {
		var ret int32
		return ret
	}
	return *o.Year
}

// GetYearOk returns a tuple with the Year field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateEditTargetView) GetYearOk() (*int32, bool) {
	if o == nil || IsNil(o.Year) {
		return nil, false
	}
	return o.Year, true
}

// HasYear returns a boolean if a field has been set.
func (o *CreateEditTargetView) HasYear() bool {
	if o != nil && !IsNil(o.Year) {
		return true
	}

	return false
}

// SetYear gets a reference to the given int32 and assigns it to the Year field.
func (o *CreateEditTargetView) SetYear(v int32) {
	o.Year = &v
}

func (o CreateEditTargetView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateEditTargetView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TargetInclVat.IsSet() {
		toSerialize["TargetInclVat"] = o.TargetInclVat.Get()
	}
	if o.TargetExclVat.IsSet() {
		toSerialize["TargetExclVat"] = o.TargetExclVat.Get()
	}
	if !IsNil(o.Month) {
		toSerialize["Month"] = o.Month
	}
	if !IsNil(o.Year) {
		toSerialize["Year"] = o.Year
	}
	return toSerialize, nil
}

type NullableCreateEditTargetView struct {
	value *CreateEditTargetView
	isSet bool
}

func (v NullableCreateEditTargetView) Get() *CreateEditTargetView {
	return v.value
}

func (v *NullableCreateEditTargetView) Set(val *CreateEditTargetView) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateEditTargetView) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateEditTargetView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateEditTargetView(val *CreateEditTargetView) *NullableCreateEditTargetView {
	return &NullableCreateEditTargetView{value: val, isSet: true}
}

func (v NullableCreateEditTargetView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateEditTargetView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


