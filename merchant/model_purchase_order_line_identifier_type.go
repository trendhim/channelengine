/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// PurchaseOrderLineIdentifierType the model 'PurchaseOrderLineIdentifierType'
type PurchaseOrderLineIdentifierType string

// List of PurchaseOrderLineIdentifierType
const (
	PURCHASEORDERLINEIDENTIFIERTYPE_PURCHASE_ORDER_LINE_ID PurchaseOrderLineIdentifierType = "PURCHASE_ORDER_LINE_ID"
	PURCHASEORDERLINEIDENTIFIERTYPE_CHANNEL_PRODUCT_NO PurchaseOrderLineIdentifierType = "CHANNEL_PRODUCT_NO"
	PURCHASEORDERLINEIDENTIFIERTYPE_MERCHANT_PRODUCT_NO PurchaseOrderLineIdentifierType = "MERCHANT_PRODUCT_NO"
)

// All allowed values of PurchaseOrderLineIdentifierType enum
var AllowedPurchaseOrderLineIdentifierTypeEnumValues = []PurchaseOrderLineIdentifierType{
	"PURCHASE_ORDER_LINE_ID",
	"CHANNEL_PRODUCT_NO",
	"MERCHANT_PRODUCT_NO",
}

func (v *PurchaseOrderLineIdentifierType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PurchaseOrderLineIdentifierType(value)
	for _, existing := range AllowedPurchaseOrderLineIdentifierTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PurchaseOrderLineIdentifierType", value)
}

// NewPurchaseOrderLineIdentifierTypeFromValue returns a pointer to a valid PurchaseOrderLineIdentifierType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPurchaseOrderLineIdentifierTypeFromValue(v string) (*PurchaseOrderLineIdentifierType, error) {
	ev := PurchaseOrderLineIdentifierType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PurchaseOrderLineIdentifierType: valid values are %v", v, AllowedPurchaseOrderLineIdentifierTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PurchaseOrderLineIdentifierType) IsValid() bool {
	for _, existing := range AllowedPurchaseOrderLineIdentifierTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PurchaseOrderLineIdentifierType value
func (v PurchaseOrderLineIdentifierType) Ptr() *PurchaseOrderLineIdentifierType {
	return &v
}

type NullablePurchaseOrderLineIdentifierType struct {
	value *PurchaseOrderLineIdentifierType
	isSet bool
}

func (v NullablePurchaseOrderLineIdentifierType) Get() *PurchaseOrderLineIdentifierType {
	return v.value
}

func (v *NullablePurchaseOrderLineIdentifierType) Set(val *PurchaseOrderLineIdentifierType) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseOrderLineIdentifierType) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseOrderLineIdentifierType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseOrderLineIdentifierType(val *PurchaseOrderLineIdentifierType) *NullablePurchaseOrderLineIdentifierType {
	return &NullablePurchaseOrderLineIdentifierType{value: val, isSet: true}
}

func (v NullablePurchaseOrderLineIdentifierType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseOrderLineIdentifierType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

