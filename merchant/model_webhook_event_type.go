/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// WebhookEventType the model 'WebhookEventType'
type WebhookEventType string

// List of WebhookEventType
const (
	WEBHOOKEVENTTYPE_ORDERS_CREATE WebhookEventType = "ORDERS_CREATE"
	WEBHOOKEVENTTYPE_PRODUCTS_CHANGE WebhookEventType = "PRODUCTS_CHANGE"
	WEBHOOKEVENTTYPE_RETURNS_CHANGE WebhookEventType = "RETURNS_CHANGE"
	WEBHOOKEVENTTYPE_SHIPMENTS_CHANGE WebhookEventType = "SHIPMENTS_CHANGE"
	WEBHOOKEVENTTYPE_NOTIFICATIONS_CREATE WebhookEventType = "NOTIFICATIONS_CREATE"
	WEBHOOKEVENTTYPE_BUNDLE_PRODUCTS_CHANGE WebhookEventType = "BUNDLE_PRODUCTS_CHANGE"
	WEBHOOKEVENTTYPE_ORDERS_CHANGE WebhookEventType = "ORDERS_CHANGE"
)

// All allowed values of WebhookEventType enum
var AllowedWebhookEventTypeEnumValues = []WebhookEventType{
	"ORDERS_CREATE",
	"PRODUCTS_CHANGE",
	"RETURNS_CHANGE",
	"SHIPMENTS_CHANGE",
	"NOTIFICATIONS_CREATE",
	"BUNDLE_PRODUCTS_CHANGE",
	"ORDERS_CHANGE",
}

func (v *WebhookEventType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WebhookEventType(value)
	for _, existing := range AllowedWebhookEventTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WebhookEventType", value)
}

// NewWebhookEventTypeFromValue returns a pointer to a valid WebhookEventType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWebhookEventTypeFromValue(v string) (*WebhookEventType, error) {
	ev := WebhookEventType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WebhookEventType: valid values are %v", v, AllowedWebhookEventTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WebhookEventType) IsValid() bool {
	for _, existing := range AllowedWebhookEventTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WebhookEventType value
func (v WebhookEventType) Ptr() *WebhookEventType {
	return &v
}

type NullableWebhookEventType struct {
	value *WebhookEventType
	isSet bool
}

func (v NullableWebhookEventType) Get() *WebhookEventType {
	return v.value
}

func (v *NullableWebhookEventType) Set(val *WebhookEventType) {
	v.value = val
	v.isSet = true
}

func (v NullableWebhookEventType) IsSet() bool {
	return v.isSet
}

func (v *NullableWebhookEventType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWebhookEventType(val *WebhookEventType) *NullableWebhookEventType {
	return &NullableWebhookEventType{value: val, isSet: true}
}

func (v NullableWebhookEventType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWebhookEventType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

