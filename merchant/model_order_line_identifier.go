/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// OrderLineIdentifier the model 'OrderLineIdentifier'
type OrderLineIdentifier string

// List of OrderLineIdentifier
const (
	ORDERLINEIDENTIFIER_ORDER_LINE_ID OrderLineIdentifier = "ORDER_LINE_ID"
	ORDERLINEIDENTIFIER_CHANNEL_ORDER_LINE_NO OrderLineIdentifier = "CHANNEL_ORDER_LINE_NO"
	ORDERLINEIDENTIFIER_MERCHANT_ORDER_LINE_NO OrderLineIdentifier = "MERCHANT_ORDER_LINE_NO"
	ORDERLINEIDENTIFIER_PRODUCT_ID OrderLineIdentifier = "PRODUCT_ID"
	ORDERLINEIDENTIFIER_PRODUCT_GTIN OrderLineIdentifier = "PRODUCT_GTIN"
	ORDERLINEIDENTIFIER_CHANNEL_PRODUCT_NO OrderLineIdentifier = "CHANNEL_PRODUCT_NO"
	ORDERLINEIDENTIFIER_MERCHANT_PRODUCT_NO OrderLineIdentifier = "MERCHANT_PRODUCT_NO"
)

// All allowed values of OrderLineIdentifier enum
var AllowedOrderLineIdentifierEnumValues = []OrderLineIdentifier{
	"ORDER_LINE_ID",
	"CHANNEL_ORDER_LINE_NO",
	"MERCHANT_ORDER_LINE_NO",
	"PRODUCT_ID",
	"PRODUCT_GTIN",
	"CHANNEL_PRODUCT_NO",
	"MERCHANT_PRODUCT_NO",
}

func (v *OrderLineIdentifier) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderLineIdentifier(value)
	for _, existing := range AllowedOrderLineIdentifierEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderLineIdentifier", value)
}

// NewOrderLineIdentifierFromValue returns a pointer to a valid OrderLineIdentifier
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderLineIdentifierFromValue(v string) (*OrderLineIdentifier, error) {
	ev := OrderLineIdentifier(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderLineIdentifier: valid values are %v", v, AllowedOrderLineIdentifierEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderLineIdentifier) IsValid() bool {
	for _, existing := range AllowedOrderLineIdentifierEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderLineIdentifier value
func (v OrderLineIdentifier) Ptr() *OrderLineIdentifier {
	return &v
}

type NullableOrderLineIdentifier struct {
	value *OrderLineIdentifier
	isSet bool
}

func (v NullableOrderLineIdentifier) Get() *OrderLineIdentifier {
	return v.value
}

func (v *NullableOrderLineIdentifier) Set(val *OrderLineIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderLineIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderLineIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderLineIdentifier(val *OrderLineIdentifier) *NullableOrderLineIdentifier {
	return &NullableOrderLineIdentifier{value: val, isSet: true}
}

func (v NullableOrderLineIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderLineIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

