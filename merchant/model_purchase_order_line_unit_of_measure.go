/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// PurchaseOrderLineUnitOfMeasure the model 'PurchaseOrderLineUnitOfMeasure'
type PurchaseOrderLineUnitOfMeasure string

// List of PurchaseOrderLineUnitOfMeasure
const (
	PURCHASEORDERLINEUNITOFMEASURE_CASES PurchaseOrderLineUnitOfMeasure = "CASES"
	PURCHASEORDERLINEUNITOFMEASURE_EACHES PurchaseOrderLineUnitOfMeasure = "EACHES"
)

// All allowed values of PurchaseOrderLineUnitOfMeasure enum
var AllowedPurchaseOrderLineUnitOfMeasureEnumValues = []PurchaseOrderLineUnitOfMeasure{
	"CASES",
	"EACHES",
}

func (v *PurchaseOrderLineUnitOfMeasure) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PurchaseOrderLineUnitOfMeasure(value)
	for _, existing := range AllowedPurchaseOrderLineUnitOfMeasureEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PurchaseOrderLineUnitOfMeasure", value)
}

// NewPurchaseOrderLineUnitOfMeasureFromValue returns a pointer to a valid PurchaseOrderLineUnitOfMeasure
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPurchaseOrderLineUnitOfMeasureFromValue(v string) (*PurchaseOrderLineUnitOfMeasure, error) {
	ev := PurchaseOrderLineUnitOfMeasure(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PurchaseOrderLineUnitOfMeasure: valid values are %v", v, AllowedPurchaseOrderLineUnitOfMeasureEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PurchaseOrderLineUnitOfMeasure) IsValid() bool {
	for _, existing := range AllowedPurchaseOrderLineUnitOfMeasureEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PurchaseOrderLineUnitOfMeasure value
func (v PurchaseOrderLineUnitOfMeasure) Ptr() *PurchaseOrderLineUnitOfMeasure {
	return &v
}

type NullablePurchaseOrderLineUnitOfMeasure struct {
	value *PurchaseOrderLineUnitOfMeasure
	isSet bool
}

func (v NullablePurchaseOrderLineUnitOfMeasure) Get() *PurchaseOrderLineUnitOfMeasure {
	return v.value
}

func (v *NullablePurchaseOrderLineUnitOfMeasure) Set(val *PurchaseOrderLineUnitOfMeasure) {
	v.value = val
	v.isSet = true
}

func (v NullablePurchaseOrderLineUnitOfMeasure) IsSet() bool {
	return v.isSet
}

func (v *NullablePurchaseOrderLineUnitOfMeasure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePurchaseOrderLineUnitOfMeasure(val *PurchaseOrderLineUnitOfMeasure) *NullablePurchaseOrderLineUnitOfMeasure {
	return &NullablePurchaseOrderLineUnitOfMeasure{value: val, isSet: true}
}

func (v NullablePurchaseOrderLineUnitOfMeasure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePurchaseOrderLineUnitOfMeasure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

