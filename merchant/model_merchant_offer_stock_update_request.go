/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MerchantOfferStockUpdateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MerchantOfferStockUpdateRequest{}

// MerchantOfferStockUpdateRequest struct for MerchantOfferStockUpdateRequest
type MerchantOfferStockUpdateRequest struct {
	// The unique product reference used by the Merchant (sku).
	MerchantProductNo string `json:"MerchantProductNo"`
	// Stock locations data
	StockLocations []MerchantStockLocationUpdateRequest `json:"StockLocations"`
}

type _MerchantOfferStockUpdateRequest MerchantOfferStockUpdateRequest

// NewMerchantOfferStockUpdateRequest instantiates a new MerchantOfferStockUpdateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerchantOfferStockUpdateRequest(merchantProductNo string, stockLocations []MerchantStockLocationUpdateRequest) *MerchantOfferStockUpdateRequest {
	this := MerchantOfferStockUpdateRequest{}
	this.MerchantProductNo = merchantProductNo
	this.StockLocations = stockLocations
	return &this
}

// NewMerchantOfferStockUpdateRequestWithDefaults instantiates a new MerchantOfferStockUpdateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerchantOfferStockUpdateRequestWithDefaults() *MerchantOfferStockUpdateRequest {
	this := MerchantOfferStockUpdateRequest{}
	return &this
}

// GetMerchantProductNo returns the MerchantProductNo field value
func (o *MerchantOfferStockUpdateRequest) GetMerchantProductNo() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.MerchantProductNo
}

// GetMerchantProductNoOk returns a tuple with the MerchantProductNo field value
// and a boolean to check if the value has been set.
func (o *MerchantOfferStockUpdateRequest) GetMerchantProductNoOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MerchantProductNo, true
}

// SetMerchantProductNo sets field value
func (o *MerchantOfferStockUpdateRequest) SetMerchantProductNo(v string) {
	o.MerchantProductNo = v
}

// GetStockLocations returns the StockLocations field value
func (o *MerchantOfferStockUpdateRequest) GetStockLocations() []MerchantStockLocationUpdateRequest {
	if o == nil {
		var ret []MerchantStockLocationUpdateRequest
		return ret
	}

	return o.StockLocations
}

// GetStockLocationsOk returns a tuple with the StockLocations field value
// and a boolean to check if the value has been set.
func (o *MerchantOfferStockUpdateRequest) GetStockLocationsOk() ([]MerchantStockLocationUpdateRequest, bool) {
	if o == nil {
		return nil, false
	}
	return o.StockLocations, true
}

// SetStockLocations sets field value
func (o *MerchantOfferStockUpdateRequest) SetStockLocations(v []MerchantStockLocationUpdateRequest) {
	o.StockLocations = v
}

func (o MerchantOfferStockUpdateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MerchantOfferStockUpdateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["MerchantProductNo"] = o.MerchantProductNo
	toSerialize["StockLocations"] = o.StockLocations
	return toSerialize, nil
}

func (o *MerchantOfferStockUpdateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"MerchantProductNo",
		"StockLocations",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMerchantOfferStockUpdateRequest := _MerchantOfferStockUpdateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMerchantOfferStockUpdateRequest)

	if err != nil {
		return err
	}

	*o = MerchantOfferStockUpdateRequest(varMerchantOfferStockUpdateRequest)

	return err
}

type NullableMerchantOfferStockUpdateRequest struct {
	value *MerchantOfferStockUpdateRequest
	isSet bool
}

func (v NullableMerchantOfferStockUpdateRequest) Get() *MerchantOfferStockUpdateRequest {
	return v.value
}

func (v *NullableMerchantOfferStockUpdateRequest) Set(val *MerchantOfferStockUpdateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchantOfferStockUpdateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchantOfferStockUpdateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchantOfferStockUpdateRequest(val *MerchantOfferStockUpdateRequest) *NullableMerchantOfferStockUpdateRequest {
	return &NullableMerchantOfferStockUpdateRequest{value: val, isSet: true}
}

func (v NullableMerchantOfferStockUpdateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchantOfferStockUpdateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


