/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"time"
)

// checks if the MerchantFulfillmentStockLocationItemResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MerchantFulfillmentStockLocationItemResponse{}

// MerchantFulfillmentStockLocationItemResponse struct for MerchantFulfillmentStockLocationItemResponse
type MerchantFulfillmentStockLocationItemResponse struct {
	// The ChannelEngine id of the stock location.
	Id *int32 `json:"Id,omitempty"`
	// The ChannelEngine name of the stock location.
	Name NullableString `json:"Name,omitempty"`
	// Total quantity reserved for orders.
	ReservedQuantity *int32 `json:"ReservedQuantity,omitempty"`
	// The quantity that is available for fulfillment orders.
	AvailableQuantity *int32 `json:"AvailableQuantity,omitempty"`
	// Quantity pending customer order
	AllocatedQuantity *int32 `json:"AllocatedQuantity,omitempty"`
	// Quantity in transit / 'transshipment' (Amazon)
	InTransitQuantity *int32 `json:"InTransitQuantity,omitempty"`
	// Quantity that is in processing at the fulfillment warehouse (center)
	FulfillmentCenterProcessingQuantity *int32 `json:"FulfillmentCenterProcessingQuantity,omitempty"`
	// The number of units in defective disposition.
	DefectiveQuantity *int32 `json:"DefectiveQuantity,omitempty"`
	// The number of units in expired disposition.
	ExpiredQuantity *int32 `json:"ExpiredQuantity,omitempty"`
	// The number of units in warehouse damaged disposition.
	WarehouseDamagedQuantity *int32 `json:"WarehouseDamagedQuantity,omitempty"`
	// The number of units in customer damaged disposition.
	CustomerDamagedQuantity *int32 `json:"CustomerDamagedQuantity,omitempty"`
	// The number of units in carrier damaged disposition.
	CarrierDamagedQuantity *int32 `json:"CarrierDamagedQuantity,omitempty"`
	// The number of units in pending pickup disposition.
	PendingPickupQuantity *int32 `json:"PendingPickupQuantity,omitempty"`
	// Total quantity that is inbound (in inbound [aka fulfillment] shipment from the seller to the fulfillment warehouse)
	InboundQuantity *int32 `json:"InboundQuantity,omitempty"`
	// Total quantity in on going returns
	ReturnQuantity *int32 `json:"ReturnQuantity,omitempty"`
	// Quantity that is being researched
	ResearchingQuantity *int32 `json:"ResearchingQuantity,omitempty"`
	// The timestamp of the last stock update for the stock location.
	UpdatedAt *time.Time `json:"UpdatedAt,omitempty"`
}

// NewMerchantFulfillmentStockLocationItemResponse instantiates a new MerchantFulfillmentStockLocationItemResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerchantFulfillmentStockLocationItemResponse() *MerchantFulfillmentStockLocationItemResponse {
	this := MerchantFulfillmentStockLocationItemResponse{}
	return &this
}

// NewMerchantFulfillmentStockLocationItemResponseWithDefaults instantiates a new MerchantFulfillmentStockLocationItemResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerchantFulfillmentStockLocationItemResponseWithDefaults() *MerchantFulfillmentStockLocationItemResponse {
	this := MerchantFulfillmentStockLocationItemResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MerchantFulfillmentStockLocationItemResponse) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetId(v int32) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MerchantFulfillmentStockLocationItemResponse) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MerchantFulfillmentStockLocationItemResponse) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MerchantFulfillmentStockLocationItemResponse) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MerchantFulfillmentStockLocationItemResponse) UnsetName() {
	o.Name.Unset()
}

// GetReservedQuantity returns the ReservedQuantity field value if set, zero value otherwise.
func (o *MerchantFulfillmentStockLocationItemResponse) GetReservedQuantity() int32 {
	if o == nil || IsNil(o.ReservedQuantity) {
		var ret int32
		return ret
	}
	return *o.ReservedQuantity
}

// GetReservedQuantityOk returns a tuple with the ReservedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) GetReservedQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.ReservedQuantity) {
		return nil, false
	}
	return o.ReservedQuantity, true
}

// HasReservedQuantity returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasReservedQuantity() bool {
	if o != nil && !IsNil(o.ReservedQuantity) {
		return true
	}

	return false
}

// SetReservedQuantity gets a reference to the given int32 and assigns it to the ReservedQuantity field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetReservedQuantity(v int32) {
	o.ReservedQuantity = &v
}

// GetAvailableQuantity returns the AvailableQuantity field value if set, zero value otherwise.
func (o *MerchantFulfillmentStockLocationItemResponse) GetAvailableQuantity() int32 {
	if o == nil || IsNil(o.AvailableQuantity) {
		var ret int32
		return ret
	}
	return *o.AvailableQuantity
}

// GetAvailableQuantityOk returns a tuple with the AvailableQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) GetAvailableQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.AvailableQuantity) {
		return nil, false
	}
	return o.AvailableQuantity, true
}

// HasAvailableQuantity returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasAvailableQuantity() bool {
	if o != nil && !IsNil(o.AvailableQuantity) {
		return true
	}

	return false
}

// SetAvailableQuantity gets a reference to the given int32 and assigns it to the AvailableQuantity field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetAvailableQuantity(v int32) {
	o.AvailableQuantity = &v
}

// GetAllocatedQuantity returns the AllocatedQuantity field value if set, zero value otherwise.
func (o *MerchantFulfillmentStockLocationItemResponse) GetAllocatedQuantity() int32 {
	if o == nil || IsNil(o.AllocatedQuantity) {
		var ret int32
		return ret
	}
	return *o.AllocatedQuantity
}

// GetAllocatedQuantityOk returns a tuple with the AllocatedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) GetAllocatedQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.AllocatedQuantity) {
		return nil, false
	}
	return o.AllocatedQuantity, true
}

// HasAllocatedQuantity returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasAllocatedQuantity() bool {
	if o != nil && !IsNil(o.AllocatedQuantity) {
		return true
	}

	return false
}

// SetAllocatedQuantity gets a reference to the given int32 and assigns it to the AllocatedQuantity field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetAllocatedQuantity(v int32) {
	o.AllocatedQuantity = &v
}

// GetInTransitQuantity returns the InTransitQuantity field value if set, zero value otherwise.
func (o *MerchantFulfillmentStockLocationItemResponse) GetInTransitQuantity() int32 {
	if o == nil || IsNil(o.InTransitQuantity) {
		var ret int32
		return ret
	}
	return *o.InTransitQuantity
}

// GetInTransitQuantityOk returns a tuple with the InTransitQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) GetInTransitQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.InTransitQuantity) {
		return nil, false
	}
	return o.InTransitQuantity, true
}

// HasInTransitQuantity returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasInTransitQuantity() bool {
	if o != nil && !IsNil(o.InTransitQuantity) {
		return true
	}

	return false
}

// SetInTransitQuantity gets a reference to the given int32 and assigns it to the InTransitQuantity field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetInTransitQuantity(v int32) {
	o.InTransitQuantity = &v
}

// GetFulfillmentCenterProcessingQuantity returns the FulfillmentCenterProcessingQuantity field value if set, zero value otherwise.
func (o *MerchantFulfillmentStockLocationItemResponse) GetFulfillmentCenterProcessingQuantity() int32 {
	if o == nil || IsNil(o.FulfillmentCenterProcessingQuantity) {
		var ret int32
		return ret
	}
	return *o.FulfillmentCenterProcessingQuantity
}

// GetFulfillmentCenterProcessingQuantityOk returns a tuple with the FulfillmentCenterProcessingQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) GetFulfillmentCenterProcessingQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.FulfillmentCenterProcessingQuantity) {
		return nil, false
	}
	return o.FulfillmentCenterProcessingQuantity, true
}

// HasFulfillmentCenterProcessingQuantity returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasFulfillmentCenterProcessingQuantity() bool {
	if o != nil && !IsNil(o.FulfillmentCenterProcessingQuantity) {
		return true
	}

	return false
}

// SetFulfillmentCenterProcessingQuantity gets a reference to the given int32 and assigns it to the FulfillmentCenterProcessingQuantity field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetFulfillmentCenterProcessingQuantity(v int32) {
	o.FulfillmentCenterProcessingQuantity = &v
}

// GetDefectiveQuantity returns the DefectiveQuantity field value if set, zero value otherwise.
func (o *MerchantFulfillmentStockLocationItemResponse) GetDefectiveQuantity() int32 {
	if o == nil || IsNil(o.DefectiveQuantity) {
		var ret int32
		return ret
	}
	return *o.DefectiveQuantity
}

// GetDefectiveQuantityOk returns a tuple with the DefectiveQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) GetDefectiveQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.DefectiveQuantity) {
		return nil, false
	}
	return o.DefectiveQuantity, true
}

// HasDefectiveQuantity returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasDefectiveQuantity() bool {
	if o != nil && !IsNil(o.DefectiveQuantity) {
		return true
	}

	return false
}

// SetDefectiveQuantity gets a reference to the given int32 and assigns it to the DefectiveQuantity field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetDefectiveQuantity(v int32) {
	o.DefectiveQuantity = &v
}

// GetExpiredQuantity returns the ExpiredQuantity field value if set, zero value otherwise.
func (o *MerchantFulfillmentStockLocationItemResponse) GetExpiredQuantity() int32 {
	if o == nil || IsNil(o.ExpiredQuantity) {
		var ret int32
		return ret
	}
	return *o.ExpiredQuantity
}

// GetExpiredQuantityOk returns a tuple with the ExpiredQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) GetExpiredQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.ExpiredQuantity) {
		return nil, false
	}
	return o.ExpiredQuantity, true
}

// HasExpiredQuantity returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasExpiredQuantity() bool {
	if o != nil && !IsNil(o.ExpiredQuantity) {
		return true
	}

	return false
}

// SetExpiredQuantity gets a reference to the given int32 and assigns it to the ExpiredQuantity field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetExpiredQuantity(v int32) {
	o.ExpiredQuantity = &v
}

// GetWarehouseDamagedQuantity returns the WarehouseDamagedQuantity field value if set, zero value otherwise.
func (o *MerchantFulfillmentStockLocationItemResponse) GetWarehouseDamagedQuantity() int32 {
	if o == nil || IsNil(o.WarehouseDamagedQuantity) {
		var ret int32
		return ret
	}
	return *o.WarehouseDamagedQuantity
}

// GetWarehouseDamagedQuantityOk returns a tuple with the WarehouseDamagedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) GetWarehouseDamagedQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.WarehouseDamagedQuantity) {
		return nil, false
	}
	return o.WarehouseDamagedQuantity, true
}

// HasWarehouseDamagedQuantity returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasWarehouseDamagedQuantity() bool {
	if o != nil && !IsNil(o.WarehouseDamagedQuantity) {
		return true
	}

	return false
}

// SetWarehouseDamagedQuantity gets a reference to the given int32 and assigns it to the WarehouseDamagedQuantity field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetWarehouseDamagedQuantity(v int32) {
	o.WarehouseDamagedQuantity = &v
}

// GetCustomerDamagedQuantity returns the CustomerDamagedQuantity field value if set, zero value otherwise.
func (o *MerchantFulfillmentStockLocationItemResponse) GetCustomerDamagedQuantity() int32 {
	if o == nil || IsNil(o.CustomerDamagedQuantity) {
		var ret int32
		return ret
	}
	return *o.CustomerDamagedQuantity
}

// GetCustomerDamagedQuantityOk returns a tuple with the CustomerDamagedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) GetCustomerDamagedQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.CustomerDamagedQuantity) {
		return nil, false
	}
	return o.CustomerDamagedQuantity, true
}

// HasCustomerDamagedQuantity returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasCustomerDamagedQuantity() bool {
	if o != nil && !IsNil(o.CustomerDamagedQuantity) {
		return true
	}

	return false
}

// SetCustomerDamagedQuantity gets a reference to the given int32 and assigns it to the CustomerDamagedQuantity field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetCustomerDamagedQuantity(v int32) {
	o.CustomerDamagedQuantity = &v
}

// GetCarrierDamagedQuantity returns the CarrierDamagedQuantity field value if set, zero value otherwise.
func (o *MerchantFulfillmentStockLocationItemResponse) GetCarrierDamagedQuantity() int32 {
	if o == nil || IsNil(o.CarrierDamagedQuantity) {
		var ret int32
		return ret
	}
	return *o.CarrierDamagedQuantity
}

// GetCarrierDamagedQuantityOk returns a tuple with the CarrierDamagedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) GetCarrierDamagedQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.CarrierDamagedQuantity) {
		return nil, false
	}
	return o.CarrierDamagedQuantity, true
}

// HasCarrierDamagedQuantity returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasCarrierDamagedQuantity() bool {
	if o != nil && !IsNil(o.CarrierDamagedQuantity) {
		return true
	}

	return false
}

// SetCarrierDamagedQuantity gets a reference to the given int32 and assigns it to the CarrierDamagedQuantity field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetCarrierDamagedQuantity(v int32) {
	o.CarrierDamagedQuantity = &v
}

// GetPendingPickupQuantity returns the PendingPickupQuantity field value if set, zero value otherwise.
func (o *MerchantFulfillmentStockLocationItemResponse) GetPendingPickupQuantity() int32 {
	if o == nil || IsNil(o.PendingPickupQuantity) {
		var ret int32
		return ret
	}
	return *o.PendingPickupQuantity
}

// GetPendingPickupQuantityOk returns a tuple with the PendingPickupQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) GetPendingPickupQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.PendingPickupQuantity) {
		return nil, false
	}
	return o.PendingPickupQuantity, true
}

// HasPendingPickupQuantity returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasPendingPickupQuantity() bool {
	if o != nil && !IsNil(o.PendingPickupQuantity) {
		return true
	}

	return false
}

// SetPendingPickupQuantity gets a reference to the given int32 and assigns it to the PendingPickupQuantity field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetPendingPickupQuantity(v int32) {
	o.PendingPickupQuantity = &v
}

// GetInboundQuantity returns the InboundQuantity field value if set, zero value otherwise.
func (o *MerchantFulfillmentStockLocationItemResponse) GetInboundQuantity() int32 {
	if o == nil || IsNil(o.InboundQuantity) {
		var ret int32
		return ret
	}
	return *o.InboundQuantity
}

// GetInboundQuantityOk returns a tuple with the InboundQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) GetInboundQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.InboundQuantity) {
		return nil, false
	}
	return o.InboundQuantity, true
}

// HasInboundQuantity returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasInboundQuantity() bool {
	if o != nil && !IsNil(o.InboundQuantity) {
		return true
	}

	return false
}

// SetInboundQuantity gets a reference to the given int32 and assigns it to the InboundQuantity field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetInboundQuantity(v int32) {
	o.InboundQuantity = &v
}

// GetReturnQuantity returns the ReturnQuantity field value if set, zero value otherwise.
func (o *MerchantFulfillmentStockLocationItemResponse) GetReturnQuantity() int32 {
	if o == nil || IsNil(o.ReturnQuantity) {
		var ret int32
		return ret
	}
	return *o.ReturnQuantity
}

// GetReturnQuantityOk returns a tuple with the ReturnQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) GetReturnQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.ReturnQuantity) {
		return nil, false
	}
	return o.ReturnQuantity, true
}

// HasReturnQuantity returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasReturnQuantity() bool {
	if o != nil && !IsNil(o.ReturnQuantity) {
		return true
	}

	return false
}

// SetReturnQuantity gets a reference to the given int32 and assigns it to the ReturnQuantity field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetReturnQuantity(v int32) {
	o.ReturnQuantity = &v
}

// GetResearchingQuantity returns the ResearchingQuantity field value if set, zero value otherwise.
func (o *MerchantFulfillmentStockLocationItemResponse) GetResearchingQuantity() int32 {
	if o == nil || IsNil(o.ResearchingQuantity) {
		var ret int32
		return ret
	}
	return *o.ResearchingQuantity
}

// GetResearchingQuantityOk returns a tuple with the ResearchingQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) GetResearchingQuantityOk() (*int32, bool) {
	if o == nil || IsNil(o.ResearchingQuantity) {
		return nil, false
	}
	return o.ResearchingQuantity, true
}

// HasResearchingQuantity returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasResearchingQuantity() bool {
	if o != nil && !IsNil(o.ResearchingQuantity) {
		return true
	}

	return false
}

// SetResearchingQuantity gets a reference to the given int32 and assigns it to the ResearchingQuantity field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetResearchingQuantity(v int32) {
	o.ResearchingQuantity = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *MerchantFulfillmentStockLocationItemResponse) GetUpdatedAt() time.Time {
	if o == nil || IsNil(o.UpdatedAt) {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.UpdatedAt) {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *MerchantFulfillmentStockLocationItemResponse) HasUpdatedAt() bool {
	if o != nil && !IsNil(o.UpdatedAt) {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *MerchantFulfillmentStockLocationItemResponse) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o MerchantFulfillmentStockLocationItemResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MerchantFulfillmentStockLocationItemResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if o.Name.IsSet() {
		toSerialize["Name"] = o.Name.Get()
	}
	if !IsNil(o.ReservedQuantity) {
		toSerialize["ReservedQuantity"] = o.ReservedQuantity
	}
	if !IsNil(o.AvailableQuantity) {
		toSerialize["AvailableQuantity"] = o.AvailableQuantity
	}
	if !IsNil(o.AllocatedQuantity) {
		toSerialize["AllocatedQuantity"] = o.AllocatedQuantity
	}
	if !IsNil(o.InTransitQuantity) {
		toSerialize["InTransitQuantity"] = o.InTransitQuantity
	}
	if !IsNil(o.FulfillmentCenterProcessingQuantity) {
		toSerialize["FulfillmentCenterProcessingQuantity"] = o.FulfillmentCenterProcessingQuantity
	}
	if !IsNil(o.DefectiveQuantity) {
		toSerialize["DefectiveQuantity"] = o.DefectiveQuantity
	}
	if !IsNil(o.ExpiredQuantity) {
		toSerialize["ExpiredQuantity"] = o.ExpiredQuantity
	}
	if !IsNil(o.WarehouseDamagedQuantity) {
		toSerialize["WarehouseDamagedQuantity"] = o.WarehouseDamagedQuantity
	}
	if !IsNil(o.CustomerDamagedQuantity) {
		toSerialize["CustomerDamagedQuantity"] = o.CustomerDamagedQuantity
	}
	if !IsNil(o.CarrierDamagedQuantity) {
		toSerialize["CarrierDamagedQuantity"] = o.CarrierDamagedQuantity
	}
	if !IsNil(o.PendingPickupQuantity) {
		toSerialize["PendingPickupQuantity"] = o.PendingPickupQuantity
	}
	if !IsNil(o.InboundQuantity) {
		toSerialize["InboundQuantity"] = o.InboundQuantity
	}
	if !IsNil(o.ReturnQuantity) {
		toSerialize["ReturnQuantity"] = o.ReturnQuantity
	}
	if !IsNil(o.ResearchingQuantity) {
		toSerialize["ResearchingQuantity"] = o.ResearchingQuantity
	}
	if !IsNil(o.UpdatedAt) {
		toSerialize["UpdatedAt"] = o.UpdatedAt
	}
	return toSerialize, nil
}

type NullableMerchantFulfillmentStockLocationItemResponse struct {
	value *MerchantFulfillmentStockLocationItemResponse
	isSet bool
}

func (v NullableMerchantFulfillmentStockLocationItemResponse) Get() *MerchantFulfillmentStockLocationItemResponse {
	return v.value
}

func (v *NullableMerchantFulfillmentStockLocationItemResponse) Set(val *MerchantFulfillmentStockLocationItemResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchantFulfillmentStockLocationItemResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchantFulfillmentStockLocationItemResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchantFulfillmentStockLocationItemResponse(val *MerchantFulfillmentStockLocationItemResponse) *NullableMerchantFulfillmentStockLocationItemResponse {
	return &NullableMerchantFulfillmentStockLocationItemResponse{value: val, isSet: true}
}

func (v NullableMerchantFulfillmentStockLocationItemResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchantFulfillmentStockLocationItemResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


