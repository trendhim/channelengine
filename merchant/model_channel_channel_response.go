/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.13.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
)

// checks if the ChannelChannelResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelChannelResponse{}

// ChannelChannelResponse struct for ChannelChannelResponse
type ChannelChannelResponse struct {
	// The ID of the Channel.
	ChannelId NullableInt32 `json:"ChannelId,omitempty"`
	// A boolean value indicating whether the Channel is enabled.
	IsEnabled *bool `json:"IsEnabled,omitempty"`
	// The name of the Channel.
	ChannelName NullableString `json:"ChannelName,omitempty"`
}

// NewChannelChannelResponse instantiates a new ChannelChannelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelChannelResponse() *ChannelChannelResponse {
	this := ChannelChannelResponse{}
	return &this
}

// NewChannelChannelResponseWithDefaults instantiates a new ChannelChannelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelChannelResponseWithDefaults() *ChannelChannelResponse {
	this := ChannelChannelResponse{}
	return &this
}

// GetChannelId returns the ChannelId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChannelChannelResponse) GetChannelId() int32 {
	if o == nil || IsNil(o.ChannelId.Get()) {
		var ret int32
		return ret
	}
	return *o.ChannelId.Get()
}

// GetChannelIdOk returns a tuple with the ChannelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChannelChannelResponse) GetChannelIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChannelId.Get(), o.ChannelId.IsSet()
}

// HasChannelId returns a boolean if a field has been set.
func (o *ChannelChannelResponse) HasChannelId() bool {
	if o != nil && o.ChannelId.IsSet() {
		return true
	}

	return false
}

// SetChannelId gets a reference to the given NullableInt32 and assigns it to the ChannelId field.
func (o *ChannelChannelResponse) SetChannelId(v int32) {
	o.ChannelId.Set(&v)
}
// SetChannelIdNil sets the value for ChannelId to be an explicit nil
func (o *ChannelChannelResponse) SetChannelIdNil() {
	o.ChannelId.Set(nil)
}

// UnsetChannelId ensures that no value is present for ChannelId, not even an explicit nil
func (o *ChannelChannelResponse) UnsetChannelId() {
	o.ChannelId.Unset()
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise.
func (o *ChannelChannelResponse) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled) {
		var ret bool
		return ret
	}
	return *o.IsEnabled
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelChannelResponse) GetIsEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.IsEnabled) {
		return nil, false
	}
	return o.IsEnabled, true
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *ChannelChannelResponse) HasIsEnabled() bool {
	if o != nil && !IsNil(o.IsEnabled) {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given bool and assigns it to the IsEnabled field.
func (o *ChannelChannelResponse) SetIsEnabled(v bool) {
	o.IsEnabled = &v
}

// GetChannelName returns the ChannelName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChannelChannelResponse) GetChannelName() string {
	if o == nil || IsNil(o.ChannelName.Get()) {
		var ret string
		return ret
	}
	return *o.ChannelName.Get()
}

// GetChannelNameOk returns a tuple with the ChannelName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChannelChannelResponse) GetChannelNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChannelName.Get(), o.ChannelName.IsSet()
}

// HasChannelName returns a boolean if a field has been set.
func (o *ChannelChannelResponse) HasChannelName() bool {
	if o != nil && o.ChannelName.IsSet() {
		return true
	}

	return false
}

// SetChannelName gets a reference to the given NullableString and assigns it to the ChannelName field.
func (o *ChannelChannelResponse) SetChannelName(v string) {
	o.ChannelName.Set(&v)
}
// SetChannelNameNil sets the value for ChannelName to be an explicit nil
func (o *ChannelChannelResponse) SetChannelNameNil() {
	o.ChannelName.Set(nil)
}

// UnsetChannelName ensures that no value is present for ChannelName, not even an explicit nil
func (o *ChannelChannelResponse) UnsetChannelName() {
	o.ChannelName.Unset()
}

func (o ChannelChannelResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelChannelResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ChannelId.IsSet() {
		toSerialize["ChannelId"] = o.ChannelId.Get()
	}
	if !IsNil(o.IsEnabled) {
		toSerialize["IsEnabled"] = o.IsEnabled
	}
	if o.ChannelName.IsSet() {
		toSerialize["ChannelName"] = o.ChannelName.Get()
	}
	return toSerialize, nil
}

type NullableChannelChannelResponse struct {
	value *ChannelChannelResponse
	isSet bool
}

func (v NullableChannelChannelResponse) Get() *ChannelChannelResponse {
	return v.value
}

func (v *NullableChannelChannelResponse) Set(val *ChannelChannelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelChannelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelChannelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelChannelResponse(val *ChannelChannelResponse) *NullableChannelChannelResponse {
	return &NullableChannelChannelResponse{value: val, isSet: true}
}

func (v NullableChannelChannelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelChannelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


