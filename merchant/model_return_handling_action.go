/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// ReturnHandlingAction the model 'ReturnHandlingAction'
type ReturnHandlingAction string

// List of ReturnHandlingAction
const (
	RETURNHANDLINGACTION_REFUND ReturnHandlingAction = "REFUND"
	RETURNHANDLINGACTION_EXCHANGE ReturnHandlingAction = "EXCHANGE"
	RETURNHANDLINGACTION_REPAIR ReturnHandlingAction = "REPAIR"
	RETURNHANDLINGACTION_KEEP ReturnHandlingAction = "KEEP"
	RETURNHANDLINGACTION_REJECT ReturnHandlingAction = "REJECT"
)

// All allowed values of ReturnHandlingAction enum
var AllowedReturnHandlingActionEnumValues = []ReturnHandlingAction{
	"REFUND",
	"EXCHANGE",
	"REPAIR",
	"KEEP",
	"REJECT",
}

func (v *ReturnHandlingAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ReturnHandlingAction(value)
	for _, existing := range AllowedReturnHandlingActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ReturnHandlingAction", value)
}

// NewReturnHandlingActionFromValue returns a pointer to a valid ReturnHandlingAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReturnHandlingActionFromValue(v string) (*ReturnHandlingAction, error) {
	ev := ReturnHandlingAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ReturnHandlingAction: valid values are %v", v, AllowedReturnHandlingActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReturnHandlingAction) IsValid() bool {
	for _, existing := range AllowedReturnHandlingActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ReturnHandlingAction value
func (v ReturnHandlingAction) Ptr() *ReturnHandlingAction {
	return &v
}

type NullableReturnHandlingAction struct {
	value *ReturnHandlingAction
	isSet bool
}

func (v NullableReturnHandlingAction) Get() *ReturnHandlingAction {
	return v.value
}

func (v *NullableReturnHandlingAction) Set(val *ReturnHandlingAction) {
	v.value = val
	v.isSet = true
}

func (v NullableReturnHandlingAction) IsSet() bool {
	return v.isSet
}

func (v *NullableReturnHandlingAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReturnHandlingAction(val *ReturnHandlingAction) *NullableReturnHandlingAction {
	return &NullableReturnHandlingAction{value: val, isSet: true}
}

func (v NullableReturnHandlingAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReturnHandlingAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

