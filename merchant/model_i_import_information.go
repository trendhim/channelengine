/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
)

// checks if the IImportInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IImportInformation{}

// IImportInformation struct for IImportInformation
type IImportInformation struct {
	ImportContainers NullableString `json:"ImportContainers,omitempty"`
	InternationalCommercialTerms NullableString `json:"InternationalCommercialTerms,omitempty"`
	MethodOfPayment NullableString `json:"MethodOfPayment,omitempty"`
	PortOfDelivery NullableString `json:"PortOfDelivery,omitempty"`
	ShippingInstructions NullableString `json:"ShippingInstructions,omitempty"`
	DealCode NullableString `json:"DealCode,omitempty"`
}

// NewIImportInformation instantiates a new IImportInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIImportInformation() *IImportInformation {
	this := IImportInformation{}
	return &this
}

// NewIImportInformationWithDefaults instantiates a new IImportInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIImportInformationWithDefaults() *IImportInformation {
	this := IImportInformation{}
	return &this
}

// GetImportContainers returns the ImportContainers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IImportInformation) GetImportContainers() string {
	if o == nil || IsNil(o.ImportContainers.Get()) {
		var ret string
		return ret
	}
	return *o.ImportContainers.Get()
}

// GetImportContainersOk returns a tuple with the ImportContainers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IImportInformation) GetImportContainersOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ImportContainers.Get(), o.ImportContainers.IsSet()
}

// HasImportContainers returns a boolean if a field has been set.
func (o *IImportInformation) HasImportContainers() bool {
	if o != nil && o.ImportContainers.IsSet() {
		return true
	}

	return false
}

// SetImportContainers gets a reference to the given NullableString and assigns it to the ImportContainers field.
func (o *IImportInformation) SetImportContainers(v string) {
	o.ImportContainers.Set(&v)
}
// SetImportContainersNil sets the value for ImportContainers to be an explicit nil
func (o *IImportInformation) SetImportContainersNil() {
	o.ImportContainers.Set(nil)
}

// UnsetImportContainers ensures that no value is present for ImportContainers, not even an explicit nil
func (o *IImportInformation) UnsetImportContainers() {
	o.ImportContainers.Unset()
}

// GetInternationalCommercialTerms returns the InternationalCommercialTerms field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IImportInformation) GetInternationalCommercialTerms() string {
	if o == nil || IsNil(o.InternationalCommercialTerms.Get()) {
		var ret string
		return ret
	}
	return *o.InternationalCommercialTerms.Get()
}

// GetInternationalCommercialTermsOk returns a tuple with the InternationalCommercialTerms field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IImportInformation) GetInternationalCommercialTermsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InternationalCommercialTerms.Get(), o.InternationalCommercialTerms.IsSet()
}

// HasInternationalCommercialTerms returns a boolean if a field has been set.
func (o *IImportInformation) HasInternationalCommercialTerms() bool {
	if o != nil && o.InternationalCommercialTerms.IsSet() {
		return true
	}

	return false
}

// SetInternationalCommercialTerms gets a reference to the given NullableString and assigns it to the InternationalCommercialTerms field.
func (o *IImportInformation) SetInternationalCommercialTerms(v string) {
	o.InternationalCommercialTerms.Set(&v)
}
// SetInternationalCommercialTermsNil sets the value for InternationalCommercialTerms to be an explicit nil
func (o *IImportInformation) SetInternationalCommercialTermsNil() {
	o.InternationalCommercialTerms.Set(nil)
}

// UnsetInternationalCommercialTerms ensures that no value is present for InternationalCommercialTerms, not even an explicit nil
func (o *IImportInformation) UnsetInternationalCommercialTerms() {
	o.InternationalCommercialTerms.Unset()
}

// GetMethodOfPayment returns the MethodOfPayment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IImportInformation) GetMethodOfPayment() string {
	if o == nil || IsNil(o.MethodOfPayment.Get()) {
		var ret string
		return ret
	}
	return *o.MethodOfPayment.Get()
}

// GetMethodOfPaymentOk returns a tuple with the MethodOfPayment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IImportInformation) GetMethodOfPaymentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MethodOfPayment.Get(), o.MethodOfPayment.IsSet()
}

// HasMethodOfPayment returns a boolean if a field has been set.
func (o *IImportInformation) HasMethodOfPayment() bool {
	if o != nil && o.MethodOfPayment.IsSet() {
		return true
	}

	return false
}

// SetMethodOfPayment gets a reference to the given NullableString and assigns it to the MethodOfPayment field.
func (o *IImportInformation) SetMethodOfPayment(v string) {
	o.MethodOfPayment.Set(&v)
}
// SetMethodOfPaymentNil sets the value for MethodOfPayment to be an explicit nil
func (o *IImportInformation) SetMethodOfPaymentNil() {
	o.MethodOfPayment.Set(nil)
}

// UnsetMethodOfPayment ensures that no value is present for MethodOfPayment, not even an explicit nil
func (o *IImportInformation) UnsetMethodOfPayment() {
	o.MethodOfPayment.Unset()
}

// GetPortOfDelivery returns the PortOfDelivery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IImportInformation) GetPortOfDelivery() string {
	if o == nil || IsNil(o.PortOfDelivery.Get()) {
		var ret string
		return ret
	}
	return *o.PortOfDelivery.Get()
}

// GetPortOfDeliveryOk returns a tuple with the PortOfDelivery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IImportInformation) GetPortOfDeliveryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PortOfDelivery.Get(), o.PortOfDelivery.IsSet()
}

// HasPortOfDelivery returns a boolean if a field has been set.
func (o *IImportInformation) HasPortOfDelivery() bool {
	if o != nil && o.PortOfDelivery.IsSet() {
		return true
	}

	return false
}

// SetPortOfDelivery gets a reference to the given NullableString and assigns it to the PortOfDelivery field.
func (o *IImportInformation) SetPortOfDelivery(v string) {
	o.PortOfDelivery.Set(&v)
}
// SetPortOfDeliveryNil sets the value for PortOfDelivery to be an explicit nil
func (o *IImportInformation) SetPortOfDeliveryNil() {
	o.PortOfDelivery.Set(nil)
}

// UnsetPortOfDelivery ensures that no value is present for PortOfDelivery, not even an explicit nil
func (o *IImportInformation) UnsetPortOfDelivery() {
	o.PortOfDelivery.Unset()
}

// GetShippingInstructions returns the ShippingInstructions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IImportInformation) GetShippingInstructions() string {
	if o == nil || IsNil(o.ShippingInstructions.Get()) {
		var ret string
		return ret
	}
	return *o.ShippingInstructions.Get()
}

// GetShippingInstructionsOk returns a tuple with the ShippingInstructions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IImportInformation) GetShippingInstructionsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShippingInstructions.Get(), o.ShippingInstructions.IsSet()
}

// HasShippingInstructions returns a boolean if a field has been set.
func (o *IImportInformation) HasShippingInstructions() bool {
	if o != nil && o.ShippingInstructions.IsSet() {
		return true
	}

	return false
}

// SetShippingInstructions gets a reference to the given NullableString and assigns it to the ShippingInstructions field.
func (o *IImportInformation) SetShippingInstructions(v string) {
	o.ShippingInstructions.Set(&v)
}
// SetShippingInstructionsNil sets the value for ShippingInstructions to be an explicit nil
func (o *IImportInformation) SetShippingInstructionsNil() {
	o.ShippingInstructions.Set(nil)
}

// UnsetShippingInstructions ensures that no value is present for ShippingInstructions, not even an explicit nil
func (o *IImportInformation) UnsetShippingInstructions() {
	o.ShippingInstructions.Unset()
}

// GetDealCode returns the DealCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IImportInformation) GetDealCode() string {
	if o == nil || IsNil(o.DealCode.Get()) {
		var ret string
		return ret
	}
	return *o.DealCode.Get()
}

// GetDealCodeOk returns a tuple with the DealCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IImportInformation) GetDealCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DealCode.Get(), o.DealCode.IsSet()
}

// HasDealCode returns a boolean if a field has been set.
func (o *IImportInformation) HasDealCode() bool {
	if o != nil && o.DealCode.IsSet() {
		return true
	}

	return false
}

// SetDealCode gets a reference to the given NullableString and assigns it to the DealCode field.
func (o *IImportInformation) SetDealCode(v string) {
	o.DealCode.Set(&v)
}
// SetDealCodeNil sets the value for DealCode to be an explicit nil
func (o *IImportInformation) SetDealCodeNil() {
	o.DealCode.Set(nil)
}

// UnsetDealCode ensures that no value is present for DealCode, not even an explicit nil
func (o *IImportInformation) UnsetDealCode() {
	o.DealCode.Unset()
}

func (o IImportInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IImportInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ImportContainers.IsSet() {
		toSerialize["ImportContainers"] = o.ImportContainers.Get()
	}
	if o.InternationalCommercialTerms.IsSet() {
		toSerialize["InternationalCommercialTerms"] = o.InternationalCommercialTerms.Get()
	}
	if o.MethodOfPayment.IsSet() {
		toSerialize["MethodOfPayment"] = o.MethodOfPayment.Get()
	}
	if o.PortOfDelivery.IsSet() {
		toSerialize["PortOfDelivery"] = o.PortOfDelivery.Get()
	}
	if o.ShippingInstructions.IsSet() {
		toSerialize["ShippingInstructions"] = o.ShippingInstructions.Get()
	}
	if o.DealCode.IsSet() {
		toSerialize["DealCode"] = o.DealCode.Get()
	}
	return toSerialize, nil
}

type NullableIImportInformation struct {
	value *IImportInformation
	isSet bool
}

func (v NullableIImportInformation) Get() *IImportInformation {
	return v.value
}

func (v *NullableIImportInformation) Set(val *IImportInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableIImportInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableIImportInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIImportInformation(val *IImportInformation) *NullableIImportInformation {
	return &NullableIImportInformation{value: val, isSet: true}
}

func (v NullableIImportInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIImportInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


