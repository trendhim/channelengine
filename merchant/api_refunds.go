/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
	"reflect"
	"time"
)


// RefundsAPIService RefundsAPI service
type RefundsAPIService service

type RefundsAPIRefundAcknowledgeRequest struct {
	ctx context.Context
	ApiService *RefundsAPIService
	singleMerchantAcknowledgeRefundRequest *SingleMerchantAcknowledgeRefundRequest
}

// The refund to acknowledge
func (r RefundsAPIRefundAcknowledgeRequest) SingleMerchantAcknowledgeRefundRequest(singleMerchantAcknowledgeRefundRequest SingleMerchantAcknowledgeRefundRequest) RefundsAPIRefundAcknowledgeRequest {
	r.singleMerchantAcknowledgeRefundRequest = &singleMerchantAcknowledgeRefundRequest
	return r
}

func (r RefundsAPIRefundAcknowledgeRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.RefundAcknowledgeExecute(r)
}

/*
RefundAcknowledge [CLOSED BETA] Acknowledge a refund

Acknowledges a refund<br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RefundsAPIRefundAcknowledgeRequest
*/
func (a *RefundsAPIService) RefundAcknowledge(ctx context.Context) RefundsAPIRefundAcknowledgeRequest {
	return RefundsAPIRefundAcknowledgeRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *RefundsAPIService) RefundAcknowledgeExecute(r RefundsAPIRefundAcknowledgeRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RefundsAPIService.RefundAcknowledge")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/refunds/merchant/acknowledge"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.singleMerchantAcknowledgeRefundRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RefundsAPIRefundCreateRequest struct {
	ctx context.Context
	ApiService *RefundsAPIService
	singleMerchantCreateRefundRequest *SingleMerchantCreateRefundRequest
}

// The refund
func (r RefundsAPIRefundCreateRequest) SingleMerchantCreateRefundRequest(singleMerchantCreateRefundRequest SingleMerchantCreateRefundRequest) RefundsAPIRefundCreateRequest {
	r.singleMerchantCreateRefundRequest = &singleMerchantCreateRefundRequest
	return r
}

func (r RefundsAPIRefundCreateRequest) Execute() (*ApiResponse, *http.Response, error) {
	return r.ApiService.RefundCreateExecute(r)
}

/*
RefundCreate [CLOSED BETA] Create a refund

Creates a new refund<br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RefundsAPIRefundCreateRequest
*/
func (a *RefundsAPIService) RefundCreate(ctx context.Context) RefundsAPIRefundCreateRequest {
	return RefundsAPIRefundCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return ApiResponse
func (a *RefundsAPIService) RefundCreateExecute(r RefundsAPIRefundCreateRequest) (*ApiResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *ApiResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RefundsAPIService.RefundCreate")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/refunds/merchant"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json-patch+json", "application/json", "application/*+json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.singleMerchantCreateRefundRequest
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RefundsAPIRefundGetRequest struct {
	ctx context.Context
	ApiService *RefundsAPIService
	identifier string
	type_ *RefundIdentifier
}

// Specify whether to search by ID, Merchant Refund No or Channel Refund No
func (r RefundsAPIRefundGetRequest) Type_(type_ RefundIdentifier) RefundsAPIRefundGetRequest {
	r.type_ = &type_
	return r
}

func (r RefundsAPIRefundGetRequest) Execute() (*SingleOfIRefund, *http.Response, error) {
	return r.ApiService.RefundGetExecute(r)
}

/*
RefundGet [CLOSED BETA] Get refund by identifier

Gets a single refund by the given identifier<br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param identifier The identifier to search for
 @return RefundsAPIRefundGetRequest
*/
func (a *RefundsAPIService) RefundGet(ctx context.Context, identifier string) RefundsAPIRefundGetRequest {
	return RefundsAPIRefundGetRequest{
		ApiService: a,
		ctx: ctx,
		identifier: identifier,
	}
}

// Execute executes the request
//  @return SingleOfIRefund
func (a *RefundsAPIService) RefundGetExecute(r RefundsAPIRefundGetRequest) (*SingleOfIRefund, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SingleOfIRefund
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RefundsAPIService.RefundGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/refunds/merchant/{identifier}"
	localVarPath = strings.Replace(localVarPath, "{"+"identifier"+"}", url.PathEscape(parameterValueToString(r.identifier, "identifier")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.type_ != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "type", r.type_, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type RefundsAPIRefundGetByFilterRequest struct {
	ctx context.Context
	ApiService *RefundsAPIService
	identifiersIdentifierType *RefundByFilterIdentifier
	identifiersModels *[]string
	channelExportStatusStatuses *[]ChannelExportStatus
	channelExportStatusMaxNumberOfExportAttempts *int32
	reasons *[]RefundReason
	createdDateRangeFromDate *time.Time
	createdDateRangeToDate *time.Time
	channelIds *[]int32
	search *string
	isAcknowledgedByMerchant *bool
	isAcknowledgedByChannel *bool
	fulfillmentType *ModuleFulfillmentType
	creatorType *CreatorType
	externalBatchNos *[]string
	pageIndex *int32
	pageSize *int32
}

// The type of identifier: which identifier to filter on
func (r RefundsAPIRefundGetByFilterRequest) IdentifiersIdentifierType(identifiersIdentifierType RefundByFilterIdentifier) RefundsAPIRefundGetByFilterRequest {
	r.identifiersIdentifierType = &identifiersIdentifierType
	return r
}

// The value (of the selected type) to filter on
func (r RefundsAPIRefundGetByFilterRequest) IdentifiersModels(identifiersModels []string) RefundsAPIRefundGetByFilterRequest {
	r.identifiersModels = &identifiersModels
	return r
}

func (r RefundsAPIRefundGetByFilterRequest) ChannelExportStatusStatuses(channelExportStatusStatuses []ChannelExportStatus) RefundsAPIRefundGetByFilterRequest {
	r.channelExportStatusStatuses = &channelExportStatusStatuses
	return r
}

func (r RefundsAPIRefundGetByFilterRequest) ChannelExportStatusMaxNumberOfExportAttempts(channelExportStatusMaxNumberOfExportAttempts int32) RefundsAPIRefundGetByFilterRequest {
	r.channelExportStatusMaxNumberOfExportAttempts = &channelExportStatusMaxNumberOfExportAttempts
	return r
}

func (r RefundsAPIRefundGetByFilterRequest) Reasons(reasons []RefundReason) RefundsAPIRefundGetByFilterRequest {
	r.reasons = &reasons
	return r
}

func (r RefundsAPIRefundGetByFilterRequest) CreatedDateRangeFromDate(createdDateRangeFromDate time.Time) RefundsAPIRefundGetByFilterRequest {
	r.createdDateRangeFromDate = &createdDateRangeFromDate
	return r
}

func (r RefundsAPIRefundGetByFilterRequest) CreatedDateRangeToDate(createdDateRangeToDate time.Time) RefundsAPIRefundGetByFilterRequest {
	r.createdDateRangeToDate = &createdDateRangeToDate
	return r
}

func (r RefundsAPIRefundGetByFilterRequest) ChannelIds(channelIds []int32) RefundsAPIRefundGetByFilterRequest {
	r.channelIds = &channelIds
	return r
}

func (r RefundsAPIRefundGetByFilterRequest) Search(search string) RefundsAPIRefundGetByFilterRequest {
	r.search = &search
	return r
}

func (r RefundsAPIRefundGetByFilterRequest) IsAcknowledgedByMerchant(isAcknowledgedByMerchant bool) RefundsAPIRefundGetByFilterRequest {
	r.isAcknowledgedByMerchant = &isAcknowledgedByMerchant
	return r
}

func (r RefundsAPIRefundGetByFilterRequest) IsAcknowledgedByChannel(isAcknowledgedByChannel bool) RefundsAPIRefundGetByFilterRequest {
	r.isAcknowledgedByChannel = &isAcknowledgedByChannel
	return r
}

func (r RefundsAPIRefundGetByFilterRequest) FulfillmentType(fulfillmentType ModuleFulfillmentType) RefundsAPIRefundGetByFilterRequest {
	r.fulfillmentType = &fulfillmentType
	return r
}

func (r RefundsAPIRefundGetByFilterRequest) CreatorType(creatorType CreatorType) RefundsAPIRefundGetByFilterRequest {
	r.creatorType = &creatorType
	return r
}

func (r RefundsAPIRefundGetByFilterRequest) ExternalBatchNos(externalBatchNos []string) RefundsAPIRefundGetByFilterRequest {
	r.externalBatchNos = &externalBatchNos
	return r
}

func (r RefundsAPIRefundGetByFilterRequest) PageIndex(pageIndex int32) RefundsAPIRefundGetByFilterRequest {
	r.pageIndex = &pageIndex
	return r
}

func (r RefundsAPIRefundGetByFilterRequest) PageSize(pageSize int32) RefundsAPIRefundGetByFilterRequest {
	r.pageSize = &pageSize
	return r
}

func (r RefundsAPIRefundGetByFilterRequest) Execute() (*SingleOfIRefund, *http.Response, error) {
	return r.ApiService.RefundGetByFilterExecute(r)
}

/*
RefundGetByFilter [CLOSED BETA] Get refunds by filter

Gets multiple refunds by the given filter<br /> <br />Beware, this endpoint is part of a closed beta and is only available for closed beta participants.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return RefundsAPIRefundGetByFilterRequest
*/
func (a *RefundsAPIService) RefundGetByFilter(ctx context.Context) RefundsAPIRefundGetByFilterRequest {
	return RefundsAPIRefundGetByFilterRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return SingleOfIRefund
func (a *RefundsAPIService) RefundGetByFilterExecute(r RefundsAPIRefundGetByFilterRequest) (*SingleOfIRefund, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *SingleOfIRefund
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "RefundsAPIService.RefundGetByFilter")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v2.1/refunds/merchant"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.identifiersIdentifierType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "identifiers.identifierType", r.identifiersIdentifierType, "")
	}
	if r.identifiersModels != nil {
		t := *r.identifiersModels
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "identifiers.models", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "identifiers.models", t, "multi")
		}
	}
	if r.channelExportStatusStatuses != nil {
		t := *r.channelExportStatusStatuses
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelExportStatus.statuses", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelExportStatus.statuses", t, "multi")
		}
	}
	if r.channelExportStatusMaxNumberOfExportAttempts != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "channelExportStatus.maxNumberOfExportAttempts", r.channelExportStatusMaxNumberOfExportAttempts, "")
	}
	if r.reasons != nil {
		t := *r.reasons
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "reasons", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "reasons", t, "multi")
		}
	}
	if r.createdDateRangeFromDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdDateRange.fromDate", r.createdDateRangeFromDate, "")
	}
	if r.createdDateRangeToDate != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "createdDateRange.toDate", r.createdDateRangeToDate, "")
	}
	if r.channelIds != nil {
		t := *r.channelIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "channelIds", t, "multi")
		}
	}
	if r.search != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "search", r.search, "")
	}
	if r.isAcknowledgedByMerchant != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isAcknowledgedByMerchant", r.isAcknowledgedByMerchant, "")
	}
	if r.isAcknowledgedByChannel != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "isAcknowledgedByChannel", r.isAcknowledgedByChannel, "")
	}
	if r.fulfillmentType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "fulfillmentType", r.fulfillmentType, "")
	}
	if r.creatorType != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "creatorType", r.creatorType, "")
	}
	if r.externalBatchNos != nil {
		t := *r.externalBatchNos
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToHeaderOrQuery(localVarQueryParams, "externalBatchNos", s.Index(i).Interface(), "multi")
			}
		} else {
			parameterAddToHeaderOrQuery(localVarQueryParams, "externalBatchNos", t, "multi")
		}
	}
	if r.pageIndex != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageIndex", r.pageIndex, "")
	}
	if r.pageSize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "pageSize", r.pageSize, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["apiKey"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarQueryParams.Add("apikey", key)
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ApiResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
