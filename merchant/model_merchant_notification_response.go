/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"time"
)

// checks if the MerchantNotificationResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MerchantNotificationResponse{}

// MerchantNotificationResponse struct for MerchantNotificationResponse
type MerchantNotificationResponse struct {
	// Unique identifier used by ChannelEngine.
	Id *int32 `json:"Id,omitempty"`
	// Indicating whether the notification is already read using the backoffice.
	Read *bool `json:"Read,omitempty"`
	// Get the created date time.
	CreatedAt *time.Time `json:"CreatedAt,omitempty"`
	Message NullableString `json:"Message,omitempty"`
	Subject NullableString `json:"Subject,omitempty"`
	Count *int32 `json:"Count,omitempty"`
	Type *NotificationType `json:"Type,omitempty"`
}

// NewMerchantNotificationResponse instantiates a new MerchantNotificationResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMerchantNotificationResponse() *MerchantNotificationResponse {
	this := MerchantNotificationResponse{}
	return &this
}

// NewMerchantNotificationResponseWithDefaults instantiates a new MerchantNotificationResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMerchantNotificationResponseWithDefaults() *MerchantNotificationResponse {
	this := MerchantNotificationResponse{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *MerchantNotificationResponse) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantNotificationResponse) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *MerchantNotificationResponse) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *MerchantNotificationResponse) SetId(v int32) {
	o.Id = &v
}

// GetRead returns the Read field value if set, zero value otherwise.
func (o *MerchantNotificationResponse) GetRead() bool {
	if o == nil || IsNil(o.Read) {
		var ret bool
		return ret
	}
	return *o.Read
}

// GetReadOk returns a tuple with the Read field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantNotificationResponse) GetReadOk() (*bool, bool) {
	if o == nil || IsNil(o.Read) {
		return nil, false
	}
	return o.Read, true
}

// HasRead returns a boolean if a field has been set.
func (o *MerchantNotificationResponse) HasRead() bool {
	if o != nil && !IsNil(o.Read) {
		return true
	}

	return false
}

// SetRead gets a reference to the given bool and assigns it to the Read field.
func (o *MerchantNotificationResponse) SetRead(v bool) {
	o.Read = &v
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *MerchantNotificationResponse) GetCreatedAt() time.Time {
	if o == nil || IsNil(o.CreatedAt) {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantNotificationResponse) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *MerchantNotificationResponse) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *MerchantNotificationResponse) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MerchantNotificationResponse) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MerchantNotificationResponse) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *MerchantNotificationResponse) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *MerchantNotificationResponse) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *MerchantNotificationResponse) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *MerchantNotificationResponse) UnsetMessage() {
	o.Message.Unset()
}

// GetSubject returns the Subject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MerchantNotificationResponse) GetSubject() string {
	if o == nil || IsNil(o.Subject.Get()) {
		var ret string
		return ret
	}
	return *o.Subject.Get()
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MerchantNotificationResponse) GetSubjectOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subject.Get(), o.Subject.IsSet()
}

// HasSubject returns a boolean if a field has been set.
func (o *MerchantNotificationResponse) HasSubject() bool {
	if o != nil && o.Subject.IsSet() {
		return true
	}

	return false
}

// SetSubject gets a reference to the given NullableString and assigns it to the Subject field.
func (o *MerchantNotificationResponse) SetSubject(v string) {
	o.Subject.Set(&v)
}
// SetSubjectNil sets the value for Subject to be an explicit nil
func (o *MerchantNotificationResponse) SetSubjectNil() {
	o.Subject.Set(nil)
}

// UnsetSubject ensures that no value is present for Subject, not even an explicit nil
func (o *MerchantNotificationResponse) UnsetSubject() {
	o.Subject.Unset()
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *MerchantNotificationResponse) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantNotificationResponse) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *MerchantNotificationResponse) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *MerchantNotificationResponse) SetCount(v int32) {
	o.Count = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *MerchantNotificationResponse) GetType() NotificationType {
	if o == nil || IsNil(o.Type) {
		var ret NotificationType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MerchantNotificationResponse) GetTypeOk() (*NotificationType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *MerchantNotificationResponse) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given NotificationType and assigns it to the Type field.
func (o *MerchantNotificationResponse) SetType(v NotificationType) {
	o.Type = &v
}

func (o MerchantNotificationResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MerchantNotificationResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["Id"] = o.Id
	}
	if !IsNil(o.Read) {
		toSerialize["Read"] = o.Read
	}
	if !IsNil(o.CreatedAt) {
		toSerialize["CreatedAt"] = o.CreatedAt
	}
	if o.Message.IsSet() {
		toSerialize["Message"] = o.Message.Get()
	}
	if o.Subject.IsSet() {
		toSerialize["Subject"] = o.Subject.Get()
	}
	if !IsNil(o.Count) {
		toSerialize["Count"] = o.Count
	}
	if !IsNil(o.Type) {
		toSerialize["Type"] = o.Type
	}
	return toSerialize, nil
}

type NullableMerchantNotificationResponse struct {
	value *MerchantNotificationResponse
	isSet bool
}

func (v NullableMerchantNotificationResponse) Get() *MerchantNotificationResponse {
	return v.value
}

func (v *NullableMerchantNotificationResponse) Set(val *MerchantNotificationResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableMerchantNotificationResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableMerchantNotificationResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMerchantNotificationResponse(val *MerchantNotificationResponse) *NullableMerchantNotificationResponse {
	return &NullableMerchantNotificationResponse{value: val, isSet: true}
}

func (v NullableMerchantNotificationResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMerchantNotificationResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


