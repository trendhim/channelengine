/*
ChannelEngine Merchant API

Testing ProductAttributesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package merchant

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/trendhim/channelengine/merchant"
)

func Test_merchant_ProductAttributesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProductAttributesAPIService ProductAttributeGroupAddProductExtraData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		resp, httpRes, err := apiClient.ProductAttributesAPI.ProductAttributeGroupAddProductExtraData(context.Background(), groupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductAttributesAPIService ProductAttributeGroupCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProductAttributesAPI.ProductAttributeGroupCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductAttributesAPIService ProductAttributeGroupDelete", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		resp, httpRes, err := apiClient.ProductAttributesAPI.ProductAttributeGroupDelete(context.Background(), groupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductAttributesAPIService ProductAttributeGroupGetByFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProductAttributesAPI.ProductAttributeGroupGetByFilter(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductAttributesAPIService ProductAttributeGroupGetWithChannelsByFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProductAttributesAPI.ProductAttributeGroupGetWithChannelsByFilter(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductAttributesAPIService ProductAttributeGroupRemoveProductExtraData", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var groupName string

		resp, httpRes, err := apiClient.ProductAttributesAPI.ProductAttributeGroupRemoveProductExtraData(context.Background(), groupName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProductAttributesAPIService ProductAttributeGroupRenameProductAttributeGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProductAttributesAPI.ProductAttributeGroupRenameProductAttributeGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
