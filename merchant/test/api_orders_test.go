/*
ChannelEngine Merchant API

Testing OrdersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package merchant

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/trendhim/channelengine/merchant"
)

func Test_merchant_OrdersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test OrdersAPIService OrderAcknowledge", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrdersAPI.OrderAcknowledge(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService OrderGetByFilter", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrdersAPI.OrderGetByFilter(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService OrderGetNew", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrdersAPI.OrderGetNew(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService OrderInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantOrderNo string

		resp, httpRes, err := apiClient.OrdersAPI.OrderInvoice(context.Background(), merchantOrderNo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService OrderPackingSlip", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantOrderNo string

		resp, httpRes, err := apiClient.OrdersAPI.OrderPackingSlip(context.Background(), merchantOrderNo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService OrderUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.OrdersAPI.OrderUpdate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService OrderUploadInvoice", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantOrderNo string

		resp, httpRes, err := apiClient.OrdersAPI.OrderUploadInvoice(context.Background(), merchantOrderNo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test OrdersAPIService OrderUploadInvoiceAsString", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var merchantOrderNo string

		resp, httpRes, err := apiClient.OrdersAPI.OrderUploadInvoiceAsString(context.Background(), merchantOrderNo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
