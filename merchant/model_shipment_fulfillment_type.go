/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.14.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// ShipmentFulfillmentType Shipment is fully fulfilled by channel or merchant  so no make sense to use FulfillmentType for orders  It is created to keep it consistent with others
type ShipmentFulfillmentType string

// List of ShipmentFulfillmentType
const (
	SHIPMENTFULFILLMENTTYPE_ALL ShipmentFulfillmentType = "ALL"
	SHIPMENTFULFILLMENTTYPE_ONLY_MERCHANT ShipmentFulfillmentType = "ONLY_MERCHANT"
	SHIPMENTFULFILLMENTTYPE_ONLY_CHANNEL ShipmentFulfillmentType = "ONLY_CHANNEL"
)

// All allowed values of ShipmentFulfillmentType enum
var AllowedShipmentFulfillmentTypeEnumValues = []ShipmentFulfillmentType{
	"ALL",
	"ONLY_MERCHANT",
	"ONLY_CHANNEL",
}

func (v *ShipmentFulfillmentType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ShipmentFulfillmentType(value)
	for _, existing := range AllowedShipmentFulfillmentTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ShipmentFulfillmentType", value)
}

// NewShipmentFulfillmentTypeFromValue returns a pointer to a valid ShipmentFulfillmentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewShipmentFulfillmentTypeFromValue(v string) (*ShipmentFulfillmentType, error) {
	ev := ShipmentFulfillmentType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ShipmentFulfillmentType: valid values are %v", v, AllowedShipmentFulfillmentTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ShipmentFulfillmentType) IsValid() bool {
	for _, existing := range AllowedShipmentFulfillmentTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ShipmentFulfillmentType value
func (v ShipmentFulfillmentType) Ptr() *ShipmentFulfillmentType {
	return &v
}

type NullableShipmentFulfillmentType struct {
	value *ShipmentFulfillmentType
	isSet bool
}

func (v NullableShipmentFulfillmentType) Get() *ShipmentFulfillmentType {
	return v.value
}

func (v *NullableShipmentFulfillmentType) Set(val *ShipmentFulfillmentType) {
	v.value = val
	v.isSet = true
}

func (v NullableShipmentFulfillmentType) IsSet() bool {
	return v.isSet
}

func (v *NullableShipmentFulfillmentType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShipmentFulfillmentType(val *ShipmentFulfillmentType) *NullableShipmentFulfillmentType {
	return &NullableShipmentFulfillmentType{value: val, isSet: true}
}

func (v NullableShipmentFulfillmentType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShipmentFulfillmentType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

