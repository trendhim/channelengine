/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// VolumeUnitOfMeasure the model 'VolumeUnitOfMeasure'
type VolumeUnitOfMeasure string

// List of VolumeUnitOfMeasure
const (
	VOLUMEUNITOFMEASURE_FEET VolumeUnitOfMeasure = "CUBIC_FEET"
	VOLUMEUNITOFMEASURE_INCHES VolumeUnitOfMeasure = "CUBIC_INCHES"
	VOLUMEUNITOFMEASURE_METER VolumeUnitOfMeasure = "CUBIC_METER"
	VOLUMEUNITOFMEASURE_YARD VolumeUnitOfMeasure = "CUBIC_YARD"
)

// All allowed values of VolumeUnitOfMeasure enum
var AllowedVolumeUnitOfMeasureEnumValues = []VolumeUnitOfMeasure{
	"CUBIC_FEET",
	"CUBIC_INCHES",
	"CUBIC_METER",
	"CUBIC_YARD",
}

func (v *VolumeUnitOfMeasure) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VolumeUnitOfMeasure(value)
	for _, existing := range AllowedVolumeUnitOfMeasureEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VolumeUnitOfMeasure", value)
}

// NewVolumeUnitOfMeasureFromValue returns a pointer to a valid VolumeUnitOfMeasure
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVolumeUnitOfMeasureFromValue(v string) (*VolumeUnitOfMeasure, error) {
	ev := VolumeUnitOfMeasure(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VolumeUnitOfMeasure: valid values are %v", v, AllowedVolumeUnitOfMeasureEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VolumeUnitOfMeasure) IsValid() bool {
	for _, existing := range AllowedVolumeUnitOfMeasureEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VolumeUnitOfMeasure value
func (v VolumeUnitOfMeasure) Ptr() *VolumeUnitOfMeasure {
	return &v
}

type NullableVolumeUnitOfMeasure struct {
	value *VolumeUnitOfMeasure
	isSet bool
}

func (v NullableVolumeUnitOfMeasure) Get() *VolumeUnitOfMeasure {
	return v.value
}

func (v *NullableVolumeUnitOfMeasure) Set(val *VolumeUnitOfMeasure) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeUnitOfMeasure) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeUnitOfMeasure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeUnitOfMeasure(val *VolumeUnitOfMeasure) *NullableVolumeUnitOfMeasure {
	return &NullableVolumeUnitOfMeasure{value: val, isSet: true}
}

func (v NullableVolumeUnitOfMeasure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeUnitOfMeasure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

