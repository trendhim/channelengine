/*
ChannelEngine Merchant API

ChannelEngine API for merchants

API version: 2.17.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package merchant

import (
	"encoding/json"
	"fmt"
)

// RefundReason the model 'RefundReason'
type RefundReason string

// List of RefundReason
const (
	REFUNDREASON_PRODUCT_DEFECT RefundReason = "PRODUCT_DEFECT"
	REFUNDREASON_PRODUCT_UNSATISFACTORY RefundReason = "PRODUCT_UNSATISFACTORY"
	REFUNDREASON_WRONG_PRODUCT RefundReason = "WRONG_PRODUCT"
	REFUNDREASON_TOO_MANY_PRODUCTS RefundReason = "TOO_MANY_PRODUCTS"
	REFUNDREASON_REFUSED RefundReason = "REFUSED"
	REFUNDREASON_REFUSED_DAMAGED RefundReason = "REFUSED_DAMAGED"
	REFUNDREASON_WRONG_ADDRESS RefundReason = "WRONG_ADDRESS"
	REFUNDREASON_NOT_COLLECTED RefundReason = "NOT_COLLECTED"
	REFUNDREASON_WRONG_SIZE RefundReason = "WRONG_SIZE"
	REFUNDREASON_OTHER RefundReason = "OTHER"
)

// All allowed values of RefundReason enum
var AllowedRefundReasonEnumValues = []RefundReason{
	"PRODUCT_DEFECT",
	"PRODUCT_UNSATISFACTORY",
	"WRONG_PRODUCT",
	"TOO_MANY_PRODUCTS",
	"REFUSED",
	"REFUSED_DAMAGED",
	"WRONG_ADDRESS",
	"NOT_COLLECTED",
	"WRONG_SIZE",
	"OTHER",
}

func (v *RefundReason) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RefundReason(value)
	for _, existing := range AllowedRefundReasonEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RefundReason", value)
}

// NewRefundReasonFromValue returns a pointer to a valid RefundReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRefundReasonFromValue(v string) (*RefundReason, error) {
	ev := RefundReason(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RefundReason: valid values are %v", v, AllowedRefundReasonEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RefundReason) IsValid() bool {
	for _, existing := range AllowedRefundReasonEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RefundReason value
func (v RefundReason) Ptr() *RefundReason {
	return &v
}

type NullableRefundReason struct {
	value *RefundReason
	isSet bool
}

func (v NullableRefundReason) Get() *RefundReason {
	return v.value
}

func (v *NullableRefundReason) Set(val *RefundReason) {
	v.value = val
	v.isSet = true
}

func (v NullableRefundReason) IsSet() bool {
	return v.isSet
}

func (v *NullableRefundReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRefundReason(val *RefundReason) *NullableRefundReason {
	return &NullableRefundReason{value: val, isSet: true}
}

func (v NullableRefundReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRefundReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

